{"version":3,"file":"WebComponentManager.js","sourceRoot":"","sources":["../../../src/EmbeddingApi/WebComponentManager.ts"],"names":[],"mappings":";;AACA,uDAAoD;AAEpD,MAAa,mBAAmB;IAOvB,MAAM,CAAC,YAAY,CAAC,GAAW,EAAE,cAAuB;QAC7D,IAAI,CAAC,cAAc,EAAE;YACnB,OAAO,IAAI,CAAC;SACb;QACD,IAAI;YACF,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;YACzB,IAAI,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;gBACxC,OAAO,KAAK,CAAC;aACd;SACF;QAAC,WAAM;YACN,4FAA4F;YAC5F,OAAO,IAAI,CAAC;SACb;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,MAAM,CAAC,oBAAoB,CAAC,GAAW,EAAE,cAAuB;QACrE,IAAI,CAAC,cAAc,EAAE;YACnB,OAAO;SACR;QACD,IAAI;YACF,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;YACzB,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;SACtC;QAAC,OAAO,CAAC,EAAE;YACV,2BAA2B;YAC3B,OAAO;SACR;IACH,CAAC;IAEM,MAAM,CAAC,WAAW,CAAC,GAAkB,EAAE,cAAuB;QACnE,IAAI,CAAC,cAAc,EAAE;YACnB,OAAO;SACR;QACD,IAAI,CAAC,GAAG,EAAE;YACR,OAAO;SACR;QACD,IAAI;YACF,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;YACzB,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;SACzC;QAAC,OAAO,CAAC,EAAE;YACV,0BAA0B;YAC1B,OAAO;SACR;IACH,CAAC;IAEM,MAAM,CAAC,oBAAoB,CAAC,YAAiC;QAClE,MAAM,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC;QACvC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;QACjD,IAAI,CAAC,cAAc,EAAE,CAAC;QACtB,OAAO,UAAU,CAAC;IACpB,CAAC;IAEM,MAAM,CAAC,sBAAsB,CAAC,cAAsB;QACzD,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;IAC5C,CAAC;IAED,sCAAsC;IAC/B,MAAM,CAAC,gBAAgB;QAC5B,MAAM,mBAAmB,GAAG,IAAI,GAAG,EAA+B,CAAC;QACnE,gCAAgC;QAChC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,YAAiC,EAAE,cAAsB,EAAE,EAAE;YACvF,mBAAmB,CAAC,GAAG,CAAC,cAAc,EAAE,YAAY,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;QACH,OAAO,mBAAmB,CAAC;IAC7B,CAAC;IAEM,MAAM,CAAC,iBAAiB,CAAC,IAAyB;QACvD,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACrC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;QAClB,OAAO,OAAO,CAAC;IACjB,CAAC;IAEM,MAAM,CAAC,KAAK;QACjB,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;IAC7B,CAAC;;AAjFH,kDAkFC;AAjFC,yFAAyF;AAC1E,kCAAc,GAAG,CAAC,CAAC;AACnB,iCAAa,GAAqC,IAAI,GAAG,EAA+B,CAAC;AACzF,yBAAK,GAAG,IAAI,2BAAY,EAAE,CAAC;AAC3B,mCAAe,GAAgB,IAAI,GAAG,EAAE,CAAC","sourcesContent":["import { TableauWebComponent } from './Components/TableauWebComponent';\nimport { PromiseQueue } from './Utils/PromiseQueue';\n\nexport class WebComponentManager {\n  // This contains a static counter & a map that keeps track of the webComponents embedded.\n  private static embeddingIndex = 0;\n  private static webComponents: Map<number, TableauWebComponent> = new Map<number, TableauWebComponent>();\n  private static queue = new PromiseQueue();\n  private static signedInOrigins: Set<string> = new Set();\n\n  public static authRequired(src: string, forceTokenSync: boolean): boolean {\n    if (!forceTokenSync) {\n      return true;\n    }\n    try {\n      const url = new URL(src);\n      if (this.signedInOrigins.has(url.origin)) {\n        return false;\n      }\n    } catch {\n      // we reach here if url is invalid but we cannot do much here. Jut continue the normal flow.\n      return true;\n    }\n    return true;\n  }\n\n  public static updateSignedInOrigin(src: string, forceTokenSync: boolean) {\n    if (!forceTokenSync) {\n      return;\n    }\n    try {\n      const url = new URL(src);\n      this.signedInOrigins.add(url.origin);\n    } catch (e) {\n      // not a lot we can do here\n      return;\n    }\n  }\n\n  public static clearOrigin(src: string | null, forceTokenSync: boolean): void {\n    if (!forceTokenSync) {\n      return;\n    }\n    if (!src) {\n      return;\n    }\n    try {\n      const url = new URL(src);\n      this.signedInOrigins.delete(url.origin);\n    } catch (e) {\n      //not a lot we can do here\n      return;\n    }\n  }\n\n  public static registerWebComponent(webComponent: TableauWebComponent): number {\n    const assignedId = this.embeddingIndex;\n    this.webComponents.set(assignedId, webComponent);\n    this.embeddingIndex++;\n    return assignedId;\n  }\n\n  public static unregisterWebComponent(embeddingIndex: number): void {\n    this.webComponents.delete(embeddingIndex);\n  }\n\n  // Methods below only used for testing\n  public static getWebComponents(): Map<number, TableauWebComponent> {\n    const webComponentsCloned = new Map<number, TableauWebComponent>();\n    // a shallow copy is good enough\n    this.webComponents.forEach((webComponent: TableauWebComponent, embeddingIndex: number) => {\n      webComponentsCloned.set(embeddingIndex, webComponent);\n    });\n    return webComponentsCloned;\n  }\n\n  public static synchronizeRender(func: () => Promise<void>): Promise<void> {\n    const promise = this.queue.add(func);\n    this.queue.poll();\n    return promise;\n  }\n\n  public static clear(): void {\n    this.webComponents.clear();\n  }\n}\n"]}