"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const api_external_contract_js_1 = require("@tableau/api-external-contract-js");
const api_internal_contract_js_1 = require("@tableau/api-internal-contract-js");
const api_shared_js_1 = require("@tableau/api-shared-js");
const EmbeddingUrlBuilder_1 = require("./EmbeddingUrlBuilder");
function createAskDataUrl(src, options, embeddingId, customParams) {
    // strip params in URL, all custom params should come through 'askDataOptions', 'filters' or 'customParams'.
    const srcWithoutQueryParams = src.split('?')[0];
    let url;
    try {
        url = new URL(srcWithoutQueryParams);
        EmbeddingUrlBuilder_1.validateUrl(url);
    }
    catch (error) {
        throw new api_shared_js_1.TableauError(api_external_contract_js_1.EmbeddingErrorCodes.InvalidUrl, error.message);
    }
    const defaultParams = createAskDataDefaultParameters(url, embeddingId);
    const builder = new EmbeddingAskDataUrlBuilder(url)
        .appendDefaultParameters(defaultParams)
        .appendUserOptions(options)
        .appendCustomParams(customParams);
    // If api auth is enabled, we don't need to redirect to the auth endpoint as part of loading the Viz.
    if (options.iframeAuth) {
        builder.setToken(options.token);
    }
    return builder.build();
}
exports.createAskDataUrl = createAskDataUrl;
function createAskDataDefaultParameters(url, embeddingId) {
    const defaultParameters = new Map();
    const internalVersion = `${api_internal_contract_js_1.INTERNAL_CONTRACT_VERSION.major}.${api_internal_contract_js_1.INTERNAL_CONTRACT_VERSION.minor}.${api_internal_contract_js_1.INTERNAL_CONTRACT_VERSION.fix}`;
    defaultParameters.set(api_internal_contract_js_1.AskDataOptionNames.ApiInternalVersion, internalVersion);
    const externalVersion = api_shared_js_1.ApiVersion.Instance.formattedValue; // maj.min.fix (no build)
    defaultParameters.set(api_internal_contract_js_1.AskDataOptionNames.ApiExternalVersion, externalVersion);
    defaultParameters.set(api_internal_contract_js_1.AskDataOptionNames.ApiID, `embhost${embeddingId}`);
    defaultParameters.set(api_internal_contract_js_1.AskDataOptionNames.AskDataWebComponent, 'true');
    return defaultParameters;
}
class EmbeddingAskDataUrlBuilder extends EmbeddingUrlBuilder_1.EmbeddingUrlBuilder {
    constructor(_url) {
        super();
        this._url = _url;
        this._optionNames = api_internal_contract_js_1.AskDataOptionNames;
    }
    /**
     * Sanitizes parameter values before they are added to the search params.
     * @param parameterName The name of the parameter. Some parameters require special handling.
     * @param value The raw value of the parameter.
     */
    sanitizeParameterValue(parameterName, value) {
        return this.sanitizeValue(value);
    }
}
exports.EmbeddingAskDataUrlBuilder = EmbeddingAskDataUrlBuilder;
//# sourceMappingURL=EmbeddingAskDataUrl.js.map