"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const EmbeddingUrlBuilder_1 = require("./EmbeddingUrlBuilder");
/**
 * Enumerates the different modes that are represented with a URL relating to a Tableau
 * visualization.
 *
 * The names of these modes are important! They are used in the URL to indicate the mode (called
 * module in VizPortal) and are part of the VizPortal and VizClient routing schemes.
 */
exports.VizUrlMode = {
    Viewing: 'views',
    Authoring: 'authoring',
};
/**
 * Represents a URL that contains a mode of operation (viewing, authoring, etc.), along with a
 * specific workbook/sheet. Site names are also tracked. Query parameters are preserved, but this
 * class is ignorant of any semantic meaning assigned to them.
 *
 * This class is designed to be immutable. You can use the various `withX` methods to change state
 * on a cloned version.
 *
 * @example <caption>How to create an instance</caption>
 * const vizUrl = VizUrl.create('http://www.example.com/t/site/views/workbook/sheet');
 *
 * @example <caption>How to clone an instance</caption>
 * const cloned = VizUrl.create(vizUrl);
 *
 * @example <caption>How to change values</caption>
 * const vizUrl = VizUrl.create('http://www.example.com/t/site/views/workbook/sheet')
 *   .withMode(VizUrlMode.Authoring)
 *   .withWorkbookId('newWorkbook')
 *   .withSheetId('newSheet');
 * expect(vizUrl.toString()).toBe('http://www.example.com/t/site/authoring/newWorkbook/newSheet');
 *
 * TODO: TFSID 1351171: Move this out into its own module and use it in VizClient.
 */
class VizUrl {
    constructor(originalUrl, segments) {
        this._url = originalUrl;
        this._segments = segments;
    }
    get mode() {
        return this._segments.mode;
    }
    get siteId() {
        return this._segments.siteId;
    }
    get workbookId() {
        return this._segments.workbookId;
    }
    get sheetId() {
        return this._segments.sheetId;
    }
    get customView() {
        return this._segments.customView;
    }
    /**
     * Constructs a new URL representing a particular workbook/sheet in a particular mode (viewing,
     * authoring, etc.).
     * @param url An existing URL or href to parse.
     */
    static create(url) {
        const clonedUrl = EmbeddingUrlBuilder_1.canonicalizeVizPortalRoutingHashes(new URL(url.toString()));
        const segments = VizUrl._parsePathName(clonedUrl.pathname);
        clonedUrl.pathname = VizUrl._buildPathName(segments);
        return new VizUrl(clonedUrl, segments);
    }
    toURL() {
        return new URL(this.toString());
    }
    toString() {
        return this._url.toString();
    }
    /**
     * This returns a {@link VizUrl} in the requested mode, if the mode is valid.
     * @param desiredMode The desired {@link VizUrlMode} for a viz.
     * @returns A {@link VizUrl} in the desired mode; throws if the requested mode change is invalid.
     */
    withMode(desiredMode) {
        // no need to do anything if the mode isn't changing
        if (this._segments.mode === desiredMode) {
            return this;
        }
        const modeSegments = this._getSegmentsForMode(desiredMode);
        return this._makeVizUrlFromPathSegments(modeSegments);
    }
    /**
     * This returns a {@link VizUrl} with the requested custom view.
     * @param customView The desired {@link CustomViewPathPart} for a viz.
     * @returns A {@link VizUrl} with the requested view parameters, or no-op if the URL is a non-viewing URL.
     */
    withCustomView(customView) {
        var _a;
        if (customView.luid === ((_a = this.customView) === null || _a === void 0 ? void 0 : _a.luid) && customView.name === this.customView.name) {
            return this;
        }
        const modeSegments = this._getSegmentsForMode(this.mode);
        modeSegments.customView = customView;
        return this._makeVizUrlFromPathSegments(modeSegments);
    }
    /**
     * This returns a {@link VizUrl} with the requested sheet ID.
     * @param sheetId The desired {@link sheetId} for a viz.
     * @returns A {@link VizUrl} with the desired sheet ID, or no-op if the URL is already for the desired sheet.
     */
    withSheetId(sheetId) {
        if (this.sheetId === sheetId) {
            return this;
        }
        const modeSegments = Object.assign(Object.assign({}, this._segments), { sheetId: sheetId });
        return this._makeVizUrlFromPathSegments(modeSegments);
    }
    /**
     * This returns a {@link VizUrl} with the requested workbook ID.
     * @param workbookId The desired {@link workbookId} for a viz.
     * @returns A {@link VizUrl} with the desired workbook ID, or no-op if the URL is already for the desired workbook.
     */
    withWorkbookId(workbookId) {
        if (this.workbookId === workbookId) {
            return this;
        }
        const modeSegments = Object.assign(Object.assign({}, this._segments), { workbookId: workbookId });
        return this._makeVizUrlFromPathSegments(modeSegments);
    }
    _getSegmentsForMode(desiredMode) {
        if (desiredMode === exports.VizUrlMode.Authoring) {
            this._segments.customView = undefined;
        }
        return Object.assign(Object.assign({}, this._segments), { mode: desiredMode });
    }
    _makeVizUrlFromPathSegments(modeSegments) {
        const modePathName = VizUrl._buildPathName(modeSegments);
        const modeUrl = new URL(this._url.toString());
        modeUrl.pathname = modePathName;
        return new VizUrl(modeUrl, modeSegments);
    }
    /**
     * Parses the input url and returns all the parts in its pathname.
     */
    static _parsePathName(pathName) {
        var _a, _b, _c;
        // Split up the constituent parts of the path.
        // For example, 'https://devplat.tableautest.com/t/site/authoring/Workbook/Sheet'
        //   parts = ['t', 'site', 'authoring', 'Workbook', 'Sheet']
        const parts = pathName.split('/').filter((x) => x);
        if (parts.length === 0) {
            throw new Error('Invalid path name');
        }
        let siteId;
        // check if the site root is in the t/siteName form
        if (parts[0] === 't') {
            if (parts.length < 2) {
                throw new Error(`Invalid site in path '${pathName}'`);
            }
            siteId = parts[1];
            parts.splice(0, 2);
        }
        // Extract the mode.
        //   parts = ['authoring', 'Workbook', 'Sheet']
        const modePathPart = parts.shift();
        if (!modePathPart) {
            throw new Error(`Missing mode in path '${pathName}'`);
        }
        const mode = modePathPart;
        if (!Object.values(exports.VizUrlMode).includes(mode)) {
            throw new Error(`Invalid Viz Url Mode '${modePathPart}' in path '${pathName}'`);
        }
        // Extract the workbook and sheet
        //   parts = ['Workbook', 'Sheet']
        if (parts.length === 0) {
            throw new Error(`Missing workbook/sheet name in path '${pathName}'`);
        }
        const workbookId = (_a = parts.shift(), (_a !== null && _a !== void 0 ? _a : ''));
        const sheetId = parts.shift();
        if (parts.length !== 0 && parts.length !== 2) {
            throw new Error(`Invalid path name: unknown parts after sheet id: '${pathName}'`);
        }
        // Handle the possibility that the URL has a 2 part custom view consisting of an ID and a name
        let customView = undefined;
        if (parts.length === 2) {
            const viewId = (_b = parts.shift(), (_b !== null && _b !== void 0 ? _b : ''));
            const viewName = (_c = parts.shift(), (_c !== null && _c !== void 0 ? _c : ''));
            customView = { luid: viewId, name: viewName };
        }
        return { mode, siteId, workbookId, sheetId, customView };
    }
    /**
     * Builds the pathname of a URL from its parts.
     * @param segments Parts of a URL pathname.
     * @returns A string that represents a URL pathname.
     */
    static _buildPathName(segments) {
        const parts = [];
        if (segments.siteId) {
            parts.push('t');
            parts.push(segments.siteId);
        }
        parts.push(segments.mode);
        if (segments.workbookId) {
            parts.push(segments.workbookId);
        }
        if (segments.sheetId) {
            parts.push(segments.sheetId);
        }
        if (segments.customView && segments.mode === exports.VizUrlMode.Viewing) {
            parts.push(segments.customView.luid);
            parts.push(segments.customView.name);
        }
        const path = parts.join('/');
        return path;
    }
}
exports.VizUrl = VizUrl;
//# sourceMappingURL=VizUrl.js.map