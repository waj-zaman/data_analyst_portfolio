"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const Contract = __importStar(require("@tableau/api-external-contract-js"));
const api_shared_js_1 = require("@tableau/api-shared-js");
const CustomView_1 = require("./CustomView");
const Dashboard_1 = require("./Dashboard");
const Parameter_1 = require("./Parameter");
const SheetInfo_1 = require("./SheetInfo");
const Story_1 = require("./Story");
const Worksheet_1 = require("./Worksheet");
class Workbook {
    constructor(_workbookImpl) {
        this._workbookImpl = _workbookImpl;
    }
    get activeSheet() {
        switch (this._workbookImpl.activeSheet.sheetType) {
            case Contract.SheetType.Worksheet: {
                return new Worksheet_1.Worksheet(this._workbookImpl.activeSheet, this._workbookImpl);
            }
            case Contract.SheetType.Dashboard: {
                return new Dashboard_1.Dashboard(this._workbookImpl.activeSheet, this._workbookImpl);
            }
            case Contract.SheetType.Story: {
                return new Story_1.Story(this._workbookImpl.activeSheet, this._workbookImpl);
            }
            default: {
                throw new api_shared_js_1.TableauError(Contract.EmbeddingErrorCodes.ImplementationError, 'Unable to initialize ActiveSheet');
            }
        }
    }
    get publishedSheetsInfo() {
        return this._workbookImpl.publishedSheetsInfo.map((sheetInfoImpl) => {
            return new SheetInfo_1.SheetInfo(sheetInfoImpl, this._workbookImpl);
        });
    }
    get name() {
        return this._workbookImpl.name;
    }
    get activeCustomView() {
        if (this._workbookImpl.activeCustomView) {
            return new CustomView_1.CustomView(this._workbookImpl.activeCustomView, this._workbookImpl);
        }
        else {
            return undefined;
        }
    }
    activateSheetAsync(sheetNameOrIndex) {
        return this._workbookImpl.activateSheetAsync(sheetNameOrIndex).then((workbookImpl) => {
            if (this._workbookImpl !== workbookImpl) {
                this._workbookImpl = workbookImpl;
            }
            return this.activeSheet;
        });
    }
    revertAllAsync() {
        return this._workbookImpl.revertAllAsync();
    }
    getCustomViewsAsync() {
        return this._workbookImpl.getCustomViewsAsync().then((customViewsImpl) => {
            return customViewsImpl.map((customViewImpl) => {
                return new CustomView_1.CustomView(customViewImpl, this._workbookImpl);
            });
        });
    }
    showCustomViewAsync(customViewName) {
        return this._workbookImpl.showCustomViewAsync(customViewName).then((customViewImpl) => {
            return customViewImpl ? new CustomView_1.CustomView(customViewImpl, this._workbookImpl) : undefined;
        });
    }
    removeCustomViewAsync(customViewName) {
        return this._workbookImpl.removeCustomViewAsync(customViewName).then((customViewImpl) => {
            return new CustomView_1.CustomView(customViewImpl, this._workbookImpl);
        });
    }
    saveCustomViewAsync(customViewName) {
        return this._workbookImpl.saveCustomViewAsync(customViewName).then((customViewImpl) => {
            return new CustomView_1.CustomView(customViewImpl, this._workbookImpl);
        });
    }
    setActiveCustomViewAsDefaultAsync() {
        return this._workbookImpl.setActiveCustomViewAsDefaultAsync();
    }
    getParametersAsync() {
        return this._workbookImpl.getParametersAsync().then((parametersImpl) => {
            return parametersImpl.map((parameterImpl) => {
                return new Parameter_1.Parameter(parameterImpl);
            });
        });
    }
    changeParameterValueAsync(name, value) {
        return this._workbookImpl.changeParameterValueAsync(name, value).then((parameterImpl) => {
            if (parameterImpl) {
                return new Parameter_1.Parameter(parameterImpl);
            }
            else {
                throw new api_shared_js_1.TableauError(Contract.EmbeddingErrorCodes.InvalidParameter, `Invalid parameter:  ${name}`);
            }
        });
    }
}
exports.Workbook = Workbook;
//# sourceMappingURL=Workbook.js.map