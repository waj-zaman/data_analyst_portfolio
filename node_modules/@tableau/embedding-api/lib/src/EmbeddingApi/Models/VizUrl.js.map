{"version":3,"file":"VizUrl.js","sourceRoot":"","sources":["../../../../src/EmbeddingApi/Models/VizUrl.ts"],"names":[],"mappings":";;AAAA,+DAA2E;AAE3E;;;;;;GAMG;AACU,QAAA,UAAU,GAAG;IACxB,OAAO,EAAE,OAAO;IAChB,SAAS,EAAE,WAAW;CACd,CAAC;AAGX;;;;;;;;;;;;;;;;;;;;;;GAsBG;AACH,MAAa,MAAM;IAwBjB,YAAoB,WAAgB,EAAE,QAA4B;QAChE,IAAI,CAAC,IAAI,GAAG,WAAW,CAAC;QACxB,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC5B,CAAC;IAvBD,IAAW,IAAI;QACb,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;IAC7B,CAAC;IAED,IAAW,MAAM;QACf,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;IAC/B,CAAC;IAED,IAAW,UAAU;QACnB,OAAO,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC;IACnC,CAAC;IAED,IAAW,OAAO;QAChB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;IAChC,CAAC;IAED,IAAW,UAAU;QACnB,OAAO,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC;IACnC,CAAC;IAOD;;;;OAIG;IACI,MAAM,CAAC,MAAM,CAAC,GAA0B;QAC7C,MAAM,SAAS,GAAQ,wDAAkC,CAAC,IAAI,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;QACnF,MAAM,QAAQ,GAAuB,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAE/E,SAAS,CAAC,QAAQ,GAAG,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;QACrD,OAAO,IAAI,MAAM,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;IACzC,CAAC;IAEM,KAAK;QACV,OAAO,IAAI,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;IAClC,CAAC;IAEM,QAAQ;QACb,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;IAC9B,CAAC;IAED;;;;OAIG;IACI,QAAQ,CAAC,WAAuB;QACrC,oDAAoD;QACpD,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,KAAK,WAAW,EAAE;YACvC,OAAO,IAAI,CAAC;SACb;QAED,MAAM,YAAY,GAAG,IAAI,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC;QAC3D,OAAO,IAAI,CAAC,2BAA2B,CAAC,YAAY,CAAC,CAAC;IACxD,CAAC;IAED;;;;OAIG;IACI,cAAc,CAAC,UAA8B;;QAClD,IAAI,UAAU,CAAC,IAAI,YAAK,IAAI,CAAC,UAAU,0CAAE,IAAI,CAAA,IAAI,UAAU,CAAC,IAAI,KAAK,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE;YACzF,OAAO,IAAI,CAAC;SACb;QAED,MAAM,YAAY,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzD,YAAY,CAAC,UAAU,GAAG,UAAU,CAAC;QACrC,OAAO,IAAI,CAAC,2BAA2B,CAAC,YAAY,CAAC,CAAC;IACxD,CAAC;IAED;;;;OAIG;IACI,WAAW,CAAC,OAAe;QAChC,IAAI,IAAI,CAAC,OAAO,KAAK,OAAO,EAAE;YAC5B,OAAO,IAAI,CAAC;SACb;QAED,MAAM,YAAY,mCAAQ,IAAI,CAAC,SAAS,KAAE,OAAO,EAAE,OAAO,GAAE,CAAC;QAC7D,OAAO,IAAI,CAAC,2BAA2B,CAAC,YAAY,CAAC,CAAC;IACxD,CAAC;IAED;;;;OAIG;IACI,cAAc,CAAC,UAAkB;QACtC,IAAI,IAAI,CAAC,UAAU,KAAK,UAAU,EAAE;YAClC,OAAO,IAAI,CAAC;SACb;QAED,MAAM,YAAY,mCAAQ,IAAI,CAAC,SAAS,KAAE,UAAU,EAAE,UAAU,GAAE,CAAC;QACnE,OAAO,IAAI,CAAC,2BAA2B,CAAC,YAAY,CAAC,CAAC;IACxD,CAAC;IAEO,mBAAmB,CAAC,WAAuB;QACjD,IAAI,WAAW,KAAK,kBAAU,CAAC,SAAS,EAAE;YACxC,IAAI,CAAC,SAAS,CAAC,UAAU,GAAG,SAAS,CAAC;SACvC;QAED,uCAAY,IAAI,CAAC,SAAS,KAAE,IAAI,EAAE,WAAW,IAAG;IAClD,CAAC;IAEO,2BAA2B,CAAC,YAAgC;QAClE,MAAM,YAAY,GAAG,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;QACzD,MAAM,OAAO,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC9C,OAAO,CAAC,QAAQ,GAAG,YAAY,CAAC;QAEhC,OAAO,IAAI,MAAM,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;IAC3C,CAAC;IAED;;OAEG;IACK,MAAM,CAAC,cAAc,CAAC,QAAgB;;QAC5C,8CAA8C;QAC9C,iFAAiF;QACjF,4DAA4D;QAC5D,MAAM,KAAK,GAAa,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;QAC7D,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;YACtB,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;SACtC;QAED,IAAI,MAA0B,CAAC;QAE/B,mDAAmD;QACnD,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;YACpB,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;gBACpB,MAAM,IAAI,KAAK,CAAC,yBAAyB,QAAQ,GAAG,CAAC,CAAC;aACvD;YAED,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YAClB,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;SACpB;QAED,oBAAoB;QACpB,+CAA+C;QAC/C,MAAM,YAAY,GAAuB,KAAK,CAAC,KAAK,EAAE,CAAC;QACvD,IAAI,CAAC,YAAY,EAAE;YACjB,MAAM,IAAI,KAAK,CAAC,yBAAyB,QAAQ,GAAG,CAAC,CAAC;SACvD;QAED,MAAM,IAAI,GAAe,YAA0B,CAAC;QACpD,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,kBAAU,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;YAC7C,MAAM,IAAI,KAAK,CAAC,yBAAyB,YAAY,cAAc,QAAQ,GAAG,CAAC,CAAC;SACjF;QAED,iCAAiC;QACjC,kCAAkC;QAClC,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;YACtB,MAAM,IAAI,KAAK,CAAC,wCAAwC,QAAQ,GAAG,CAAC,CAAC;SACtE;QAED,MAAM,UAAU,SAAW,KAAK,CAAC,KAAK,EAAE,uCAAI,EAAE,EAAA,CAAC;QAC/C,MAAM,OAAO,GAAuB,KAAK,CAAC,KAAK,EAAE,CAAC;QAElD,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;YAC5C,MAAM,IAAI,KAAK,CAAC,qDAAqD,QAAQ,GAAG,CAAC,CAAC;SACnF;QAED,8FAA8F;QAC9F,IAAI,UAAU,GAAmC,SAAS,CAAC;QAC3D,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;YACtB,MAAM,MAAM,SAAW,KAAK,CAAC,KAAK,EAAE,uCAAI,EAAE,EAAA,CAAC;YAC3C,MAAM,QAAQ,SAAW,KAAK,CAAC,KAAK,EAAE,uCAAI,EAAE,EAAA,CAAC;YAC7C,UAAU,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;SAC/C;QAED,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC;IAC3D,CAAC;IAED;;;;OAIG;IACK,MAAM,CAAC,cAAc,CAAC,QAA4B;QACxD,MAAM,KAAK,GAAa,EAAE,CAAC;QAE3B,IAAI,QAAQ,CAAC,MAAM,EAAE;YACnB,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAChB,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;SAC7B;QAED,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAE1B,IAAI,QAAQ,CAAC,UAAU,EAAE;YACvB,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;SACjC;QAED,IAAI,QAAQ,CAAC,OAAO,EAAE;YACpB,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;SAC9B;QAED,IAAI,QAAQ,CAAC,UAAU,IAAI,QAAQ,CAAC,IAAI,KAAK,kBAAU,CAAC,OAAO,EAAE;YAC/D,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YACrC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;SACtC;QACD,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC7B,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AAtND,wBAsNC","sourcesContent":["import { canonicalizeVizPortalRoutingHashes } from './EmbeddingUrlBuilder';\n\n/**\n * Enumerates the different modes that are represented with a URL relating to a Tableau\n * visualization.\n *\n * The names of these modes are important! They are used in the URL to indicate the mode (called\n * module in VizPortal) and are part of the VizPortal and VizClient routing schemes.\n */\nexport const VizUrlMode = {\n  Viewing: 'views',\n  Authoring: 'authoring',\n} as const;\nexport type VizUrlMode = typeof VizUrlMode[keyof typeof VizUrlMode];\n\n/**\n * Represents a URL that contains a mode of operation (viewing, authoring, etc.), along with a\n * specific workbook/sheet. Site names are also tracked. Query parameters are preserved, but this\n * class is ignorant of any semantic meaning assigned to them.\n *\n * This class is designed to be immutable. You can use the various `withX` methods to change state\n * on a cloned version.\n *\n * @example <caption>How to create an instance</caption>\n * const vizUrl = VizUrl.create('http://www.example.com/t/site/views/workbook/sheet');\n *\n * @example <caption>How to clone an instance</caption>\n * const cloned = VizUrl.create(vizUrl);\n *\n * @example <caption>How to change values</caption>\n * const vizUrl = VizUrl.create('http://www.example.com/t/site/views/workbook/sheet')\n *   .withMode(VizUrlMode.Authoring)\n *   .withWorkbookId('newWorkbook')\n *   .withSheetId('newSheet');\n * expect(vizUrl.toString()).toBe('http://www.example.com/t/site/authoring/newWorkbook/newSheet');\n *\n * TODO: TFSID 1351171: Move this out into its own module and use it in VizClient.\n */\nexport class VizUrl {\n  private readonly _url: URL;\n  private readonly _segments: VizUrlPathSegments;\n\n  public get mode(): VizUrlMode {\n    return this._segments.mode;\n  }\n\n  public get siteId(): string | undefined {\n    return this._segments.siteId;\n  }\n\n  public get workbookId(): string | undefined {\n    return this._segments.workbookId;\n  }\n\n  public get sheetId(): string | undefined {\n    return this._segments.sheetId;\n  }\n\n  public get customView(): CustomViewPathPart | undefined {\n    return this._segments.customView;\n  }\n\n  private constructor(originalUrl: URL, segments: VizUrlPathSegments) {\n    this._url = originalUrl;\n    this._segments = segments;\n  }\n\n  /**\n   * Constructs a new URL representing a particular workbook/sheet in a particular mode (viewing,\n   * authoring, etc.).\n   * @param url An existing URL or href to parse.\n   */\n  public static create(url: URL | VizUrl | string): VizUrl {\n    const clonedUrl: URL = canonicalizeVizPortalRoutingHashes(new URL(url.toString()));\n    const segments: VizUrlPathSegments = VizUrl._parsePathName(clonedUrl.pathname);\n\n    clonedUrl.pathname = VizUrl._buildPathName(segments);\n    return new VizUrl(clonedUrl, segments);\n  }\n\n  public toURL(): URL {\n    return new URL(this.toString());\n  }\n\n  public toString(): string {\n    return this._url.toString();\n  }\n\n  /**\n   * This returns a {@link VizUrl} in the requested mode, if the mode is valid.\n   * @param desiredMode The desired {@link VizUrlMode} for a viz.\n   * @returns A {@link VizUrl} in the desired mode; throws if the requested mode change is invalid.\n   */\n  public withMode(desiredMode: VizUrlMode): VizUrl {\n    // no need to do anything if the mode isn't changing\n    if (this._segments.mode === desiredMode) {\n      return this;\n    }\n\n    const modeSegments = this._getSegmentsForMode(desiredMode);\n    return this._makeVizUrlFromPathSegments(modeSegments);\n  }\n\n  /**\n   * This returns a {@link VizUrl} with the requested custom view.\n   * @param customView The desired {@link CustomViewPathPart} for a viz.\n   * @returns A {@link VizUrl} with the requested view parameters, or no-op if the URL is a non-viewing URL.\n   */\n  public withCustomView(customView: CustomViewPathPart): VizUrl {\n    if (customView.luid === this.customView?.luid && customView.name === this.customView.name) {\n      return this;\n    }\n\n    const modeSegments = this._getSegmentsForMode(this.mode);\n    modeSegments.customView = customView;\n    return this._makeVizUrlFromPathSegments(modeSegments);\n  }\n\n  /**\n   * This returns a {@link VizUrl} with the requested sheet ID.\n   * @param sheetId The desired {@link sheetId} for a viz.\n   * @returns A {@link VizUrl} with the desired sheet ID, or no-op if the URL is already for the desired sheet.\n   */\n  public withSheetId(sheetId: string): VizUrl {\n    if (this.sheetId === sheetId) {\n      return this;\n    }\n\n    const modeSegments = { ...this._segments, sheetId: sheetId };\n    return this._makeVizUrlFromPathSegments(modeSegments);\n  }\n\n  /**\n   * This returns a {@link VizUrl} with the requested workbook ID.\n   * @param workbookId The desired {@link workbookId} for a viz.\n   * @returns A {@link VizUrl} with the desired workbook ID, or no-op if the URL is already for the desired workbook.\n   */\n  public withWorkbookId(workbookId: string): VizUrl {\n    if (this.workbookId === workbookId) {\n      return this;\n    }\n\n    const modeSegments = { ...this._segments, workbookId: workbookId };\n    return this._makeVizUrlFromPathSegments(modeSegments);\n  }\n\n  private _getSegmentsForMode(desiredMode: VizUrlMode): VizUrlPathSegments {\n    if (desiredMode === VizUrlMode.Authoring) {\n      this._segments.customView = undefined;\n    }\n\n    return { ...this._segments, mode: desiredMode };\n  }\n\n  private _makeVizUrlFromPathSegments(modeSegments: VizUrlPathSegments): VizUrl {\n    const modePathName = VizUrl._buildPathName(modeSegments);\n    const modeUrl = new URL(this._url.toString());\n    modeUrl.pathname = modePathName;\n\n    return new VizUrl(modeUrl, modeSegments);\n  }\n\n  /**\n   * Parses the input url and returns all the parts in its pathname.\n   */\n  private static _parsePathName(pathName: string): VizUrlPathSegments {\n    // Split up the constituent parts of the path.\n    // For example, 'https://devplat.tableautest.com/t/site/authoring/Workbook/Sheet'\n    //   parts = ['t', 'site', 'authoring', 'Workbook', 'Sheet']\n    const parts: string[] = pathName.split('/').filter((x) => x);\n    if (parts.length === 0) {\n      throw new Error('Invalid path name');\n    }\n\n    let siteId: string | undefined;\n\n    // check if the site root is in the t/siteName form\n    if (parts[0] === 't') {\n      if (parts.length < 2) {\n        throw new Error(`Invalid site in path '${pathName}'`);\n      }\n\n      siteId = parts[1];\n      parts.splice(0, 2);\n    }\n\n    // Extract the mode.\n    //   parts = ['authoring', 'Workbook', 'Sheet']\n    const modePathPart: string | undefined = parts.shift();\n    if (!modePathPart) {\n      throw new Error(`Missing mode in path '${pathName}'`);\n    }\n\n    const mode: VizUrlMode = modePathPart as VizUrlMode;\n    if (!Object.values(VizUrlMode).includes(mode)) {\n      throw new Error(`Invalid Viz Url Mode '${modePathPart}' in path '${pathName}'`);\n    }\n\n    // Extract the workbook and sheet\n    //   parts = ['Workbook', 'Sheet']\n    if (parts.length === 0) {\n      throw new Error(`Missing workbook/sheet name in path '${pathName}'`);\n    }\n\n    const workbookId: string = parts.shift() ?? '';\n    const sheetId: string | undefined = parts.shift();\n\n    if (parts.length !== 0 && parts.length !== 2) {\n      throw new Error(`Invalid path name: unknown parts after sheet id: '${pathName}'`);\n    }\n\n    // Handle the possibility that the URL has a 2 part custom view consisting of an ID and a name\n    let customView: CustomViewPathPart | undefined = undefined;\n    if (parts.length === 2) {\n      const viewId: string = parts.shift() ?? '';\n      const viewName: string = parts.shift() ?? '';\n      customView = { luid: viewId, name: viewName };\n    }\n\n    return { mode, siteId, workbookId, sheetId, customView };\n  }\n\n  /**\n   * Builds the pathname of a URL from its parts.\n   * @param segments Parts of a URL pathname.\n   * @returns A string that represents a URL pathname.\n   */\n  private static _buildPathName(segments: VizUrlPathSegments): string {\n    const parts: string[] = [];\n\n    if (segments.siteId) {\n      parts.push('t');\n      parts.push(segments.siteId);\n    }\n\n    parts.push(segments.mode);\n\n    if (segments.workbookId) {\n      parts.push(segments.workbookId);\n    }\n\n    if (segments.sheetId) {\n      parts.push(segments.sheetId);\n    }\n\n    if (segments.customView && segments.mode === VizUrlMode.Viewing) {\n      parts.push(segments.customView.luid);\n      parts.push(segments.customView.name);\n    }\n    const path = parts.join('/');\n    return path;\n  }\n}\n\n/**\n * This interface contains the two URL components of a custom view: a locally unique identifier (LUID), and a human readable name.\n * CustomViewPathParts can only be used to modify URLs in viewing mode.\n *\n * @example <caption>How to add a custom view path to a URL</caption>\n * const vizUrl = VizUrl.create('https://tableau.com/views/workbook/sheet');\n * const customViewPathPart: CustomViewPathPart = new CustomViewPathPart('viewLuid', 'viewName');\n * expect(vizUrl.withCustomView(customViewPathPart)).toEqual(\n *   VizUrl.create('https://tableau.com/views/workbook/sheet/viewLuid/viewName'));\n *\n */\nexport interface CustomViewPathPart {\n  readonly luid: string;\n  readonly name: string;\n}\n\n/**\n * Represents a parsed {@link URL.pathname} corresponding to parts of a Tableau Viz.\n */\ninterface VizUrlPathSegments {\n  readonly mode: VizUrlMode;\n  readonly siteId?: string;\n  readonly workbookId?: string;\n  readonly sheetId?: string;\n  customView?: CustomViewPathPart;\n}\n"]}