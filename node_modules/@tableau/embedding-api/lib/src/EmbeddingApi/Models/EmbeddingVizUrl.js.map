{"version":3,"file":"EmbeddingVizUrl.js","sourceRoot":"","sources":["../../../../src/EmbeddingApi/Models/EmbeddingVizUrl.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  CustomParameter,\n  EmbeddingErrorCodes,\n  FilterParameters,\n  Toolbar,\n  VizAuthoringSettings,\n  VizParameter,\n  VizSettings,\n} from '@tableau/api-external-contract-js';\nimport { INTERNAL_CONTRACT_VERSION, VizOptionNames } from '@tableau/api-internal-contract-js';\nimport { ApiVersion, TableauError } from '@tableau/api-shared-js';\nimport { EmbeddingUrlBuilder, ParametersMap, SANITIZED_VALUES, validateUrl } from './EmbeddingUrlBuilder';\nimport { VizUrl, VizUrlMode } from './VizUrl';\n\nexport enum EmbeddingUrlMode {\n  Viewing,\n  Authoring,\n}\n\nconst embeddingUrlModeToVizUrlMode = new Map<EmbeddingUrlMode, VizUrlMode>([\n  [EmbeddingUrlMode.Viewing, VizUrlMode.Viewing],\n  [EmbeddingUrlMode.Authoring, VizUrlMode.Authoring],\n]);\n\nexport class EmbeddingVizUrlBuilder extends EmbeddingUrlBuilder {\n  public constructor(_url: URL) {\n    super();\n    this._url = _url;\n    this._optionNames = VizOptionNames;\n  }\n\n  public appendFilters(filters: FilterParameters[]): EmbeddingVizUrlBuilder {\n    for (const filter of filters) {\n      this._url.searchParams.append(filter.field, filter.value);\n    }\n\n    return this;\n  }\n\n  public appendParams(params: VizParameter[]): EmbeddingVizUrlBuilder {\n    for (const param of params) {\n      this._url.searchParams.append(param.name, param.value);\n    }\n\n    return this;\n  }\n\n  /**\n   * Sanitizes parameter values before they are added to the search params.\n   * @param parameterName The name of the parameter. Some parameters require special handling.\n   * @param value The raw value of the parameter.\n   */\n  protected sanitizeParameterValue(parameterName: string, value: unknown): string {\n    // Some parameters need their values to be flipped (false in the property is a yes to server)\n    let sanitizedValue: string;\n\n    switch (parameterName) {\n      case VizOptionNames.hideTabs:\n        // ! here to reverse the value hideTabs = true -> tabs:n\n        sanitizedValue = this.sanitizeValue(!value);\n        break;\n\n      case VizOptionNames.toolbar:\n        sanitizedValue = this.sanitizeValue(value === Toolbar.Hidden ? false : value);\n        break;\n\n      default:\n        sanitizedValue = this.sanitizeValue(value);\n        break;\n    }\n\n    return sanitizedValue;\n  }\n}\n\n/**\n * This function should be the only one in api-embedding to contain any knowledge of how to\n * construct a url for vizql including what parameters can be sent and what values they can have or\n * will default to.\n *\n * NOTE-jrockwood-2021-12-02: There is also a {@link VizUrl} class and it might be confusing on the\n * difference between the two.\n *\n * VizUrl - used to parse and construct valid URLs that point to a viz in a particular mode (viewing\n * vs. authoring). It ensures that query parameters are correctly encoded, but it is ignorant of any\n * semantic meaning assigned to query (search) parameters. The plan is to move this into it's own\n * module that will be used in this code and in the VizClient core code.\n *\n * EmbeddingUrl - this class knows how to assemble query parameters specific to the embedding use\n * cases. It uses VizUrl as part of its implementation to ensure that the mode (viewing vs.\n * authoring) is correct.\n */\nexport function createVizUrl(\n  src: string | null,\n  mode: EmbeddingUrlMode,\n  vizOptions: VizSettings | VizAuthoringSettings,\n  embeddingId: number,\n  filters: FilterParameters[],\n  params: VizParameter[],\n  customParams: CustomParameter[],\n): URL {\n  if (!src) {\n    throw new TableauError(EmbeddingErrorCodes.InternalError, 'We should not have attempted to render the component without a src');\n  }\n  // ensure the URL is in the right mode (authoring/viewing)\n  const urlMode = embeddingUrlModeToVizUrlMode.get(mode);\n  if (!urlMode) {\n    throw new TableauError(EmbeddingErrorCodes.InternalError, `'${mode}' is not yet supported.`);\n  }\n\n  // strip params in URL, all custom params should come through 'vizOptions', 'filters' or 'customParams'.\n  const srcWithoutQueryParams = src.split('?')[0];\n\n  let url: URL;\n  try {\n    url = new URL(srcWithoutQueryParams);\n    validateUrl(url);\n  } catch (error) {\n    throw new TableauError(EmbeddingErrorCodes.InvalidUrl, (error as Error).message);\n  }\n\n  try {\n    url = VizUrl.create(srcWithoutQueryParams).withMode(urlMode).toURL();\n  } catch (error) {\n    // Syntactically valid URLs will be accepted even if they do not meet the requirements of a VizUrl.\n  }\n\n  const defaultParams = createDefaultParameters(url, embeddingId);\n\n  const builder = new EmbeddingVizUrlBuilder(url)\n    .appendDefaultParameters(defaultParams)\n    .appendUserOptions(vizOptions)\n    .appendFilters(filters)\n    .appendParams(params)\n    .appendCustomParams(customParams);\n\n  // If api auth is enabled, we don't need to redirect to the auth endpoint as part of loading the Viz.\n  if (vizOptions.iframeAuth) {\n    builder.setToken(vizOptions.token);\n  }\n\n  return builder.build();\n}\n\nfunction createDefaultParameters(url: URL, embeddingId: number): ParametersMap {\n  const defaultParameters: ParametersMap = new Map();\n  defaultParameters.set(VizOptionNames.Embed, SANITIZED_VALUES.YES_VALUE);\n\n  // This is used to tell the viz that it is embedded and who to talk to. Ideally\n  // we will use a MessageChannel after the initial load so we don't need to dispatch\n  defaultParameters.set(VizOptionNames.ApiID, `embhost${embeddingId}`);\n\n  // TFS 1287448: Fix this Public hack\n  if (url.hostname === 'public.tableau.com') {\n    defaultParameters.set(VizOptionNames.ShowVizHome, SANITIZED_VALUES.NO_VALUE);\n  }\n\n  const internalVersion = `${INTERNAL_CONTRACT_VERSION.major}.${INTERNAL_CONTRACT_VERSION.minor}.${INTERNAL_CONTRACT_VERSION.fix}`;\n  defaultParameters.set(VizOptionNames.ApiInternalVersion, internalVersion);\n\n  const externalVersion = ApiVersion.Instance.formattedValue; // maj.min.fix (no build)\n  defaultParameters.set(VizOptionNames.ApiExternalVersion, externalVersion);\n\n  // TODO: investigate nav values and make an enum showing acceptable values\n  // used to manage sessions server-side\n  defaultParameters.set(VizOptionNames.NavType, '0');\n  defaultParameters.set(VizOptionNames.NavSrc, 'Opt');\n\n  return defaultParameters;\n}\n"]}