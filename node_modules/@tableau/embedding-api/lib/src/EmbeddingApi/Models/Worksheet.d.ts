import * as Contract from '@tableau/api-external-contract-js';
import { WorksheetImpl } from '@tableau/api-shared-js';
import { EmbeddingWorkbookImpl } from '../Impl/EmbeddingWorkbookImpl';
import { Sheet } from './Sheet';
export declare class Worksheet extends Sheet implements Contract.EmbeddingWorksheet {
    private _worksheetImpl;
    constructor(_worksheetImpl: WorksheetImpl, _workbookImpl: EmbeddingWorkbookImpl);
    get parentDashboard(): Contract.EmbeddingDashboard | null;
    get parentStoryPoint(): Contract.StoryPoint | null;
    getDataSourcesAsync(): Promise<Array<Contract.DataSource>>;
    getSummaryDataAsync(options: Contract.GetSummaryDataOptions): Promise<Contract.DataTable>;
    getSummaryDataReaderAsync(pageRowCount: number, options: Contract.GetSummaryDataOptions): Promise<Contract.DataTableReader>;
    getSummaryColumnsInfoAsync(): Promise<Array<Contract.Column>>;
    getUnderlyingDataAsync(options: Contract.GetUnderlyingDataOptions): Promise<Contract.DataTable>;
    getUnderlyingTablesAsync(): Promise<Array<Contract.LogicalTable>>;
    getUnderlyingTableDataAsync(logicalTableId: string, options: Contract.GetUnderlyingDataOptions): Promise<Contract.DataTable>;
    getUnderlyingTableDataReaderAsync(logicalTableId: string, pageRowCount: number, options: Contract.GetUnderlyingDataOptions): Promise<Contract.DataTableReader>;
    getFiltersAsync(): Promise<Array<Contract.Filter>>;
    applyFilterAsync(fieldName: string, values: Array<string>, updateType: Contract.FilterUpdateType, options: Contract.FilterOptions): Promise<string>;
    applyRangeFilterAsync(fieldName: string, filterOptions: Contract.RangeFilterOptions): Promise<string>;
    clearFilterAsync(fieldName: string): Promise<string>;
    applyRelativeDateFilterAsync(fieldName: string, options: Contract.RelativeDateFilterOptions): Promise<string>;
    applyHierarchicalFilterAsync(fieldName: string, values: Array<string>, updateType: Contract.FilterUpdateType, options: Contract.FilterOptions): Promise<string>;
    clearSelectedMarksAsync(): Promise<void>;
    getSelectedMarksAsync(): Promise<Contract.MarksCollection>;
    annotateMarkAsync(mark: Contract.MarkInfo, annotationText: string): Promise<void>;
    getAnnotationsAsync(): Promise<Array<Contract.Annotation>>;
    removeAnnotationAsync(annotation: Contract.Annotation): Promise<void>;
    selectMarksByValueAsync(selections: Array<Contract.SelectionCriteria>, selectionUpdateType: Contract.SelectionUpdateType): Promise<void>;
    appendContextMenuAsync(targetMenu: Contract.ApiMenuType, config: Contract.ContextMenuOptions): Promise<string>;
    removeContextMenuAsync(targetMenu: Contract.ApiMenuType, menuItemId: string): Promise<void>;
    executeContextMenuAsync(targetMenu: Contract.ApiMenuType, menuItemId: string): Promise<void>;
    renameContextMenuAsync(targetMenu: Contract.ApiMenuType, menuHeader: string, menuDescription: string): Promise<void>;
    getVisualSpecificationAsync(): Promise<Contract.VisualSpecification>;
    addMarksCardFieldsAsync(marksCardIndex: number, encodingType: Contract.EncodingType, columns: Array<Contract.Column>, startIndex: number): Promise<void>;
    moveMarksCardFieldAsync(marksCardIndex: number, fromIndex: number, toIndex: number, fieldCount: number): Promise<void>;
    spliceMarksCardFieldsAsync(marksCardIndex: number, encodingType: Contract.EncodingType, startIndex: number, deleteCount: number, columns: Array<Contract.Column>): Promise<void>;
}
//# sourceMappingURL=Worksheet.d.ts.map