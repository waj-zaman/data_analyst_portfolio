"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Dashboard_1 = require("./Dashboard");
const Sheet_1 = require("./Sheet");
const StoryPoint_1 = require("./StoryPoint");
class Worksheet extends Sheet_1.Sheet {
    constructor(_worksheetImpl, _workbookImpl) {
        super(_worksheetImpl, _workbookImpl);
        this._worksheetImpl = _worksheetImpl;
    }
    get parentDashboard() {
        if (this._worksheetImpl.parentDashboard == null) {
            // Worksheet doesn't belong to a dashboard. Return null.
            return null;
        }
        return new Dashboard_1.Dashboard(this._worksheetImpl.parentDashboard, this._workbookImpl);
    }
    get parentStoryPoint() {
        if (this._worksheetImpl.parentStoryPoint == null) {
            // Worksheet doesn't belong to a story point. Return null.
            return null;
        }
        return new StoryPoint_1.StoryPoint(this._worksheetImpl.parentStoryPoint, this._workbookImpl);
    }
    getDataSourcesAsync() {
        return this._worksheetImpl.getDataSourcesAsync();
    }
    getSummaryDataAsync(options) {
        return this._worksheetImpl.getSummaryDataAsync(options);
    }
    getSummaryDataReaderAsync(pageRowCount, options) {
        return this._worksheetImpl.getSummaryDataReaderAsync(pageRowCount, options);
    }
    getSummaryColumnsInfoAsync() {
        return this._worksheetImpl.getSummaryColumnsInfoAsync();
    }
    getUnderlyingDataAsync(options) {
        console.warn('Worksheet.getUnderlyingDataAsync is deprecated. Please use ' +
            'Worksheet.getUnderlyingTablesAsync and Worksheet.getUnderlyingTableDataAsync');
        return this._worksheetImpl.getUnderlyingDataAsync(options);
    }
    getUnderlyingTablesAsync() {
        return this._worksheetImpl.getUnderlyingTablesAsync();
    }
    getUnderlyingTableDataAsync(logicalTableId, options) {
        return this._worksheetImpl.getUnderlyingTableDataAsync(logicalTableId, options);
    }
    getUnderlyingTableDataReaderAsync(logicalTableId, pageRowCount, options) {
        return this._worksheetImpl.getUnderlyingTableDataReaderAsync(logicalTableId, pageRowCount, options);
    }
    getFiltersAsync() {
        return this._worksheetImpl.getFiltersAsync();
    }
    applyFilterAsync(fieldName, values, updateType, options) {
        return this._worksheetImpl.applyFilterAsync(fieldName, values, updateType, options);
    }
    applyRangeFilterAsync(fieldName, filterOptions) {
        return this._worksheetImpl.applyRangeFilterAsync(fieldName, filterOptions);
    }
    clearFilterAsync(fieldName) {
        return this._worksheetImpl.clearFilterAsync(fieldName);
    }
    applyRelativeDateFilterAsync(fieldName, options) {
        return this._worksheetImpl.applyRelativeDateFilterAsync(fieldName, options);
    }
    applyHierarchicalFilterAsync(fieldName, values, updateType, options) {
        return this._worksheetImpl.applyHierarchicalFilterAsync(fieldName, values, updateType, options);
    }
    clearSelectedMarksAsync() {
        return this._worksheetImpl.clearSelectedMarksAsync();
    }
    getSelectedMarksAsync() {
        return this._worksheetImpl.getSelectedMarksAsync();
    }
    annotateMarkAsync(mark, annotationText) {
        return this._worksheetImpl.annotateMarkAsync(mark, annotationText);
    }
    getAnnotationsAsync() {
        return this._worksheetImpl.getAnnotationsAsync();
    }
    removeAnnotationAsync(annotation) {
        return this._worksheetImpl.removeAnnotationAsync(annotation);
    }
    selectMarksByValueAsync(selections, selectionUpdateType) {
        return this._worksheetImpl.selectMarksByValueAsync(selections, selectionUpdateType);
    }
    appendContextMenuAsync(targetMenu, config) {
        return this._worksheetImpl.appendContextMenuAsync(targetMenu, config);
    }
    removeContextMenuAsync(targetMenu, menuItemId) {
        return this._worksheetImpl.removeContextMenuAsync(targetMenu, menuItemId);
    }
    executeContextMenuAsync(targetMenu, menuItemId) {
        return this._worksheetImpl.executeContextMenuAsync(targetMenu, menuItemId);
    }
    renameContextMenuAsync(targetMenu, menuHeader, menuDescription) {
        return this._worksheetImpl.renameContextMenuAsync(targetMenu, menuHeader, menuDescription);
    }
    getVisualSpecificationAsync() {
        return this._worksheetImpl.getVisualSpecificationAsync();
    }
    addMarksCardFieldsAsync(marksCardIndex, encodingType, columns, startIndex) {
        return this._worksheetImpl.addMarksCardFieldsAsync(marksCardIndex, encodingType, columns, startIndex);
    }
    moveMarksCardFieldAsync(marksCardIndex, fromIndex, toIndex, fieldCount) {
        return this._worksheetImpl.moveMarksCardFieldAsync(marksCardIndex, fromIndex, toIndex, fieldCount);
    }
    spliceMarksCardFieldsAsync(marksCardIndex, encodingType, startIndex, deleteCount, columns) {
        return this._worksheetImpl.spliceMarksCardFieldsAsync(marksCardIndex, encodingType, startIndex, deleteCount, columns);
    }
}
exports.Worksheet = Worksheet;
//# sourceMappingURL=Worksheet.js.map