/**
 * Enumerates the different modes that are represented with a URL relating to a Tableau
 * visualization.
 *
 * The names of these modes are important! They are used in the URL to indicate the mode (called
 * module in VizPortal) and are part of the VizPortal and VizClient routing schemes.
 */
export declare const VizUrlMode: {
    readonly Viewing: "views";
    readonly Authoring: "authoring";
};
export declare type VizUrlMode = typeof VizUrlMode[keyof typeof VizUrlMode];
/**
 * Represents a URL that contains a mode of operation (viewing, authoring, etc.), along with a
 * specific workbook/sheet. Site names are also tracked. Query parameters are preserved, but this
 * class is ignorant of any semantic meaning assigned to them.
 *
 * This class is designed to be immutable. You can use the various `withX` methods to change state
 * on a cloned version.
 *
 * @example <caption>How to create an instance</caption>
 * const vizUrl = VizUrl.create('http://www.example.com/t/site/views/workbook/sheet');
 *
 * @example <caption>How to clone an instance</caption>
 * const cloned = VizUrl.create(vizUrl);
 *
 * @example <caption>How to change values</caption>
 * const vizUrl = VizUrl.create('http://www.example.com/t/site/views/workbook/sheet')
 *   .withMode(VizUrlMode.Authoring)
 *   .withWorkbookId('newWorkbook')
 *   .withSheetId('newSheet');
 * expect(vizUrl.toString()).toBe('http://www.example.com/t/site/authoring/newWorkbook/newSheet');
 *
 * TODO: TFSID 1351171: Move this out into its own module and use it in VizClient.
 */
export declare class VizUrl {
    private readonly _url;
    private readonly _segments;
    get mode(): VizUrlMode;
    get siteId(): string | undefined;
    get workbookId(): string | undefined;
    get sheetId(): string | undefined;
    get customView(): CustomViewPathPart | undefined;
    private constructor();
    /**
     * Constructs a new URL representing a particular workbook/sheet in a particular mode (viewing,
     * authoring, etc.).
     * @param url An existing URL or href to parse.
     */
    static create(url: URL | VizUrl | string): VizUrl;
    toURL(): URL;
    toString(): string;
    /**
     * This returns a {@link VizUrl} in the requested mode, if the mode is valid.
     * @param desiredMode The desired {@link VizUrlMode} for a viz.
     * @returns A {@link VizUrl} in the desired mode; throws if the requested mode change is invalid.
     */
    withMode(desiredMode: VizUrlMode): VizUrl;
    /**
     * This returns a {@link VizUrl} with the requested custom view.
     * @param customView The desired {@link CustomViewPathPart} for a viz.
     * @returns A {@link VizUrl} with the requested view parameters, or no-op if the URL is a non-viewing URL.
     */
    withCustomView(customView: CustomViewPathPart): VizUrl;
    /**
     * This returns a {@link VizUrl} with the requested sheet ID.
     * @param sheetId The desired {@link sheetId} for a viz.
     * @returns A {@link VizUrl} with the desired sheet ID, or no-op if the URL is already for the desired sheet.
     */
    withSheetId(sheetId: string): VizUrl;
    /**
     * This returns a {@link VizUrl} with the requested workbook ID.
     * @param workbookId The desired {@link workbookId} for a viz.
     * @returns A {@link VizUrl} with the desired workbook ID, or no-op if the URL is already for the desired workbook.
     */
    withWorkbookId(workbookId: string): VizUrl;
    private _getSegmentsForMode;
    private _makeVizUrlFromPathSegments;
    /**
     * Parses the input url and returns all the parts in its pathname.
     */
    private static _parsePathName;
    /**
     * Builds the pathname of a URL from its parts.
     * @param segments Parts of a URL pathname.
     * @returns A string that represents a URL pathname.
     */
    private static _buildPathName;
}
/**
 * This interface contains the two URL components of a custom view: a locally unique identifier (LUID), and a human readable name.
 * CustomViewPathParts can only be used to modify URLs in viewing mode.
 *
 * @example <caption>How to add a custom view path to a URL</caption>
 * const vizUrl = VizUrl.create('https://tableau.com/views/workbook/sheet');
 * const customViewPathPart: CustomViewPathPart = new CustomViewPathPart('viewLuid', 'viewName');
 * expect(vizUrl.withCustomView(customViewPathPart)).toEqual(
 *   VizUrl.create('https://tableau.com/views/workbook/sheet/viewLuid/viewName'));
 *
 */
export interface CustomViewPathPart {
    readonly luid: string;
    readonly name: string;
}
//# sourceMappingURL=VizUrl.d.ts.map