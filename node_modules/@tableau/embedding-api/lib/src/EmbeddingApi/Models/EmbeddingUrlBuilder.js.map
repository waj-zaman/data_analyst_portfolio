{"version":3,"file":"EmbeddingUrlBuilder.js","sourceRoot":"","sources":["../../../../src/EmbeddingApi/Models/EmbeddingUrlBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["import { AskDataSettings, CustomParameter, PulseSettings, VizAuthoringSettings, VizSettings } from '@tableau/api-external-contract-js';\nimport { AskDataOptionNames, PulseOptionNames, VizOptionNames } from '@tableau/api-internal-contract-js';\nexport type ParametersMap = Map<VizOptionNames | AskDataOptionNames | PulseOptionNames, string>;\n\nexport const SANITIZED_VALUES = {\n  YES_VALUE: 'y',\n  NO_VALUE: 'n',\n} as const;\n\nconst supportedProtocols = new Set<string>(['https:', 'http:']);\n\nexport abstract class EmbeddingUrlBuilder {\n  private _token?: string;\n  protected _url: URL;\n  protected _optionNames: typeof VizOptionNames | typeof AskDataOptionNames | typeof PulseOptionNames;\n  protected abstract sanitizeParameterValue(parameterName: string, value: unknown): string;\n\n  public build(): URL {\n    return this._url;\n  }\n\n  /**\n   * Appends the non-empty parameters to the URL, preserving parameters that already exist.\n   * @param defaultParameters The map of key/value pairs to append to the search params.\n   * @returns This object, so you can chain calls.\n   */\n  public appendDefaultParameters(defaultParameters: ParametersMap): this {\n    for (const key of defaultParameters.keys()) {\n      const value: string | undefined = defaultParameters.get(key);\n\n      // don't overwrite any values already written, and don't add empty default values\n      if (value && !this._url.searchParams.has(key)) {\n        this._url.searchParams.append(key, value);\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Appends the user-supplied options to the search params. Only known options will be passed\n   * through. All unknown options are ignored.\n   * @param options The options to set on the search params.\n   * @returns This object, so you can chain calls.\n   */\n  public appendUserOptions(options: AskDataSettings | VizSettings | VizAuthoringSettings | PulseSettings): this {\n    for (const key of Object.keys(options)) {\n      // ignore null/unset values\n      if (options[key] === null || options[key] === undefined) {\n        continue;\n      }\n\n      const parameterName = this._optionNames[key];\n\n      // only accept known parameter names\n      if (!parameterName) {\n        continue;\n      }\n\n      const cleanedValue = this.sanitizeParameterValue(parameterName, options[key]);\n      this._url.searchParams.append(parameterName, cleanedValue);\n    }\n\n    return this;\n  }\n\n  public appendCustomParams(customParams: CustomParameter[]): this {\n    for (const customParam of customParams) {\n      this._url.searchParams.set(customParam.name, customParam.value);\n    }\n    return this;\n  }\n\n  public setToken(token?: string): this {\n    if (this._token) {\n      throw new Error(`The token has already been set to ${this._token}`);\n    }\n\n    if (!token) {\n      return this;\n    }\n\n    this._token = token;\n\n    // the target is everything after the origin\n    const target = this._url.toString().substring(this._url.origin.length);\n\n    // change the URL path to include the ticket entry point in vizportal\n    this._url = new URL(`${this._url.origin}/vizportal/api/web/v1/auth/embed/target`);\n    this._url.searchParams.append('token', token);\n    this._url.searchParams.append('target', target);\n\n    return this;\n  }\n\n  protected sanitizeValue(v: unknown) {\n    const valueAsString = String(v);\n    switch (valueAsString) {\n      case 'true':\n        return SANITIZED_VALUES.YES_VALUE;\n      case 'false':\n        return SANITIZED_VALUES.NO_VALUE;\n      default:\n        return valueAsString;\n    }\n  }\n}\n\nexport function validateUrl(url: URL): void {\n  validateProtocolInUrl(url);\n}\n\nfunction validateProtocolInUrl(url: URL): void {\n  const protocol = url.protocol;\n  if (!supportedProtocols.has(protocol)) {\n    throw new Error(`Invalid protocol in URL '${url}'. The protocols supported are ${Array.from(supportedProtocols).join(', ')}.`);\n  }\n}\n\nexport function getSiteIdForPulse(url: URL | string): string {\n  const pathname = canonicalizeVizPortalRoutingHashes(new URL(url.toString())).pathname;\n  const parts: string[] = pathname.split('/').filter((x) => x);\n  if (parts.length === 0) {\n    return '';\n  }\n  //e.g when url is: http://www.example.com/site/queryvdsintegration/pulse/metrics/123\n  if (parts[0] === 'site') {\n    return parts[1];\n  }\n  // e.g when url is: http://www.example.com/pulse/site/queryvdsintegration/metrics/123\n  if (parts[0] === 'pulse' && parts[1] === 'site') {\n    return parts[2];\n  }\n  return '';\n}\n\nexport function getSiteId(url: URL | string): string {\n  const pathname = canonicalizeVizPortalRoutingHashes(new URL(url.toString())).pathname;\n  const parts: string[] = pathname.split('/').filter((x) => x);\n  if (parts.length === 0) {\n    return '';\n  }\n\n  // check if the site root is in the t/siteName form\n  // If a siteName is not present in the path, return an empty string to represent the default site.\n  if (parts[0] !== 't') {\n    return '';\n  }\n\n  if (parts.length < 2) {\n    return '';\n  }\n\n  return parts[1];\n}\n\n/**\n * This canonicalizes any URL that contains '/#/site' or '/#/'.\n * Examples:\n * 'https://tableau.com/#/site/alpodev/views/Workbook/Sheet' would return 'https://tableau.com/t/alpodev/views/Workbook/Sheet';\n * 'https://tableau.com/#/views/Workbook/Sheet' would return 'https://tableau.com/views/Workbook/Sheet'.\n */\nexport function canonicalizeVizPortalRoutingHashes(url: URL): URL {\n  let urlStr = url.toString();\n  urlStr = urlStr.replace('/#/site/', '/t/').replace('/#/', '/');\n  return new URL(urlStr);\n}\n"]}