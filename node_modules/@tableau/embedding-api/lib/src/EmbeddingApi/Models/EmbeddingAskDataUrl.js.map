{"version":3,"file":"EmbeddingAskDataUrl.js","sourceRoot":"","sources":["../../../../src/EmbeddingApi/Models/EmbeddingAskDataUrl.ts"],"names":[],"mappings":";;AAAA,gFAA0G;AAC1G,gFAAkG;AAClG,0DAAkE;AAClE,+DAAwF;AAExF,SAAgB,gBAAgB,CAAC,GAAW,EAAE,OAAwB,EAAE,WAAmB,EAAE,YAA+B;IAC1H,4GAA4G;IAC5G,MAAM,qBAAqB,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAEhD,IAAI,GAAQ,CAAC;IACb,IAAI;QACF,GAAG,GAAG,IAAI,GAAG,CAAC,qBAAqB,CAAC,CAAC;QACrC,iCAAW,CAAC,GAAG,CAAC,CAAC;KAClB;IAAC,OAAO,KAAK,EAAE;QACd,MAAM,IAAI,4BAAY,CAAC,8CAAmB,CAAC,UAAU,EAAG,KAAe,CAAC,OAAO,CAAC,CAAC;KAClF;IACD,MAAM,aAAa,GAAG,8BAA8B,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;IACvE,MAAM,OAAO,GAAG,IAAI,0BAA0B,CAAC,GAAG,CAAC;SAChD,uBAAuB,CAAC,aAAa,CAAC;SACtC,iBAAiB,CAAC,OAAO,CAAC;SAC1B,kBAAkB,CAAC,YAAY,CAAC,CAAC;IAEpC,qGAAqG;IACrG,IAAI,OAAO,CAAC,UAAU,EAAE;QACtB,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;KACjC;IAED,OAAO,OAAO,CAAC,KAAK,EAAE,CAAC;AACzB,CAAC;AAvBD,4CAuBC;AAED,SAAS,8BAA8B,CAAC,GAAQ,EAAE,WAAmB;IACnE,MAAM,iBAAiB,GAAkB,IAAI,GAAG,EAAE,CAAC;IACnD,MAAM,eAAe,GAAG,GAAG,oDAAyB,CAAC,KAAK,IAAI,oDAAyB,CAAC,KAAK,IAAI,oDAAyB,CAAC,GAAG,EAAE,CAAC;IACjI,iBAAiB,CAAC,GAAG,CAAC,6CAAkB,CAAC,kBAAkB,EAAE,eAAe,CAAC,CAAC;IAE9E,MAAM,eAAe,GAAG,0BAAU,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,yBAAyB;IACrF,iBAAiB,CAAC,GAAG,CAAC,6CAAkB,CAAC,kBAAkB,EAAE,eAAe,CAAC,CAAC;IAC9E,iBAAiB,CAAC,GAAG,CAAC,6CAAkB,CAAC,KAAK,EAAE,UAAU,WAAW,EAAE,CAAC,CAAC;IACzE,iBAAiB,CAAC,GAAG,CAAC,6CAAkB,CAAC,mBAAmB,EAAE,MAAM,CAAC,CAAC;IAEtE,OAAO,iBAAiB,CAAC;AAC3B,CAAC;AAED,MAAa,0BAA2B,SAAQ,yCAAmB;IACjE,YAAmB,IAAS;QAC1B,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,YAAY,GAAG,6CAAkB,CAAC;IACzC,CAAC;IAED;;;;OAIG;IACO,sBAAsB,CAAC,aAAqB,EAAE,KAAc;QACpE,OAAO,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IACnC,CAAC;CACF;AAfD,gEAeC","sourcesContent":["import { AskDataSettings, CustomParameter, EmbeddingErrorCodes } from '@tableau/api-external-contract-js';\nimport { AskDataOptionNames, INTERNAL_CONTRACT_VERSION } from '@tableau/api-internal-contract-js';\nimport { ApiVersion, TableauError } from '@tableau/api-shared-js';\nimport { EmbeddingUrlBuilder, ParametersMap, validateUrl } from './EmbeddingUrlBuilder';\n\nexport function createAskDataUrl(src: string, options: AskDataSettings, embeddingId: number, customParams: CustomParameter[]) {\n  // strip params in URL, all custom params should come through 'askDataOptions', 'filters' or 'customParams'.\n  const srcWithoutQueryParams = src.split('?')[0];\n\n  let url: URL;\n  try {\n    url = new URL(srcWithoutQueryParams);\n    validateUrl(url);\n  } catch (error) {\n    throw new TableauError(EmbeddingErrorCodes.InvalidUrl, (error as Error).message);\n  }\n  const defaultParams = createAskDataDefaultParameters(url, embeddingId);\n  const builder = new EmbeddingAskDataUrlBuilder(url)\n    .appendDefaultParameters(defaultParams)\n    .appendUserOptions(options)\n    .appendCustomParams(customParams);\n\n  // If api auth is enabled, we don't need to redirect to the auth endpoint as part of loading the Viz.\n  if (options.iframeAuth) {\n    builder.setToken(options.token);\n  }\n\n  return builder.build();\n}\n\nfunction createAskDataDefaultParameters(url: URL, embeddingId: number): ParametersMap {\n  const defaultParameters: ParametersMap = new Map();\n  const internalVersion = `${INTERNAL_CONTRACT_VERSION.major}.${INTERNAL_CONTRACT_VERSION.minor}.${INTERNAL_CONTRACT_VERSION.fix}`;\n  defaultParameters.set(AskDataOptionNames.ApiInternalVersion, internalVersion);\n\n  const externalVersion = ApiVersion.Instance.formattedValue; // maj.min.fix (no build)\n  defaultParameters.set(AskDataOptionNames.ApiExternalVersion, externalVersion);\n  defaultParameters.set(AskDataOptionNames.ApiID, `embhost${embeddingId}`);\n  defaultParameters.set(AskDataOptionNames.AskDataWebComponent, 'true');\n\n  return defaultParameters;\n}\n\nexport class EmbeddingAskDataUrlBuilder extends EmbeddingUrlBuilder {\n  public constructor(_url: URL) {\n    super();\n    this._url = _url;\n    this._optionNames = AskDataOptionNames;\n  }\n\n  /**\n   * Sanitizes parameter values before they are added to the search params.\n   * @param parameterName The name of the parameter. Some parameters require special handling.\n   * @param value The raw value of the parameter.\n   */\n  protected sanitizeParameterValue(parameterName: string, value: unknown): string {\n    return this.sanitizeValue(value);\n  }\n}\n"]}