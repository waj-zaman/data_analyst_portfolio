"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const api_external_contract_js_1 = require("@tableau/api-external-contract-js");
const api_internal_contract_js_1 = require("@tableau/api-internal-contract-js");
const api_shared_js_1 = require("@tableau/api-shared-js");
const EmbeddingUrlBuilder_1 = require("./EmbeddingUrlBuilder");
const VizUrl_1 = require("./VizUrl");
var EmbeddingUrlMode;
(function (EmbeddingUrlMode) {
    EmbeddingUrlMode[EmbeddingUrlMode["Viewing"] = 0] = "Viewing";
    EmbeddingUrlMode[EmbeddingUrlMode["Authoring"] = 1] = "Authoring";
})(EmbeddingUrlMode = exports.EmbeddingUrlMode || (exports.EmbeddingUrlMode = {}));
const embeddingUrlModeToVizUrlMode = new Map([
    [EmbeddingUrlMode.Viewing, VizUrl_1.VizUrlMode.Viewing],
    [EmbeddingUrlMode.Authoring, VizUrl_1.VizUrlMode.Authoring],
]);
class EmbeddingVizUrlBuilder extends EmbeddingUrlBuilder_1.EmbeddingUrlBuilder {
    constructor(_url) {
        super();
        this._url = _url;
        this._optionNames = api_internal_contract_js_1.VizOptionNames;
    }
    appendFilters(filters) {
        for (const filter of filters) {
            this._url.searchParams.append(filter.field, filter.value);
        }
        return this;
    }
    appendParams(params) {
        for (const param of params) {
            this._url.searchParams.append(param.name, param.value);
        }
        return this;
    }
    /**
     * Sanitizes parameter values before they are added to the search params.
     * @param parameterName The name of the parameter. Some parameters require special handling.
     * @param value The raw value of the parameter.
     */
    sanitizeParameterValue(parameterName, value) {
        // Some parameters need their values to be flipped (false in the property is a yes to server)
        let sanitizedValue;
        switch (parameterName) {
            case api_internal_contract_js_1.VizOptionNames.hideTabs:
                // ! here to reverse the value hideTabs = true -> tabs:n
                sanitizedValue = this.sanitizeValue(!value);
                break;
            case api_internal_contract_js_1.VizOptionNames.toolbar:
                sanitizedValue = this.sanitizeValue(value === api_external_contract_js_1.Toolbar.Hidden ? false : value);
                break;
            default:
                sanitizedValue = this.sanitizeValue(value);
                break;
        }
        return sanitizedValue;
    }
}
exports.EmbeddingVizUrlBuilder = EmbeddingVizUrlBuilder;
/**
 * This function should be the only one in api-embedding to contain any knowledge of how to
 * construct a url for vizql including what parameters can be sent and what values they can have or
 * will default to.
 *
 * NOTE-jrockwood-2021-12-02: There is also a {@link VizUrl} class and it might be confusing on the
 * difference between the two.
 *
 * VizUrl - used to parse and construct valid URLs that point to a viz in a particular mode (viewing
 * vs. authoring). It ensures that query parameters are correctly encoded, but it is ignorant of any
 * semantic meaning assigned to query (search) parameters. The plan is to move this into it's own
 * module that will be used in this code and in the VizClient core code.
 *
 * EmbeddingUrl - this class knows how to assemble query parameters specific to the embedding use
 * cases. It uses VizUrl as part of its implementation to ensure that the mode (viewing vs.
 * authoring) is correct.
 */
function createVizUrl(src, mode, vizOptions, embeddingId, filters, params, customParams) {
    if (!src) {
        throw new api_shared_js_1.TableauError(api_external_contract_js_1.EmbeddingErrorCodes.InternalError, 'We should not have attempted to render the component without a src');
    }
    // ensure the URL is in the right mode (authoring/viewing)
    const urlMode = embeddingUrlModeToVizUrlMode.get(mode);
    if (!urlMode) {
        throw new api_shared_js_1.TableauError(api_external_contract_js_1.EmbeddingErrorCodes.InternalError, `'${mode}' is not yet supported.`);
    }
    // strip params in URL, all custom params should come through 'vizOptions', 'filters' or 'customParams'.
    const srcWithoutQueryParams = src.split('?')[0];
    let url;
    try {
        url = new URL(srcWithoutQueryParams);
        EmbeddingUrlBuilder_1.validateUrl(url);
    }
    catch (error) {
        throw new api_shared_js_1.TableauError(api_external_contract_js_1.EmbeddingErrorCodes.InvalidUrl, error.message);
    }
    try {
        url = VizUrl_1.VizUrl.create(srcWithoutQueryParams).withMode(urlMode).toURL();
    }
    catch (error) {
        // Syntactically valid URLs will be accepted even if they do not meet the requirements of a VizUrl.
    }
    const defaultParams = createDefaultParameters(url, embeddingId);
    const builder = new EmbeddingVizUrlBuilder(url)
        .appendDefaultParameters(defaultParams)
        .appendUserOptions(vizOptions)
        .appendFilters(filters)
        .appendParams(params)
        .appendCustomParams(customParams);
    // If api auth is enabled, we don't need to redirect to the auth endpoint as part of loading the Viz.
    if (vizOptions.iframeAuth) {
        builder.setToken(vizOptions.token);
    }
    return builder.build();
}
exports.createVizUrl = createVizUrl;
function createDefaultParameters(url, embeddingId) {
    const defaultParameters = new Map();
    defaultParameters.set(api_internal_contract_js_1.VizOptionNames.Embed, EmbeddingUrlBuilder_1.SANITIZED_VALUES.YES_VALUE);
    // This is used to tell the viz that it is embedded and who to talk to. Ideally
    // we will use a MessageChannel after the initial load so we don't need to dispatch
    defaultParameters.set(api_internal_contract_js_1.VizOptionNames.ApiID, `embhost${embeddingId}`);
    // TFS 1287448: Fix this Public hack
    if (url.hostname === 'public.tableau.com') {
        defaultParameters.set(api_internal_contract_js_1.VizOptionNames.ShowVizHome, EmbeddingUrlBuilder_1.SANITIZED_VALUES.NO_VALUE);
    }
    const internalVersion = `${api_internal_contract_js_1.INTERNAL_CONTRACT_VERSION.major}.${api_internal_contract_js_1.INTERNAL_CONTRACT_VERSION.minor}.${api_internal_contract_js_1.INTERNAL_CONTRACT_VERSION.fix}`;
    defaultParameters.set(api_internal_contract_js_1.VizOptionNames.ApiInternalVersion, internalVersion);
    const externalVersion = api_shared_js_1.ApiVersion.Instance.formattedValue; // maj.min.fix (no build)
    defaultParameters.set(api_internal_contract_js_1.VizOptionNames.ApiExternalVersion, externalVersion);
    // TODO: investigate nav values and make an enum showing acceptable values
    // used to manage sessions server-side
    defaultParameters.set(api_internal_contract_js_1.VizOptionNames.NavType, '0');
    defaultParameters.set(api_internal_contract_js_1.VizOptionNames.NavSrc, 'Opt');
    return defaultParameters;
}
//# sourceMappingURL=EmbeddingVizUrl.js.map