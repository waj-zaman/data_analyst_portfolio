{"version":3,"file":"HtmlElementHelpers.js","sourceRoot":"","sources":["../../../../src/EmbeddingApi/Utils/HtmlElementHelpers.ts"],"names":[],"mappings":";;AAAA;;;;GAIG;AACH,MAAa,kBAAkB;;AAA/B,gDAyBC;AAxBC;;;;;;;;;GASG;AACI,iCAAc,GAAG,CAAC,OAAoB,EAAqC,EAAE;IAClF,MAAM,KAAK,GAAG,MAAM,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;IAC/C,MAAM,WAAW,GAAG,QAAQ,CAAC,KAAK,CAAC,WAAW,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC;IACzD,MAAM,UAAU,GAAG,QAAQ,CAAC,KAAK,CAAC,UAAU,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC;IACvD,MAAM,YAAY,GAAG,QAAQ,CAAC,KAAK,CAAC,YAAY,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC;IAC3D,MAAM,aAAa,GAAG,QAAQ,CAAC,KAAK,CAAC,aAAa,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC;IAE7D,uFAAuF;IACvF,qCAAqC;IACrC,MAAM,KAAK,GAAG,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,GAAG,YAAY,CAAC,CAAC;IAC3E,MAAM,MAAM,GAAG,OAAO,CAAC,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,aAAa,CAAC,CAAC;IAE7E,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC;AAC3B,CAAC,CAAC","sourcesContent":["/**\n * Helper methods for {@link HTMLElement}.\n *\n * @class HtmlElementHelpers\n */\nexport class HtmlElementHelpers {\n  /**\n   * Calculates the size of element's content area, which is the area that you'd expect a\n   * child element to occupy to fill the available space (the area after padding and borders\n   * are subtracted out). This is equivalent in behavior to jQuery's width() and height()\n   * functions. See {@link http://api.jquery.com/width/}.\n   *\n   * @static\n   * @param {HTMLElement} element\n   * @see workgroup\\vqlweb\\scriptsharp\\src\\ApiShared\\Internal\\Utility.cs\n   */\n  static getContentSize = (element: HTMLElement): { width: number; height: number } => {\n    const style = window.getComputedStyle(element);\n    const paddingLeft = parseInt(style.paddingLeft, 10) || 0;\n    const paddingTop = parseInt(style.paddingTop, 10) || 0;\n    const paddingRight = parseInt(style.paddingRight, 10) || 0;\n    const paddingBottom = parseInt(style.paddingBottom, 10) || 0;\n\n    // clientWidth/Height includes padding, but excludes margin and borders and scrollbars,\n    // but we also want padding excluded.\n    const width = element.clientWidth - Math.round(paddingLeft + paddingRight);\n    const height = element.clientHeight - Math.round(paddingTop + paddingBottom);\n\n    return { width, height };\n  };\n}\n"]}