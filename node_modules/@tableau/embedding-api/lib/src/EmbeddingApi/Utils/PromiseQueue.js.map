{"version":3,"file":"PromiseQueue.js","sourceRoot":"","sources":["../../../../src/EmbeddingApi/Utils/PromiseQueue.ts"],"names":[],"mappings":";;;;;;;;;;;AAEA;;;;;GAKG;AACH,MAAa,YAAY;IAKvB;;OAEG;IACH;QACE,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAChB,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;QACjB,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;IACvB,CAAC;IAED;;;;;;;OAOG;IACI,GAAG,CAAI,IAAuB;QACnC,MAAM,OAAO,GAAG,IAAI,OAAO,CAAI,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACjD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAS,EAAE;gBACzB,IAAI;oBACF,MAAM,MAAM,GAAG,MAAM,IAAI,EAAE,CAAC;oBAC5B,OAAO,CAAC,MAAM,CAAC,CAAC;iBACjB;gBAAC,OAAO,KAAK,EAAE;oBACd,MAAM,CAAC,KAAK,CAAC,CAAC;iBACf;wBAAS;oBACR,IAAI,CAAC,OAAO,EAAE,CAAC;oBACf,IAAI,CAAC,IAAI,EAAE,CAAC;iBACb;YACH,CAAC,CAAA,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QACH,OAAO,OAAO,CAAC;IACjB,CAAC;IAEM,IAAI;QACT,IAAI,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;YAC5D,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;YACpC,IAAI,CAAC,OAAO,EAAE,CAAC;YACf,QAAS,EAAE,CAAC;SACb;IACH,CAAC;IACM,IAAI;QACT,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;IAC3B,CAAC;CACF;AAjDD,oCAiDC","sourcesContent":["export type PromiseFactory<T> = () => PromiseLike<T>;\n\n/**\n * A custom promise queue that serializes execution of multiple promises.\n *\n * @export\n * @class PromiseQueue\n */\nexport class PromiseQueue {\n  private queue: (() => void)[];\n  private pending: number;\n  private concurrency: number;\n\n  /**\n   * Creates an instance of PromiseQueue.\n   */\n  constructor() {\n    this.queue = [];\n    this.pending = 0;\n    this.concurrency = 1;\n  }\n\n  /**\n   * Add a function that returns a promise to the queue.\n   *\n   * @template T\n   * @param {PromiseFactory<T>} func\n   * @return {*}  {Promise<T>}\n   * @memberof PromiseQueue\n   */\n  public add<T>(func: PromiseFactory<T>): Promise<T> {\n    const promise = new Promise<T>((resolve, reject) => {\n      this.queue.push(async () => {\n        try {\n          const result = await func();\n          resolve(result);\n        } catch (error) {\n          reject(error);\n        } finally {\n          this.pending--;\n          this.poll();\n        }\n      });\n    });\n    return promise;\n  }\n\n  public poll(): void {\n    if (this.pending < this.concurrency && this.queue.length > 0) {\n      const queueJob = this.queue.shift();\n      this.pending++;\n      queueJob!();\n    }\n  }\n  public size(): number {\n    return this.queue.length;\n  }\n}\n"]}