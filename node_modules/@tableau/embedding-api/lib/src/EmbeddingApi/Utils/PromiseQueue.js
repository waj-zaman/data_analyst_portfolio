"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * A custom promise queue that serializes execution of multiple promises.
 *
 * @export
 * @class PromiseQueue
 */
class PromiseQueue {
    /**
     * Creates an instance of PromiseQueue.
     */
    constructor() {
        this.queue = [];
        this.pending = 0;
        this.concurrency = 1;
    }
    /**
     * Add a function that returns a promise to the queue.
     *
     * @template T
     * @param {PromiseFactory<T>} func
     * @return {*}  {Promise<T>}
     * @memberof PromiseQueue
     */
    add(func) {
        const promise = new Promise((resolve, reject) => {
            this.queue.push(() => __awaiter(this, void 0, void 0, function* () {
                try {
                    const result = yield func();
                    resolve(result);
                }
                catch (error) {
                    reject(error);
                }
                finally {
                    this.pending--;
                    this.poll();
                }
            }));
        });
        return promise;
    }
    poll() {
        if (this.pending < this.concurrency && this.queue.length > 0) {
            const queueJob = this.queue.shift();
            this.pending++;
            queueJob();
        }
    }
    size() {
        return this.queue.length;
    }
}
exports.PromiseQueue = PromiseQueue;
//# sourceMappingURL=PromiseQueue.js.map