"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const api_external_contract_js_1 = require("@tableau/api-external-contract-js");
const api_shared_js_1 = require("@tableau/api-shared-js");
const PulseImpl_1 = require("../Impl/PulseImpl");
const EmbeddingPulseUrl_1 = require("../Models/EmbeddingPulseUrl");
const EmbeddingUrlBuilder_1 = require("../Models/EmbeddingUrlBuilder");
const WebComponentManager_1 = require("../WebComponentManager");
const TableauVizBase_1 = require("./TableauVizBase");
const TableauWebComponent_1 = require("./TableauWebComponent");
/**
 * Represents the entry point for the `<tableau-pulse>` custom HTML element.
 * This class is specifically focused on transferring information between the HTML and
 * the Tableau Pulse, so it should have as little logic as possible.
 */
class TableauPulse extends TableauWebComponent_1.TableauWebComponent {
    constructor() {
        super();
        // This stores filters added via addFilter()
        this._preInitFilters = [];
    }
    disconnectedCallback() {
        super.disconnectedCallback();
        this._preInitFilters = [];
        if (this._pulseImpl) {
            this._pulseImpl.dispose();
        }
    }
    getAttributeEvents() {
        return [
            [api_external_contract_js_1.PulseAttributes.OnFirstInteractive, api_external_contract_js_1.EmbeddingTableauEventType.FirstInteractive],
            [api_external_contract_js_1.PulseAttributes.OnFirstPulseMetricSizeKnown, api_external_contract_js_1.EmbeddingTableauEventType.FirstPulseMetricSizeKnown],
            [api_external_contract_js_1.PulseAttributes.OnPulseUrlError, api_external_contract_js_1.EmbeddingTableauEventType.PulseError],
            [api_external_contract_js_1.PulseAttributes.OnPulseFiltersChanged, api_external_contract_js_1.EmbeddingTableauEventType.PulseFiltersChanged],
            [api_external_contract_js_1.PulseAttributes.OnPulseInsightDiscovered, api_external_contract_js_1.EmbeddingTableauEventType.PulseInsightDiscovered],
            [api_external_contract_js_1.PulseAttributes.OnPulseTimeDimensionChanged, api_external_contract_js_1.EmbeddingTableauEventType.PulseTimeDimensionChanged],
            [api_external_contract_js_1.PulseAttributes.OnPulseUrlChanged, api_external_contract_js_1.EmbeddingTableauEventType.PulseUrlChanged],
        ];
    }
    static get observedAttributes() {
        // Take caution before adding to this list because for every observed attribute change
        // we unregister and re-render the ask-data webcomponent
        return [...super.observedAttributes, ...Object.values(api_external_contract_js_1.PulseAttributes)];
    }
    updateRenderingIfInitialized(src) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._initialized) {
                return;
            }
            if (this._pulseImpl) {
                this._pulseImpl.dispose();
            }
            WebComponentManager_1.WebComponentManager.unregisterWebComponent(this._embeddingIdCounter);
            return this.updateRendering(src);
        });
    }
    updateRendering(src) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this._initialized = true;
                if (!src) {
                    console.debug(`A src needs to be set on the ${this.tagName.toLowerCase()} element. Skipping rendering.`);
                    return;
                }
                if (!this.token && !this.isTokenOptional) {
                    console.debug(`A token needs to be set on the ${this.tagName.toLowerCase()} element. Skipping rendering.`);
                    return;
                }
                const authResponse = yield this.auth(EmbeddingUrlBuilder_1.getSiteIdForPulse(src));
                if (authResponse === TableauWebComponent_1.TableauAuthResponse.Failure) {
                    console.debug('Authentication failed.');
                    return;
                }
                // Nothing to render if the user hasn't provided a src
                if (!this.src) {
                    console.debug(`A src needs to be set on the ${this.tagName.toLowerCase()} element. Skipping rendering.`);
                    return;
                }
                if (!this.iframe) {
                    console.debug('No iframe available to update the src.');
                    return;
                }
                const customParams = this.readCustomParamsFromChildren();
                this._embeddingIdCounter = WebComponentManager_1.WebComponentManager.registerWebComponent(this);
                this.registerAttributeEvents();
                const pulseUrl = EmbeddingPulseUrl_1.createPulseUrl(this.src, this.constructOptions(), customParams);
                const filters = this.readFiltersFromChild().concat(this._preInitFilters);
                this._pulseImpl = this.createAndInitializePulseImpl(pulseUrl, filters);
                if (this.timeDimension || filters.length) {
                    // If we have a time dimension or filters we hide the iframe until they are done applying to hide the reloads.
                    // The first interactive event will re-show it once it fires.
                    this.iframe.style.visibility = 'hidden';
                }
                this.iframe.src = pulseUrl.toString();
                this.raiseIframeSrcUpdatedNotification();
                return;
            }
            catch (e) {
                console.warn(e);
            }
        });
    }
    createAndInitializePulseImpl(pulseUrl, filters) {
        const pulseImpl = new PulseImpl_1.PulseImpl(this, this.iframe, pulseUrl, this.timeDimension, filters, this._embeddingIdCounter);
        pulseImpl.initialize();
        return pulseImpl;
    }
    registerAttributeEvents() {
        this.getAttributeEvents().forEach((elem) => {
            const [attributeEvent, eventType] = elem;
            this.registerCallback(attributeEvent, eventType);
        });
    }
    readFiltersFromChild() {
        const filters = [];
        [].forEach.call(this.children, (child) => {
            if (child.localName === api_external_contract_js_1.PulseChildElements.PulseFilter &&
                child.getAttribute(api_external_contract_js_1.PulseChildElementAttributes.Field) &&
                child.getAttribute(api_external_contract_js_1.PulseChildElementAttributes.Value)) {
                filters.push({
                    field: child.getAttribute(api_external_contract_js_1.PulseChildElementAttributes.Field),
                    value: child.getAttribute(api_external_contract_js_1.PulseChildElementAttributes.Value),
                });
            }
        });
        return filters;
    }
    readThemeParametersFromChild() {
        const properties = [];
        [].forEach.call(this.children, (child) => {
            if (child.localName === api_external_contract_js_1.PulseChildElements.ThemeParameter) {
                const name = child.getAttribute(api_external_contract_js_1.PulseChildElementAttributes.Name);
                const value = child.getAttribute(api_external_contract_js_1.PulseChildElementAttributes.Value);
                const type = child.getAttribute(api_external_contract_js_1.PulseChildElementAttributes.Type);
                if (name && value) {
                    // type is optional
                    properties.push({
                        name,
                        value,
                        type,
                    });
                }
            }
        });
        return properties;
    }
    getThemeString() {
        const theme = this.themeObj;
        if (!theme) {
            return;
        }
        try {
            return btoa(JSON.stringify(theme));
        }
        catch (_a) {
            return;
        }
    }
    constructOptions() {
        const options = {
            token: this.token,
            theme: this.getThemeString(),
        };
        if (this.disableExploreFilter) {
            options.disableExploreFilter = this.disableExploreFilter;
        }
        if (this.layout && this.layout !== api_external_contract_js_1.PulseLayout.Default) {
            // An empty value implies a default Pulse layout. Don't pass "default" value.
            options.layout = this.layout;
        }
        return options;
    }
    get disableExploreFilter() {
        return this.hasAttribute(api_external_contract_js_1.PulseAttributes.DisableExploreFilter);
    }
    set disableExploreFilter(v) {
        if (v) {
            this.setAttribute(api_external_contract_js_1.PulseAttributes.DisableExploreFilter, '');
        }
        else {
            this.removeAttribute(api_external_contract_js_1.PulseAttributes.DisableExploreFilter);
        }
    }
    get layout() {
        const layoutKey = TableauVizBase_1.attributeToEnumKey(this.getAttribute(api_external_contract_js_1.PulseAttributes.Layout));
        const layout = api_external_contract_js_1.PulseLayout[layoutKey];
        if (!layout) {
            return api_external_contract_js_1.PulseLayout.Default;
        }
        return layout;
    }
    set layout(v) {
        if (v) {
            this.setAttribute(api_external_contract_js_1.PulseAttributes.Layout, v);
        }
        else {
            this.removeAttribute(api_external_contract_js_1.PulseAttributes.Layout);
        }
    }
    get themeObj() {
        var _a;
        let theme;
        for (const { name, value, type } of this.readThemeParametersFromChild()) {
            theme = (theme !== null && theme !== void 0 ? theme : {});
            if (type) {
                theme[type] = (_a = theme[type], (_a !== null && _a !== void 0 ? _a : {}));
                theme[type][name] = value;
            }
            else {
                theme[name] = value;
            }
        }
        return theme;
    }
    get timeDimension() {
        const key = this.getAttribute(api_external_contract_js_1.PulseAttributes.TimeDimension);
        if (!key) {
            return;
        }
        api_shared_js_1.ErrorHelpers.verifyEnumValue(key, api_external_contract_js_1.PulseTimeDimension, 'Contract.PulseTimeDimension');
        return api_external_contract_js_1.PulseTimeDimension[key];
    }
    set timeDimension(v) {
        if (v) {
            api_shared_js_1.ErrorHelpers.verifyEnumValue(v, api_external_contract_js_1.PulseTimeDimension, 'Contract.PulseTimeDimension');
            this.setAttribute(api_external_contract_js_1.PulseAttributes.TimeDimension, v);
        }
        else {
            this.removeAttribute(api_external_contract_js_1.PulseAttributes.TimeDimension);
        }
    }
    get isTokenOptional() {
        return this.hasAttribute(api_external_contract_js_1.PulseAttributes.TokenOptional);
    }
    set isTokenOptional(v) {
        if (v) {
            this.setAttribute(api_external_contract_js_1.PulseAttributes.TokenOptional, '');
        }
        else {
            this.removeAttribute(api_external_contract_js_1.PulseAttributes.TokenOptional);
        }
    }
    addFilter(fieldName, value) {
        this._preInitFilters.push({ field: fieldName, value: value });
        WebComponentManager_1.WebComponentManager.synchronizeRender(this.updateRenderingIfInitialized.bind(this, this.src));
    }
    resize() {
        this._pulseImpl.resize();
    }
    applyFilterAsync(fieldName, values, updateType, options) {
        return this.applyFiltersAsync([{ fieldName, values, updateType, options }]).then((fieldNames) => fieldNames[0]);
    }
    applyFiltersAsync(filters) {
        return this._pulseImpl.applyFiltersAsync(filters);
    }
    getTimeDimensionAsync() {
        return this._pulseImpl.getTimeDimensionAsync();
    }
    applyTimeDimensionAsync(timeDimension) {
        return this._pulseImpl.applyTimeDimensionAsync(timeDimension);
    }
    getFiltersAsync() {
        return this._pulseImpl.getFiltersAsync();
    }
    clearFilterAsync(fieldName) {
        return this.clearFiltersAsync([fieldName]).then((fieldNames) => fieldNames[0]);
    }
    clearFiltersAsync(fieldNames) {
        return this._pulseImpl.clearFiltersAsync(fieldNames);
    }
    clearAllFiltersAsync() {
        return this._pulseImpl.clearAllFiltersAsync();
    }
}
exports.TableauPulse = TableauPulse;
//# sourceMappingURL=TableauPulse.js.map