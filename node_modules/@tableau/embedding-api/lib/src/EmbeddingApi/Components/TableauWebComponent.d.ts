import { CustomParameter, EmbeddingTableauEventType, WebComponentAttributes } from '@tableau/api-external-contract-js';
export declare enum TableauAuthResponse {
    Skip = "skip",
    Success = "success",
    Failure = "failure"
}
export declare const getLocalizedTitle: (lang: string) => string;
declare const HTMLElementShim: {
    new (): HTMLElement;
    prototype: HTMLElement;
};
export declare abstract class TableauWebComponent extends HTMLElementShim {
    static AttributeDefaults: {
        width: string;
        height: string;
    };
    protected _iframe: HTMLIFrameElement;
    protected _iframeStyle: HTMLStyleElement;
    protected _initialized: boolean;
    protected _embeddingIdCounter: number;
    private _fixedSize;
    protected abstract updateRendering(src?: string): Promise<void>;
    protected abstract updateRenderingIfInitialized(src?: string): Promise<void>;
    constructor();
    disconnectedCallback(): void;
    connectedCallback(): void;
    /**
     * Invoked each time one of the custom element's attributes is added, removed, or changed.
     * @param  {string} name - The name of the attribute.
     * @param  {string|null} oldValue - The previous value of the attribute or null if the attribute was just added.
     * @param  {string|null} newValue - The new value of the attribute or null if the attribute was just removed.
     * @returns void
     */
    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;
    static get observedAttributes(): string[];
    private initialize;
    get fixedSize(): boolean;
    protected readCustomParamsFromChildren(): CustomParameter[];
    private getIframeStyleChild;
    protected setupFrame(): void;
    protected setFrameSize(): void;
    /**
     * Compute the height and width by checking for the existence of
     * 1. The height and width attributes on the element, and
     * 2. The window computed height and width of the parent element.
     * If neither are defined for both dimensions, then return the default values.
     * @returns height and width to be used in setting the iframe size.
     */
    private computeElementSize;
    get src(): string | null;
    set src(v: string | null);
    get forceTokenSync(): boolean;
    set forceTokenSync(v: boolean);
    get width(): string;
    set width(v: string);
    get height(): string;
    set height(v: string);
    get debug(): boolean;
    set debug(v: boolean);
    get token(): string | undefined;
    set token(v: string | undefined);
    get iframeAuth(): boolean;
    set iframeAuth(v: boolean);
    get iframeAttributeLoading(): string | undefined;
    set iframeAttributeLoading(v: string | undefined);
    get iframeAttributeStyle(): string | undefined;
    set iframeAttributeStyle(v: string | undefined);
    get iframeAttributeClass(): string | undefined;
    set iframeAttributeClass(v: string | undefined);
    private getPixelAttribute;
    get iframe(): HTMLIFrameElement;
    protected registerAttributeAuthErrorEvent(): void;
    protected getWebComponentAttributeEvents(): [WebComponentAttributes, EmbeddingTableauEventType][];
    protected registerCallback(attributeEvent: string, eventType: string): void;
    protected auth(siteName: string): Promise<TableauAuthResponse>;
    protected isFallbackToRedirectAuthNeeded(error: any): boolean;
    protected raiseIframeSrcUpdatedNotification(): void;
    private raiseVizLoadErrorNotification;
}
export {};
//# sourceMappingURL=TableauWebComponent.d.ts.map