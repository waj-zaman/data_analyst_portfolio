"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const Contract = __importStar(require("@tableau/api-external-contract-js"));
const api_internal_contract_js_1 = require("@tableau/api-internal-contract-js");
const api_shared_js_1 = require("@tableau/api-shared-js");
const CustomMarkContextMenuEvent_1 = require("../Events/CustomMarkContextMenuEvent");
const FilterChangedEvent_1 = require("../Events/FilterChangedEvent");
const MarksSelectedEvent_1 = require("../Events/MarksSelectedEvent");
const ParameterChangedEvent_1 = require("../Events/ParameterChangedEvent");
const StoryPointSwitchedEvent_1 = require("../Events/StoryPointSwitchedEvent");
const SummaryDataChangedEvent_1 = require("../Events/SummaryDataChangedEvent");
const UrlActionEvent_1 = require("../Events/UrlActionEvent");
const EmbeddingVizUrl_1 = require("../Models/EmbeddingVizUrl");
const Workbook_1 = require("../Models/Workbook");
const WebComponentManager_1 = require("../WebComponentManager");
const TableauVizBase_1 = require("./TableauVizBase");
/**
 * Represents the entry point for the `<tableau-viz>` custom HTML element.
 * This class is specifically focused on transferring information between the HTML and
 * the Viz, so it should have as little logic as possible.  Most of the logic should be
 * in {@link VizImpl}.
 */
class TableauViz extends TableauVizBase_1.TableauVizBase {
    constructor() {
        // ========================================== Begin Custom Element definition ==========================================
        super(...arguments);
        // This stores filters added via addFilter()
        this.preInitFilters = [];
        // =========================================== End Viz Model definiton =================================================
    }
    //#region Reactions
    //#region Filters
    readFiltersFromChild() {
        const filters = [];
        [].forEach.call(this.children, (child) => {
            if (child.localName === Contract.VizChildElements.VizFilter &&
                !!child.getAttribute(Contract.VizChildElementAttributes.Field) &&
                child.getAttribute(Contract.VizChildElementAttributes.Value) !== undefined) {
                filters.push({
                    field: child.getAttribute(Contract.VizChildElementAttributes.Field),
                    value: child.getAttribute(Contract.VizChildElementAttributes.Value),
                });
            }
        });
        return filters;
    }
    //#endregion Filters
    //#region Parameters
    readParametersFromChild() {
        const params = [];
        [].forEach.call(this.children, (child) => {
            if (child.localName === Contract.VizChildElements.VizParameter &&
                !!child.getAttribute(Contract.VizChildElementAttributes.Name) &&
                !!child.getAttribute(Contract.VizChildElementAttributes.Value)) {
                params.push({
                    name: child.getAttribute(Contract.VizChildElementAttributes.Name),
                    value: child.getAttribute(Contract.VizChildElementAttributes.Value),
                });
            }
        });
        return params;
    }
    static get observedAttributes() {
        // Take caution before adding to this list because for every observed attribute change
        // we unregister and re-render the viz
        return [...super.observedAttributes, ...Object.values(Contract.VizAttributes)];
    }
    disconnectedCallback() {
        this.preInitFilters = [];
        super.disconnectedCallback();
    }
    //#endregion Reaction
    createFrameUrlWithParams() {
        const vizqlOptions = this.constructVizqlOptions();
        const filters = this.readFiltersFromChild().concat(this.preInitFilters);
        const params = this.readParametersFromChild();
        const customParams = this.readCustomParamsFromChildren();
        return EmbeddingVizUrl_1.createVizUrl(this.src, EmbeddingVizUrl_1.EmbeddingUrlMode.Viewing, vizqlOptions, this._embeddingIdCounter, filters, params, customParams);
    }
    constructVizqlOptions() {
        const options = {
            disableUrlActionsPopups: this.disableUrlActionsPopups,
            hideTabs: this.hideTabs,
            toolbar: this.toolbar,
            instanceIdToClone: this.instanceIdToClone,
            device: this.device,
            token: this.token,
            touchOptimize: this.touchOptimize,
            hideEditButton: this.hideEditButton,
            hideEditInDesktopButton: this.hideEditInDesktopButton,
            suppressDefaultEditBehavior: this.suppressDefaultEditBehavior,
            debug: this.debug,
            iframeAuth: this.iframeAuth,
        };
        return options;
    }
    getAttributeEvents() {
        return [
            [Contract.VizAttributes.OnCustomMarkContextMenuEvent, Contract.EmbeddingTableauEventType.CustomMarkContextMenuEvent],
            [Contract.VizAttributes.OnEditButtonClicked, Contract.EmbeddingTableauEventType.EditButtonClicked],
            [Contract.VizSharedAttributes.OnEditInDesktopButtonClicked, Contract.EmbeddingTableauEventType.EditInDesktopButtonClicked],
            [Contract.VizAttributes.OnFilterChanged, Contract.EmbeddingTableauEventType.FilterChanged],
            [Contract.VizSharedAttributes.OnFirstInteractive, Contract.EmbeddingTableauEventType.FirstInteractive],
            [Contract.VizSharedAttributes.OnFirstVizSizeKnown, Contract.EmbeddingTableauEventType.FirstVizSizeKnown],
            [Contract.VizAttributes.OnMarkSelectionChanged, Contract.EmbeddingTableauEventType.MarkSelectionChanged],
            [Contract.VizAttributes.OnParameterChanged, Contract.EmbeddingTableauEventType.ParameterChanged],
            [Contract.VizAttributes.OnTabSwitched, Contract.EmbeddingTableauEventType.TabSwitched],
            [Contract.VizAttributes.OnToolbarStateChanged, Contract.EmbeddingTableauEventType.ToolbarStateChanged],
            [Contract.VizAttributes.OnUrlAction, Contract.EmbeddingTableauEventType.UrlAction],
            [Contract.VizAttributes.OnCustomViewLoaded, Contract.EmbeddingTableauEventType.CustomViewLoaded],
            [Contract.VizAttributes.OnCustomViewRemoved, Contract.EmbeddingTableauEventType.CustomViewRemoved],
            [Contract.VizAttributes.OnCustomViewSaved, Contract.EmbeddingTableauEventType.CustomViewSaved],
            [Contract.VizAttributes.OnCustomViewSetDefault, Contract.EmbeddingTableauEventType.CustomViewSetDefault],
            [Contract.VizAttributes.OnStoryPointSwitched, Contract.EmbeddingTableauEventType.StoryPointSwitched],
            [Contract.VizAttributes.OnSummaryDataChanged, Contract.EmbeddingTableauEventType.SummaryDataChanged],
            [Contract.VizAttributes.OnReadyToReceiveAuthToken, Contract.EmbeddingTableauEventType.ReadyToReceiveAuthToken],
        ];
    }
    getRegisteredEvents() {
        return super.getRegisteredEvents().concat([
            [
                api_internal_contract_js_1.NotificationId.SelectedMarksChanged,
                (model) => {
                    return this.shouldNotifyEvent(model);
                },
                (visualId) => this.handleSelectedMarksChangedEvent(visualId),
            ],
            [
                api_internal_contract_js_1.NotificationId.FilterChanged,
                (model) => this.shouldNotifyEvent(model.visualId),
                (event) => this.handleFilterChangedEvent(event),
            ],
            [api_internal_contract_js_1.NotificationId.EditButtonClicked, () => true, () => this.handleEditButtonClicked()],
            [
                api_internal_contract_js_1.NotificationId.CustomMarkContextMenuClicked,
                (model) => {
                    return this.shouldNotifyEvent(model.visualId);
                },
                (event) => this.handleCustomMarkClickedContextMenuEvent(event),
            ],
            [
                api_internal_contract_js_1.NotificationId.ParameterChanged,
                () => true,
                (fieldName) => this.handleParameterChangedEvent(fieldName),
            ],
            [api_internal_contract_js_1.NotificationId.UrlAction, () => true, (event) => this.handleUrlAction(event)],
            [api_internal_contract_js_1.NotificationId.StoryPointSwitched, () => true, (event) => this.handleStoryPointSwitch(event)],
            [
                api_internal_contract_js_1.NotificationId.SummaryDataChanged,
                (model) => this.shouldNotifyEvent(model.visualId),
                (event) => this.handleSummaryDataChangedEvent(event),
            ],
        ]);
    }
    shouldNotifyEvent(visualId) {
        switch (this.workbook.activeSheet.sheetType) {
            case Contract.SheetType.Worksheet:
                return this.workbook.activeSheet.name === visualId.worksheet;
            case Contract.SheetType.Dashboard: {
                const dashboard = this.workbook.activeSheet;
                const length = dashboard.worksheets.filter((ws) => ws.name === visualId.worksheet).length;
                return length === 1;
            }
            case Contract.SheetType.Story: {
                const story = this.workbook.activeSheet;
                const containedSheet = story.activeStoryPoint.containedSheet;
                if (!containedSheet) {
                    return false;
                }
                if (containedSheet.sheetType === Contract.SheetType.Worksheet) {
                    return containedSheet.name === visualId.worksheet;
                }
                else if (containedSheet.sheetType === Contract.SheetType.Dashboard) {
                    const dashboard = containedSheet;
                    const length = dashboard.worksheets.filter((ws) => ws.name === visualId.worksheet).length;
                    return length === 1;
                }
                else {
                    return false;
                }
            }
            default:
                return false;
        }
    }
    handleSelectedMarksChangedEvent(visualId) {
        const event = new MarksSelectedEvent_1.MarksSelectedEvent(this.getWorksheetForNotificationHandler(visualId));
        this.dispatchEvent(new CustomEvent(Contract.EmbeddingTableauEventType.MarkSelectionChanged, { detail: event }));
    }
    handleFilterChangedEvent(event) {
        const filterChangeEvent = new FilterChangedEvent_1.FilterChangedEvent(this.getWorksheetForNotificationHandler(event.visualId), event.fieldName, event.fieldId);
        this.dispatchEvent(new CustomEvent(Contract.EmbeddingTableauEventType.FilterChanged, { detail: filterChangeEvent }));
    }
    handleSummaryDataChangedEvent(event) {
        const summaryDataChangedEvent = new SummaryDataChangedEvent_1.SummaryDataChangedEvent(this.getWorksheetForNotificationHandler(event.visualId));
        this.dispatchEvent(new CustomEvent(Contract.EmbeddingTableauEventType.SummaryDataChanged, { detail: summaryDataChangedEvent }));
    }
    handleEditButtonClicked() {
        this.dispatchEvent(new CustomEvent(Contract.EmbeddingTableauEventType.EditButtonClicked));
    }
    handleCustomMarkClickedContextMenuEvent(event) {
        const customMarkClickedEvent = new CustomMarkContextMenuEvent_1.CustomMarkContextMenuEvent(this.getWorksheetForNotificationHandler(event.visualId), event.contextMenuId);
        this.dispatchEvent(new CustomEvent(Contract.EmbeddingTableauEventType.CustomMarkContextMenuEvent, { detail: customMarkClickedEvent }));
    }
    handleParameterChangedEvent(fieldName) {
        const event = new ParameterChangedEvent_1.ParameterChangedEvent(fieldName, this.vizImpl.embeddingId);
        this.dispatchEvent(new CustomEvent(Contract.EmbeddingTableauEventType.ParameterChanged, { detail: event }));
    }
    handleUrlAction(event) {
        const urlActionEvent = new UrlActionEvent_1.UrlActionEvent(event.url, event.target);
        this.dispatchEvent(new CustomEvent(Contract.EmbeddingTableauEventType.UrlAction, { detail: urlActionEvent }));
    }
    handleStoryPointSwitch(newStoryPointModel) {
        const storyImpl = this.vizImpl.workbookImpl.activeSheet;
        const storyPointInfoImpl = storyImpl.storyPointsInfo.find((storyPointInfo) => storyPointInfo.active === true);
        if (storyImpl.activeStoryPoint && storyPointInfoImpl) {
            if (storyImpl.activeStoryPoint.index !== newStoryPointModel.index) {
                storyImpl.updateStory(newStoryPointModel);
                const storyPointSwitchedEvent = new StoryPointSwitchedEvent_1.StoryPointSwitchedEvent(storyPointInfoImpl, storyImpl.activeStoryPoint, this.vizImpl.workbookImpl);
                this.dispatchEvent(new CustomEvent(Contract.EmbeddingTableauEventType.StoryPointSwitched, { detail: storyPointSwitchedEvent }));
            }
        }
    }
    getWorksheetForNotificationHandler(visualId) {
        let worksheet;
        switch (this.workbook.activeSheet.sheetType) {
            case Contract.SheetType.Worksheet: {
                worksheet = this.workbook.activeSheet;
                break;
            }
            case Contract.SheetType.Dashboard: {
                const dashboard = this.workbook.activeSheet;
                const worksheetArr = dashboard.worksheets.filter((ws) => ws.name === visualId.worksheet);
                if (worksheetArr.length === 1) {
                    worksheet = worksheetArr[0];
                }
                else {
                    throw new api_shared_js_1.TableauError(Contract.EmbeddingErrorCodes.IndexOutOfRange, 'Worksheet not found');
                }
                break;
            }
            case Contract.SheetType.Story: {
                const story = this.workbook.activeSheet;
                const containedSheet = story.activeStoryPoint.containedSheet;
                if (!containedSheet) {
                    throw new api_shared_js_1.TableauError(Contract.EmbeddingErrorCodes.IndexOutOfRange, 'Worksheet not found');
                }
                if (containedSheet.sheetType === Contract.SheetType.Worksheet) {
                    worksheet = containedSheet;
                }
                else if (containedSheet.sheetType === Contract.SheetType.Dashboard) {
                    const dashboard = containedSheet;
                    const worksheetArr = dashboard.worksheets.filter((ws) => ws.name === visualId.worksheet);
                    if (worksheetArr.length === 1) {
                        worksheet = worksheetArr[0];
                    }
                    else {
                        throw new api_shared_js_1.TableauError(Contract.EmbeddingErrorCodes.IndexOutOfRange, 'Worksheet not found');
                    }
                }
                else {
                    throw new api_shared_js_1.TableauError(Contract.EmbeddingErrorCodes.ImplementationError, 'Could not find sheetType');
                }
                break;
            }
            default:
                throw new api_shared_js_1.TableauError(Contract.EmbeddingErrorCodes.ImplementationError, 'Could not find sheetType');
        }
        return worksheet;
    }
    //#region Simple Getters / Setters
    get disableUrlActionsPopups() {
        return this.hasAttribute(Contract.VizAttributes.DisableUrlActionsPopups);
    }
    set disableUrlActionsPopups(v) {
        if (v) {
            this.setAttribute(Contract.VizAttributes.DisableUrlActionsPopups, '');
        }
        else {
            this.removeAttribute(Contract.VizAttributes.DisableUrlActionsPopups);
        }
    }
    get hideTabs() {
        return this.hasAttribute(Contract.VizAttributes.HideTabs);
    }
    set hideTabs(v) {
        if (v) {
            this.setAttribute(Contract.VizAttributes.HideTabs, '');
        }
        else {
            this.removeAttribute(Contract.VizAttributes.HideTabs);
        }
    }
    get toolbar() {
        const toolbarKey = TableauVizBase_1.attributeToEnumKey(this.getAttribute(Contract.VizAttributes.Toolbar));
        const position = Contract.Toolbar[toolbarKey];
        if (!position) {
            return TableauVizBase_1.TableauVizBase.VizAttributeDefaults.toolbar;
        }
        return position;
    }
    set toolbar(v) {
        if (v) {
            this.setAttribute(Contract.VizAttributes.Toolbar, v);
        }
    }
    get instanceIdToClone() {
        const idToClone = this.getAttribute(Contract.VizAttributes.InstanceIdToClone);
        if (!idToClone) {
            return undefined;
        }
        return idToClone;
    }
    set instanceIdToClone(v) {
        if (v) {
            this.setAttribute(Contract.VizAttributes.InstanceIdToClone, v);
        }
        else {
            this.removeAttribute(Contract.VizAttributes.InstanceIdToClone);
        }
    }
    get device() {
        const deviceKey = TableauVizBase_1.attributeToEnumKey(this.getAttribute(Contract.VizAttributes.Device));
        const device = Contract.DeviceType[deviceKey];
        if (!device) {
            return TableauVizBase_1.TableauVizBase.VizAttributeDefaults.device; // it was not a valid device type
        }
        return device;
    }
    set device(v) {
        this.setAttribute(Contract.VizAttributes.Device, v);
    }
    get hideEditButton() {
        return this.hasAttribute(Contract.VizAttributes.HideEditButton);
    }
    set hideEditButton(v) {
        if (v) {
            this.setAttribute(Contract.VizAttributes.HideEditButton, '');
        }
        else {
            this.removeAttribute(Contract.VizAttributes.HideEditButton);
        }
    }
    //#endregion
    // ========================================== End Custom Element definition ============================================
    // =========================================== Begin Viz Model definiton ===============================================
    get automaticUpdatesArePaused() {
        return this.vizImpl.automaticUpdatesArePaused;
    }
    pauseAutomaticUpdatesAsync() {
        return this.vizImpl.pauseAutomaticUpdatesAsync();
    }
    resumeAutomaticUpdatesAsync() {
        return this.vizImpl.resumeAutomaticUpdatesAsync();
    }
    toggleAutomaticUpdatesAsync() {
        return this.vizImpl.toggleAutomaticUpdatesAsync();
    }
    revertAllAsync() {
        return this.vizImpl.revertAllAsync();
    }
    refreshDataAsync() {
        return this.vizImpl.refreshDataAsync();
    }
    exportImageAsync() {
        return this.vizImpl.exportImageAsync();
    }
    exportCrosstabAsync(sheetName, format) {
        return this.vizImpl.exportCrosstabAsync(sheetName, format);
    }
    exportDataAsync(sheetName, options) {
        return this.vizImpl.exportDataAsync(sheetName, options);
    }
    exportPowerPointAsync(sheetNames) {
        return this.vizImpl.exportPowerPointAsync(sheetNames);
    }
    exportPDFAsync(sheetNames, options) {
        return this.vizImpl.exportPDFAsync(sheetNames, options);
    }
    displayDialogAsync(dialogType) {
        return this.vizImpl.displayDialogAsync(dialogType);
    }
    redoAsync() {
        return this.vizImpl.redoAsync();
    }
    undoAsync() {
        return this.vizImpl.undoAsync();
    }
    setAuthToken(token) {
        this.vizImpl.setAuthToken(token);
    }
    addFilter(fieldName, value) {
        this.preInitFilters.push({ field: fieldName, value: value });
        WebComponentManager_1.WebComponentManager.synchronizeRender(this.updateRenderingIfInitialized.bind(this, this.src));
    }
    /**
     * This is the public entry point for users to get a reference to the whole data model
     */
    get workbook() {
        return new Workbook_1.Workbook(this.vizImpl.workbookImpl);
    }
}
exports.TableauViz = TableauViz;
//# sourceMappingURL=TableauViz.js.map