"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const api_external_contract_js_1 = require("@tableau/api-external-contract-js");
const EmbeddingAskDataUrl_1 = require("../Models/EmbeddingAskDataUrl");
const EmbeddingUrlBuilder_1 = require("../Models/EmbeddingUrlBuilder");
const WebComponentManager_1 = require("../WebComponentManager");
const TableauWebComponent_1 = require("./TableauWebComponent");
/**
 * Represents the entry point for the `<tableau-ask-data>` custom HTML element.
 * This class is specifically focused on transferring information between the HTML and
 * the AskData, so it should have as little logic as possible.
 */
class TableauAskData extends TableauWebComponent_1.TableauWebComponent {
    constructor() {
        super();
    }
    static get observedAttributes() {
        // Take caution before adding to this list because for every observed attribute change
        // we unregister and re-render the ask-data webcomponent
        return [...super.observedAttributes, ...Object.values(api_external_contract_js_1.AskDataAttributes)];
    }
    updateRenderingIfInitialized(src) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._initialized) {
                return;
            }
            WebComponentManager_1.WebComponentManager.unregisterWebComponent(this._embeddingIdCounter);
            return this.updateRendering(src);
        });
    }
    updateRendering(src) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this._initialized = true;
                if (!src) {
                    console.debug(`A src needs to be set on the ${this.tagName.toLowerCase()} element. Skipping rendering.`);
                    return;
                }
                const authResponse = yield this.auth(EmbeddingUrlBuilder_1.getSiteId(src));
                if (authResponse === TableauWebComponent_1.TableauAuthResponse.Failure) {
                    console.debug('Authentication failed.');
                    return;
                }
                // Nothing to render if the user hasn't provided a src
                if (!this.src) {
                    console.debug(`A src needs to be set on the ${this.tagName.toLowerCase()} element. Skipping rendering.`);
                    return;
                }
                if (!this.iframe) {
                    console.debug('No iframe available to update the src.');
                    return;
                }
                const customParams = this.readCustomParamsFromChildren();
                this._embeddingIdCounter = WebComponentManager_1.WebComponentManager.registerWebComponent(this);
                const askDataUrl = EmbeddingAskDataUrl_1.createAskDataUrl(this.src, this.constructOptions(), this._embeddingIdCounter, customParams).toString();
                this.iframe.src = askDataUrl;
                this.raiseIframeSrcUpdatedNotification();
                return;
            }
            catch (e) {
                console.warn(e);
            }
        });
    }
    constructOptions() {
        const options = {
            origin: this.origin,
            showEmbed: this.showEmbed,
            showPin: this.showPin,
            showSave: this.showSave,
            showShare: this.showShare,
            token: this.token,
            iframeAuth: this.iframeAuth,
            debug: this.debug,
        };
        return options;
    }
    get origin() {
        const originValue = this.getAttribute(api_external_contract_js_1.AskDataAttributes.Origin);
        return originValue ? originValue : undefined;
    }
    set origin(v) {
        if (v) {
            this.setAttribute(api_external_contract_js_1.AskDataAttributes.Origin, v);
        }
        else {
            this.removeAttribute(api_external_contract_js_1.AskDataAttributes.Origin);
        }
    }
    get showEmbed() {
        return this.hasAttribute(api_external_contract_js_1.AskDataAttributes.ShowEmbed);
    }
    set showEmbed(v) {
        if (v) {
            this.setAttribute(api_external_contract_js_1.AskDataAttributes.ShowEmbed, '');
        }
        else {
            this.removeAttribute(api_external_contract_js_1.AskDataAttributes.ShowEmbed);
        }
    }
    get showPin() {
        return this.hasAttribute(api_external_contract_js_1.AskDataAttributes.ShowPin);
    }
    set showPin(v) {
        if (v) {
            this.setAttribute(api_external_contract_js_1.AskDataAttributes.ShowPin, '');
        }
        else {
            this.removeAttribute(api_external_contract_js_1.AskDataAttributes.ShowPin);
        }
    }
    get showShare() {
        return this.hasAttribute(api_external_contract_js_1.AskDataAttributes.ShowShare);
    }
    set showShare(v) {
        if (v) {
            this.setAttribute(api_external_contract_js_1.AskDataAttributes.ShowShare, '');
        }
        else {
            this.removeAttribute(api_external_contract_js_1.AskDataAttributes.ShowShare);
        }
    }
    get showSave() {
        return this.hasAttribute(api_external_contract_js_1.AskDataAttributes.ShowSave);
    }
    set showSave(v) {
        if (v) {
            this.setAttribute(api_external_contract_js_1.AskDataAttributes.ShowSave, '');
        }
        else {
            this.removeAttribute(api_external_contract_js_1.AskDataAttributes.ShowSave);
        }
    }
}
exports.TableauAskData = TableauAskData;
//# sourceMappingURL=TableauAskData.js.map