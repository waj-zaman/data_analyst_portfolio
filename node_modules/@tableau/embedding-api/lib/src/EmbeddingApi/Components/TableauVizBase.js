"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const Contract = __importStar(require("@tableau/api-external-contract-js"));
const api_internal_contract_js_1 = require("@tableau/api-internal-contract-js");
const api_shared_js_1 = require("@tableau/api-shared-js");
const VizImpl_1 = require("../Impl/VizImpl");
const EmbeddingUrlBuilder_1 = require("../Models/EmbeddingUrlBuilder");
const WebComponentManager_1 = require("../WebComponentManager");
const TableauWebComponent_1 = require("./TableauWebComponent");
/**
 * This class is specifically focused on transferring information between html and viz
 * and giving the user an entry point into the viz model
 * It should have as little logic as possible
 */
class TableauVizBase extends TableauWebComponent_1.TableauWebComponent {
    // ========================================== Begin Custom Element definition ==========================================
    // https://html.spec.whatwg.org/multipage/custom-elements.html#custom-element-conformance
    disconnectedCallback() {
        super.disconnectedCallback();
        if (this._vizImpl) {
            this._vizImpl.dispose();
        }
    }
    static get observedAttributes() {
        // Take caution before adding to this list because for every observed attribute change
        // we unregister and re-render the viz
        return [...super.observedAttributes, ...Object.values(Contract.VizSharedAttributes)];
    }
    updateRenderingIfInitialized(src) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._initialized) {
                return;
            }
            // vizImpl is empty when a src is not set on initial tableau-viz load
            if (this._vizImpl) {
                this._vizImpl.dispose();
            }
            WebComponentManager_1.WebComponentManager.unregisterWebComponent(this._embeddingIdCounter);
            return this.updateRendering(src);
        });
    }
    updateRendering(src) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this._initialized = true;
                if (!src) {
                    console.debug(`A src needs to be set on the ${this.tagName.toLowerCase()} element. Skipping rendering.`);
                    return;
                }
                const authResponse = yield this.auth(EmbeddingUrlBuilder_1.getSiteId(src));
                if (authResponse === TableauWebComponent_1.TableauAuthResponse.Failure) {
                    console.debug('Authentication failed.');
                    return;
                }
                // Nothing to render if the user hasn't provided a src
                if (!this.src) {
                    console.debug(`A src needs to be set on the ${this.tagName.toLowerCase()} element. Skipping rendering.`);
                    return;
                }
                if (!this.iframe) {
                    console.debug('No iframe available to update the src.');
                    return;
                }
                this._embeddingIdCounter = WebComponentManager_1.WebComponentManager.registerWebComponent(this);
                this.registerAttributeEvents();
                const frameUrl = this.createFrameUrlWithParams();
                this._vizImpl = this.createAndInitializeVizImpl(frameUrl);
                this.iframe.src = frameUrl.toString();
                this.raiseIframeSrcUpdatedNotification();
                return;
            }
            catch (e) {
                console.debug(e);
            }
        });
    }
    createAndInitializeVizImpl(vizUrl) {
        const vizImpl = new VizImpl_1.VizImpl(this, this.iframe, vizUrl, this._embeddingIdCounter);
        vizImpl.initializeViz();
        return vizImpl;
    }
    registerAttributeEvents() {
        this.getAttributeEvents().forEach((elem) => {
            const [attributeEvent, eventType] = elem;
            this.registerCallback(attributeEvent, eventType);
        });
    }
    initializeEvents() {
        let notificationService;
        try {
            notificationService = api_shared_js_1.ApiServiceRegistry.get(this.vizImpl.embeddingId).getService("notification-service" /* Notification */);
        }
        catch (e) {
            throw new api_shared_js_1.TableauError(Contract.EmbeddingErrorCodes.EventInitializationError, 'Event initialization failed');
        }
        const registeredEvents = this.getRegisteredEvents();
        for (const [notification, filterfn, handler] of registeredEvents) {
            notificationService.registerHandler(notification, filterfn, handler);
        }
    }
    getRegisteredEvents() {
        return [
            [
                api_internal_contract_js_1.NotificationId.EditInDesktopButtonClicked,
                () => true,
                () => this.dispatchEvent(new CustomEvent(Contract.EmbeddingTableauEventType.EditInDesktopButtonClicked)),
            ],
        ];
    }
    //#region Simple Getters / Setters
    get touchOptimize() {
        return this.hasAttribute(Contract.VizSharedAttributes.TouchOptimize);
    }
    set touchOptimize(v) {
        if (v) {
            this.setAttribute(Contract.VizSharedAttributes.TouchOptimize, '');
        }
        else {
            this.removeAttribute(Contract.VizSharedAttributes.TouchOptimize);
        }
    }
    get vizImpl() {
        return this._vizImpl;
    }
    get hideEditInDesktopButton() {
        return this.hasAttribute(Contract.VizSharedAttributes.HideEditInDesktopButton);
    }
    set hideEditInDesktopButton(v) {
        if (v) {
            this.setAttribute(Contract.VizSharedAttributes.HideEditInDesktopButton, '');
        }
        else {
            this.removeAttribute(Contract.VizSharedAttributes.HideEditInDesktopButton);
        }
    }
    get suppressDefaultEditBehavior() {
        return this.hasAttribute(Contract.VizSharedAttributes.SuppressDefaultEditBehavior);
    }
    set suppressDefaultEditBehavior(v) {
        if (v) {
            this.setAttribute(Contract.VizSharedAttributes.SuppressDefaultEditBehavior, '');
        }
        else {
            this.removeAttribute(Contract.VizSharedAttributes.SuppressDefaultEditBehavior);
        }
    }
    get disableVersionCheck() {
        return this.hasAttribute(Contract.VizSharedAttributes.DisableVersionCheck);
    }
    set disableVersionCheck(v) {
        if (v) {
            this.setAttribute(Contract.VizSharedAttributes.DisableVersionCheck, '');
        }
        else {
            this.removeAttribute(Contract.VizSharedAttributes.DisableVersionCheck);
        }
    }
    //#endregion
    getCurrentSrcAsync() {
        return this.vizImpl.getCurrentSrcAsync();
    }
    resize() {
        this.vizImpl.resize();
    }
}
exports.TableauVizBase = TableauVizBase;
TableauVizBase.VizAttributeDefaults = {
    device: Contract.DeviceType.Default,
    toolbar: Contract.Toolbar.Bottom,
};
// This maybe needed in multiple files, so leaving outside the class for now.
function attributeToEnumKey(value) {
    if (!value || value.length < 1) {
        return '';
    }
    const lowercase = value.toLowerCase();
    const firstUpper = lowercase[0].toUpperCase() + lowercase.substring(1);
    return firstUpper;
}
exports.attributeToEnumKey = attributeToEnumKey;
//# sourceMappingURL=TableauVizBase.js.map