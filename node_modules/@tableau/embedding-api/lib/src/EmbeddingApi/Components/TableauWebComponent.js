"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
const api_external_contract_js_1 = require("@tableau/api-external-contract-js");
const api_shared_js_1 = require("@tableau/api-shared-js");
const VizLoadErrorEvent_1 = require("../Events/VizLoadErrorEvent");
const HtmlElementHelpers_1 = require("../Utils/HtmlElementHelpers");
const WebComponentManager_1 = require("../WebComponentManager");
var TableauAuthResponse;
(function (TableauAuthResponse) {
    TableauAuthResponse["Skip"] = "skip";
    TableauAuthResponse["Success"] = "success";
    TableauAuthResponse["Failure"] = "failure";
})(TableauAuthResponse = exports.TableauAuthResponse || (exports.TableauAuthResponse = {}));
const iframeAttributes = {
    allowTransparency: 'allowTransparency',
    allowFullScreen: 'allowFullScreen',
    style: 'style',
    class: 'class',
    loading: 'loading',
};
exports.getLocalizedTitle = (lang) => {
    // localized strings copied over from Strings.AccessibilityDataVisualizationTitleAttr
    // TFS 1287423: Enable loc pipeline
    const map = {
        en: 'Data Visualization',
        'en-GB': 'Data Visualisation',
        fr: 'Visualisation de donn\u00E9es',
        es: 'Visualizaci\u00F3n de datos',
        it: 'Visualizzazione dati',
        pt: 'Visualiza\u00E7\u00E3o de dados',
        ja: '\u30C7\u30FC\u30BF \u30D3\u30B8\u30E5\u30A2\u30E9\u30A4\u30BC\u30FC\u30B7\u30E7\u30F3',
        de: 'Datenvisualisierung',
        ko: '\uB370\uC774\uD130 \uBE44\uC8FC\uC5BC\uB9AC\uC81C\uC774\uC158',
        'zh-CN': '\u6570\u636E\u53EF\u89C6\u5316',
        'zh-TW': '\u8CC7\u6599\u53EF\u8996\u5316',
    };
    return map[lang] || map[lang.substr(0, 2)] || map.en;
};
const HTMLElementShim = (_a = globalThis.HTMLElement, (_a !== null && _a !== void 0 ? _a : class {
    attachShadow(_init) { }
}));
class TableauWebComponent extends HTMLElementShim {
    // https://html.spec.whatwg.org/multipage/custom-elements.html#custom-element-conformance
    constructor() {
        super();
        this._initialized = false;
        this._embeddingIdCounter = 0;
        this._fixedSize = false;
        this.attachShadow({ mode: 'open' });
    }
    disconnectedCallback() {
        var _a, _b;
        if (this._iframe) {
            (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.removeChild(this._iframe);
        }
        if (this._iframeStyle) {
            (_b = this.shadowRoot) === null || _b === void 0 ? void 0 : _b.removeChild(this._iframeStyle);
        }
        WebComponentManager_1.WebComponentManager.clearOrigin(this.src, this.forceTokenSync);
        WebComponentManager_1.WebComponentManager.unregisterWebComponent(this._embeddingIdCounter);
        this._initialized = false;
    }
    connectedCallback() {
        if (document.readyState === 'loading') {
            // Loading hasn't finished yet
            document.addEventListener('DOMContentLoaded', () => {
                this.initialize();
            });
        }
        else {
            // `DOMContentLoaded` has already fired
            this.initialize();
        }
    }
    /**
     * Invoked each time one of the custom element's attributes is added, removed, or changed.
     * @param  {string} name - The name of the attribute.
     * @param  {string|null} oldValue - The previous value of the attribute or null if the attribute was just added.
     * @param  {string|null} newValue - The new value of the attribute or null if the attribute was just removed.
     * @returns void
     */
    attributeChangedCallback(name, oldValue, newValue) {
        if (!oldValue && oldValue === newValue) {
            // A value-less attribute was reapplied.
            // e.g. hide-tabs=''
            return;
        }
        // if it's width/height, resize the frame
        // TFS 892487: Deal with sizing and scrollbars later
        if (name === api_external_contract_js_1.WebComponentAttributes.Width || name === api_external_contract_js_1.WebComponentAttributes.Height) {
            this.setFrameSize();
            return;
        }
        // Clear the domain so that we can reauth when a fresh token is provided
        if (name === api_external_contract_js_1.WebComponentAttributes.Token && oldValue && oldValue !== newValue) {
            WebComponentManager_1.WebComponentManager.clearOrigin(this.src, this.forceTokenSync);
        }
        // When there is a change in the other observed attributes, let's unregister the Viz
        // and re-render the viz again with new attribute values
        WebComponentManager_1.WebComponentManager.synchronizeRender(this.updateRenderingIfInitialized.bind(this, this.src));
    }
    static get observedAttributes() {
        // Take caution before adding to this list because for every observed attribute change
        // we unregister and re-render the viz
        return Object.values(api_external_contract_js_1.WebComponentAttributes);
    }
    initialize() {
        if (!this._initialized) {
            // The tableau viz component must display as flex so that it is simply a container
            // for the iframe and doesn't take up any room from its children.
            this.style.display = 'flex';
            this.setupFrame();
            this.registerAttributeAuthErrorEvent();
            WebComponentManager_1.WebComponentManager.synchronizeRender(this.updateRendering.bind(this, this.src));
        }
    }
    get fixedSize() {
        return this._fixedSize;
    }
    readCustomParamsFromChildren() {
        const params = [];
        Array.from(this.children).forEach((child) => {
            if (child.localName === api_external_contract_js_1.WebComponentChildElements.CustomParameter &&
                child.getAttribute(api_external_contract_js_1.WebComponentChildElementAttributes.Name) &&
                child.getAttribute(api_external_contract_js_1.WebComponentChildElementAttributes.Value)) {
                params.push({
                    name: child.getAttribute(api_external_contract_js_1.WebComponentChildElementAttributes.Name),
                    value: child.getAttribute(api_external_contract_js_1.WebComponentChildElementAttributes.Value),
                });
            }
        });
        return params;
    }
    getIframeStyleChild() {
        let iframeStyle;
        for (const child of Array.from(this.children)) {
            if (child.localName === api_external_contract_js_1.WebComponentChildElements.IframeStyle) {
                if (iframeStyle) {
                    throw new api_shared_js_1.TableauError(api_external_contract_js_1.EmbeddingErrorCodes.InternalError, `Only one ${api_external_contract_js_1.WebComponentChildElements.IframeStyle} child element is supported. Please combine your styles.`);
                }
                iframeStyle = child;
            }
        }
        return iframeStyle;
    }
    setupFrame() {
        var _a;
        this._iframe = document.createElement('iframe');
        const lang = navigator.language;
        const localizedTitle = exports.getLocalizedTitle(lang);
        // give context to users using screenreaders as to what kind of iframe they've entered
        this._iframe.setAttribute('title', localizedTitle);
        this._iframe.setAttribute(iframeAttributes.allowTransparency, 'true');
        this._iframe.setAttribute(iframeAttributes.allowFullScreen, 'true');
        if (this.iframeAttributeLoading) {
            this._iframe.setAttribute('loading', this.iframeAttributeLoading);
        }
        // reset any box model styles
        this._iframe.style.margin = '0px';
        this._iframe.style.padding = '0px';
        this._iframe.style.border = 'none';
        this._iframe.style.position = 'relative';
        // set iframe name & id
        this._iframe.id = this.id;
        this._iframe.name = this.id;
        this.setFrameSize();
        if (this.iframeAttributeStyle) {
            const style = this._iframe.getAttribute(iframeAttributes.style);
            this._iframe.setAttribute(iframeAttributes.style, `${style} ${this.iframeAttributeStyle}`);
        }
        if (this.iframeAttributeClass) {
            this._iframe.setAttribute(iframeAttributes.class, this.iframeAttributeClass);
        }
        if (this.shadowRoot) {
            const iframeStyleChild = this.getIframeStyleChild();
            if (iframeStyleChild) {
                iframeStyleChild.style.display = 'none';
                const styleContents = (_a = iframeStyleChild.textContent) === null || _a === void 0 ? void 0 : _a.trim();
                if (styleContents) {
                    this._iframeStyle = document.createElement('style');
                    this._iframeStyle.textContent = styleContents;
                    this.shadowRoot.appendChild(this._iframeStyle);
                }
            }
            this.shadowRoot.appendChild(this._iframe);
        }
    }
    setFrameSize() {
        if (this._iframe) {
            this._iframe.style.height = this.height;
            this._iframe.style.width = this.width;
        }
    }
    /**
     * Compute the height and width by checking for the existence of
     * 1. The height and width attributes on the element, and
     * 2. The window computed height and width of the parent element.
     * If neither are defined for both dimensions, then return the default values.
     * @returns height and width to be used in setting the iframe size.
     */
    computeElementSize() {
        const heightAttr = this.getPixelAttribute(api_external_contract_js_1.WebComponentAttributes.Height);
        const widthAttr = this.getPixelAttribute(api_external_contract_js_1.WebComponentAttributes.Width);
        if (heightAttr && widthAttr) {
            this._fixedSize = true;
            return { height: heightAttr, width: widthAttr };
        }
        if (this.parentElement) {
            const { height, width } = HtmlElementHelpers_1.HtmlElementHelpers.getContentSize(this.parentElement);
            if (height && width) {
                this._fixedSize = true;
                return { height: `${height}px`, width: `${width}px` };
            }
        }
        this._fixedSize = false;
        return { height: TableauWebComponent.AttributeDefaults.height, width: TableauWebComponent.AttributeDefaults.width };
    }
    //Simple Getters / Setters
    get src() {
        return this.getAttribute(api_external_contract_js_1.WebComponentAttributes.Src);
    }
    set src(v) {
        if (v) {
            this.setAttribute(api_external_contract_js_1.WebComponentAttributes.Src, v);
        }
    }
    get forceTokenSync() {
        return this.hasAttribute(api_external_contract_js_1.WebComponentAttributes.ForceTokenSync);
    }
    set forceTokenSync(v) {
        if (v) {
            this.setAttribute(api_external_contract_js_1.WebComponentAttributes.ForceTokenSync, '');
        }
        else {
            this.removeAttribute(api_external_contract_js_1.WebComponentAttributes.ForceTokenSync);
        }
    }
    get width() {
        return this.computeElementSize().width;
    }
    // non-valid css lengths will simply turn into '' e.g a number with no units
    set width(v) {
        this.setAttribute(api_external_contract_js_1.WebComponentAttributes.Width, v);
    }
    get height() {
        return this.computeElementSize().height;
    }
    // non-valid css lengths will simply turn into '' e.g a number with no units
    set height(v) {
        this.setAttribute(api_external_contract_js_1.WebComponentAttributes.Height, v);
    }
    get debug() {
        return this.hasAttribute(api_external_contract_js_1.WebComponentAttributes.Debug);
    }
    set debug(v) {
        if (v) {
            this.setAttribute(api_external_contract_js_1.WebComponentAttributes.Debug, '');
        }
        else {
            this.removeAttribute(api_external_contract_js_1.WebComponentAttributes.Debug);
        }
    }
    get token() {
        const tokenValue = this.getAttribute(api_external_contract_js_1.WebComponentAttributes.Token);
        if (!tokenValue) {
            return undefined;
        }
        return tokenValue;
    }
    set token(v) {
        if (v) {
            this.setAttribute(api_external_contract_js_1.WebComponentAttributes.Token, v);
        }
        else {
            this.removeAttribute(api_external_contract_js_1.WebComponentAttributes.Token);
        }
    }
    get iframeAuth() {
        return this.hasAttribute(api_external_contract_js_1.WebComponentAttributes.IframeAuth);
    }
    set iframeAuth(v) {
        if (v) {
            this.setAttribute(api_external_contract_js_1.WebComponentAttributes.IframeAuth, '');
        }
        else {
            this.removeAttribute(api_external_contract_js_1.WebComponentAttributes.IframeAuth);
        }
    }
    get iframeAttributeLoading() {
        const value = this.getAttribute(api_external_contract_js_1.EmbeddedIframeAttributes.Loading);
        if (!value) {
            return undefined;
        }
        return value;
    }
    set iframeAttributeLoading(v) {
        var _a, _b;
        if (v) {
            this.setAttribute(api_external_contract_js_1.EmbeddedIframeAttributes.Loading, v);
            (_a = this._iframe) === null || _a === void 0 ? void 0 : _a.setAttribute(iframeAttributes.loading, v);
        }
        else {
            this.removeAttribute(api_external_contract_js_1.EmbeddedIframeAttributes.Loading);
            (_b = this._iframe) === null || _b === void 0 ? void 0 : _b.removeAttribute(iframeAttributes.loading);
        }
    }
    get iframeAttributeStyle() {
        const value = this.getAttribute(api_external_contract_js_1.EmbeddedIframeAttributes.Style);
        if (!value) {
            return undefined;
        }
        return value;
    }
    set iframeAttributeStyle(v) {
        var _a, _b;
        if (v) {
            this.setAttribute(api_external_contract_js_1.EmbeddedIframeAttributes.Style, v);
            (_a = this._iframe) === null || _a === void 0 ? void 0 : _a.setAttribute(iframeAttributes.style, v);
        }
        else {
            this.removeAttribute(api_external_contract_js_1.EmbeddedIframeAttributes.Style);
            (_b = this._iframe) === null || _b === void 0 ? void 0 : _b.removeAttribute(iframeAttributes.style);
        }
    }
    get iframeAttributeClass() {
        const value = this.getAttribute(api_external_contract_js_1.EmbeddedIframeAttributes.Class);
        if (!value) {
            return undefined;
        }
        return value;
    }
    set iframeAttributeClass(v) {
        var _a, _b;
        if (v) {
            this.setAttribute(api_external_contract_js_1.EmbeddedIframeAttributes.Class, v);
            (_a = this._iframe) === null || _a === void 0 ? void 0 : _a.setAttribute(iframeAttributes.class, v);
        }
        else {
            this.removeAttribute(api_external_contract_js_1.EmbeddedIframeAttributes.Class);
            (_b = this._iframe) === null || _b === void 0 ? void 0 : _b.removeAttribute(iframeAttributes.class);
        }
    }
    getPixelAttribute(attributeName) {
        const attr = this.getAttribute(attributeName);
        if (attr && attr !== '') {
            return isNaN(Number(attr)) ? attr : `${Math.round(Number(attr))}px`;
        }
        else {
            // if it was invalid css, it will be blank
            return '';
        }
    }
    get iframe() {
        return this._iframe;
    }
    registerAttributeAuthErrorEvent() {
        this.getWebComponentAttributeEvents().forEach((elem) => {
            const [attributeEvent, eventType] = elem;
            this.registerCallback(attributeEvent, eventType);
        });
    }
    getWebComponentAttributeEvents() {
        return [[api_external_contract_js_1.WebComponentAttributes.OnVizLoadError, api_external_contract_js_1.EmbeddingTableauEventType.VizLoadError]];
    }
    registerCallback(attributeEvent, eventType) {
        // this will allow for both lowercase and camelcase attribute
        const funcName = this.getAttribute(attributeEvent);
        if (funcName && /^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(funcName)) {
            if (window[funcName]) {
                this.addEventListener(eventType, window[funcName]);
            }
        }
    }
    auth(siteName) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (!this.src) {
                    return TableauAuthResponse.Skip;
                }
                if (!this.token) {
                    return TableauAuthResponse.Skip;
                }
                if (this.iframeAuth) {
                    return TableauAuthResponse.Skip;
                }
                const authRequired = WebComponentManager_1.WebComponentManager.authRequired(this.src, this.forceTokenSync);
                if (!authRequired) {
                    return TableauAuthResponse.Skip;
                }
                const origin = new URL(this.src).origin.toString();
                const connectedAppUrl = `${origin}/vizportal/api/web/v1/auth/embed/signin`;
                const body = {
                    siteName,
                    jwt: this.token,
                };
                const options = {
                    method: 'POST',
                    credentials: 'include',
                    headers: {
                        'content-type': 'application/json',
                    },
                    body: JSON.stringify(body),
                };
                const response = yield fetch(connectedAppUrl, options);
                if (response.ok) {
                    WebComponentManager_1.WebComponentManager.updateSignedInOrigin(this.src, this.forceTokenSync);
                    return TableauAuthResponse.Success;
                }
                const text = yield response.text();
                const err = text;
                const error = {
                    statusCode: response.status,
                    errorMessage: err,
                };
                if (this.isFallbackToRedirectAuthNeeded(error)) {
                    this.iframeAuth = true;
                    console.debug('Auth Fallback trigger');
                    return TableauAuthResponse.Failure;
                }
                this.raiseVizLoadErrorNotification(api_external_contract_js_1.EmbeddingErrorCodes.AuthFailed, error);
                return TableauAuthResponse.Failure;
            }
            catch (error) {
                this.raiseVizLoadErrorNotification(api_external_contract_js_1.EmbeddingErrorCodes.UnknownAuthError, error);
                return TableauAuthResponse.Failure;
            }
        });
    }
    isFallbackToRedirectAuthNeeded(error) {
        try {
            if (error.statusCode === 404) {
                // redirect if the new endpoint is not available.
                return true;
            }
            if (error.statusCode === 401) {
                let errors = JSON.parse(error.errorMessage).result.errors;
                if (errors && errors.length > 0 && errors[0].code === 67) {
                    // redirect if the feature flag is turned off.
                    return true;
                }
            }
            return false;
        }
        catch (e) {
            console.error('Parsing error: ' + e);
            return false;
        }
    }
    raiseIframeSrcUpdatedNotification() {
        this.dispatchEvent(new CustomEvent(api_external_contract_js_1.EmbeddingTableauEventType.IframeSrcUpdated));
    }
    raiseVizLoadErrorNotification(errorCode, error) {
        try {
            console.error(error);
            const errorEvent = new VizLoadErrorEvent_1.VizLoadErrorEvent(errorCode, JSON.stringify(error));
            this.dispatchEvent(new CustomEvent(api_external_contract_js_1.EmbeddingTableauEventType.VizLoadError, { detail: errorEvent }));
        }
        catch (err) {
            const errorEvent = new VizLoadErrorEvent_1.VizLoadErrorEvent(api_external_contract_js_1.EmbeddingErrorCodes.UnknownAuthError, '');
            this.dispatchEvent(new CustomEvent(api_external_contract_js_1.EmbeddingTableauEventType.VizLoadError, { detail: errorEvent }));
        }
    }
}
exports.TableauWebComponent = TableauWebComponent;
TableauWebComponent.AttributeDefaults = {
    width: '800px',
    height: '600px',
};
//# sourceMappingURL=TableauWebComponent.js.map