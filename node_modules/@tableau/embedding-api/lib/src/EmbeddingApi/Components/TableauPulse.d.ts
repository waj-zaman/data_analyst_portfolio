import { FilterOptions, FilterUpdateType, Pulse, PulseFieldValueArray, PulseFilter, PulseLayout, PulseTheme, PulseTimeDimension } from '@tableau/api-external-contract-js';
import { TableauWebComponent } from './TableauWebComponent';
/**
 * Represents the entry point for the `<tableau-pulse>` custom HTML element.
 * This class is specifically focused on transferring information between the HTML and
 * the Tableau Pulse, so it should have as little logic as possible.
 */
export declare class TableauPulse extends TableauWebComponent implements Pulse {
    private _pulseImpl;
    private _preInitFilters;
    constructor();
    disconnectedCallback(): void;
    private getAttributeEvents;
    static get observedAttributes(): string[];
    protected updateRenderingIfInitialized(src?: string): Promise<void>;
    protected updateRendering(src?: string): Promise<void>;
    private createAndInitializePulseImpl;
    private registerAttributeEvents;
    private readFiltersFromChild;
    private readThemeParametersFromChild;
    private getThemeString;
    private constructOptions;
    get disableExploreFilter(): boolean;
    set disableExploreFilter(v: boolean);
    get layout(): PulseLayout;
    set layout(v: PulseLayout);
    get themeObj(): PulseTheme | undefined;
    get timeDimension(): PulseTimeDimension | undefined;
    set timeDimension(v: PulseTimeDimension | undefined);
    get isTokenOptional(): boolean;
    set isTokenOptional(v: boolean);
    addFilter(fieldName: string, value: string): void;
    resize(): void;
    applyFilterAsync(fieldName: string, values: PulseFieldValueArray, updateType: FilterUpdateType, options: FilterOptions): Promise<string>;
    applyFiltersAsync(filters: Array<{
        fieldName: string;
        values: PulseFieldValueArray;
        updateType: FilterUpdateType;
        options: FilterOptions;
    }>): Promise<Array<string>>;
    getTimeDimensionAsync(): Promise<PulseTimeDimension>;
    applyTimeDimensionAsync(timeDimension: PulseTimeDimension): Promise<void>;
    getFiltersAsync(): Promise<Array<PulseFilter>>;
    clearFilterAsync(fieldName: string): Promise<string>;
    clearFiltersAsync(fieldNames: Array<string>): Promise<Array<string>>;
    clearAllFiltersAsync(): Promise<void>;
}
//# sourceMappingURL=TableauPulse.d.ts.map