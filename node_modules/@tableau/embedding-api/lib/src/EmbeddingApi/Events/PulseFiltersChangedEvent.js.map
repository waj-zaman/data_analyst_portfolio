{"version":3,"file":"PulseFiltersChangedEvent.js","sourceRoot":"","sources":["../../../../src/EmbeddingApi/Events/PulseFiltersChangedEvent.ts"],"names":[],"mappings":";;;;;;;;;AAAA,4EAA8D;AAC9D,0DAA0E;AAI1E,MAAa,wBAAwB;IAInC,YAAmB,UAAyB,EAAE,WAAmB;QAC/D,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;IAClC,CAAC;IAED,IAAW,UAAU;QACnB,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAEM,eAAe;QACpB,MAAM,OAAO,GAAG,kCAAkB,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,UAAU,mCAAkD,CAAC;QACvH,OAAO,OAAO,CAAC,eAAe,EAAE,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE;YAChD,MAAM,cAAc,GAAgC,EAAE,CAAC;YACvD,MAAM,aAAa,GAAkB,EAAE,CAAC;YAExC,KAAK,MAAM,SAAS,IAAI,IAAI,CAAC,WAAW,EAAE;gBACxC,MAAM,aAAa,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,SAAS,KAAK,SAAS,CAAC,CAAC;gBAE/E,IAAI,aAAa,EAAE;oBACjB,cAAc,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;iBACpC;qBAAM;oBACL,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;iBAC/B;aACF;YAED,IAAI,aAAa,CAAC,MAAM,EAAE;gBACxB,MAAM,IAAI,4BAAY,CACpB,QAAQ,CAAC,mBAAmB,CAAC,6BAA6B,EAC1D,0BAA0B,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CACtD,CAAC;aACH;YAED,OAAO,cAAc,CAAC;QACxB,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AAvCD,4DAuCC","sourcesContent":["import * as Contract from '@tableau/api-external-contract-js';\nimport { ApiServiceRegistry, TableauError } from '@tableau/api-shared-js';\nimport { EmbeddingServiceNames } from '../Services';\nimport { PulseService } from '../Services/PulseService';\n\nexport class PulseFiltersChangedEvent implements Contract.PulseFiltersChangedEvent {\n  private _fieldNames: Array<string>;\n  private _embeddingId: number;\n\n  public constructor(fieldNames: Array<string>, embeddingId: number) {\n    this._fieldNames = fieldNames;\n    this._embeddingId = embeddingId;\n  }\n\n  public get fieldNames(): Array<string> {\n    return this._fieldNames;\n  }\n\n  public getFiltersAsync(): Promise<Array<Contract.PulseFilter>> {\n    const service = ApiServiceRegistry.get(this._embeddingId).getService<PulseService>(EmbeddingServiceNames.PulseService);\n    return service.getFiltersAsync().then((filters) => {\n      const eventedFilters: Array<Contract.PulseFilter> = [];\n      const missingFields: Array<string> = [];\n\n      for (const fieldName of this._fieldNames) {\n        const eventedFilter = filters.find((filter) => filter.fieldName === fieldName);\n\n        if (eventedFilter) {\n          eventedFilters.push(eventedFilter);\n        } else {\n          missingFields.push(fieldName);\n        }\n      }\n\n      if (missingFields.length) {\n        throw new TableauError(\n          Contract.EmbeddingErrorCodes.FilterMissingOrNotImplemented,\n          `Cannot find filter(s): ${missingFields.join(', ')}.`,\n        );\n      }\n\n      return eventedFilters;\n    });\n  }\n}\n"]}