{"version":3,"file":"ToolbarServiceImpl.js","sourceRoot":"","sources":["../../../../../src/EmbeddingApi/Services/Impl/ToolbarServiceImpl.ts"],"names":[],"mappings":"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","sourcesContent":["import { ExecuteParameters, ParameterId, VerbId } from '@tableau/api-internal-contract-js';\nimport { ServiceImplBase } from '@tableau/api-shared-js';\nimport { EmbeddingServiceNames } from '../EmbeddingServiceNames';\nimport { ToolbarService } from '../ToolbarService';\n\nexport class ToolbarServiceImpl extends ServiceImplBase implements ToolbarService {\n  public get serviceName(): string {\n    return EmbeddingServiceNames.ToolbarService;\n  }\n  public revertAllAsync(): Promise<void> {\n    const verb = VerbId.RevertWorkbook;\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'revertAllAsync',\n    };\n    return this.execute(verb, parameters).then<void>((response) => {\n      return;\n    });\n  }\n\n  public redoAsync(): Promise<void> {\n    const verb = VerbId.Redo;\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'redoAsync',\n    };\n    return this.execute(verb, parameters).then<void>((response) => {\n      return;\n    });\n  }\n\n  public undoAsync(): Promise<void> {\n    const verb = VerbId.Undo;\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'undoAsync',\n    };\n    return this.execute(verb, parameters).then<void>((response) => {\n      return;\n    });\n  }\n\n  public exportImageAsync(): Promise<void> {\n    const verb = VerbId.ExportImage;\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'exportImageAsync',\n    };\n    return this.execute(verb, parameters).then<void>((response) => {\n      return;\n    });\n  }\n\n  public setAutoUpdateAsync(state: boolean): Promise<void> {\n    const verb = VerbId.SetAutoUpdate;\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'setAutoUpdateAsync',\n      [ParameterId.State]: state,\n    };\n    return this.execute(verb, parameters).then<void>(() => {\n      return;\n    });\n  }\n\n  public displayDownloadWorkbookDialogAsync(): Promise<void> {\n    const verb = VerbId.DownloadWorkbook;\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'displayDialogAsync(Workbook)',\n    };\n    return this.execute(verb, parameters).then<void>((response) => {\n      return;\n    });\n  }\n\n  public displayExportPdfDialogAsync(): Promise<void> {\n    const verb = VerbId.ExportPdf;\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'displayDialogAsync(ExportPDF)',\n    };\n    return this.execute(verb, parameters).then<void>((response) => {\n      return;\n    });\n  }\n\n  public displayExportPowerpointDialogAsync(): Promise<void> {\n    const verb = VerbId.ExportPowerpoint;\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'displayDialogAsync(ExportPowerPoint)',\n    };\n    return this.execute(verb, parameters).then<void>((response) => {\n      return;\n    });\n  }\n\n  public displayExportDataDialogAsync(): Promise<void> {\n    const verb = VerbId.ExportData;\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'displayDialogAsync(ExportData)',\n    };\n    return this.execute(verb, parameters).then<void>((response) => {\n      return;\n    });\n  }\n\n  public displayExportCrosstabDialogAsync(): Promise<void> {\n    const verb = VerbId.ExportCrosstab;\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'displayDialogAsync(ExportCrossTab)',\n    };\n    return this.execute(verb, parameters).then<void>((response) => {\n      return;\n    });\n  }\n\n  public displayShareDialogAsync(): Promise<void> {\n    const verb = VerbId.Share;\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'displayDialogAsync(Share)',\n    };\n    return this.execute(verb, parameters).then<void>((response) => {\n      return;\n    });\n  }\n}\n"]}