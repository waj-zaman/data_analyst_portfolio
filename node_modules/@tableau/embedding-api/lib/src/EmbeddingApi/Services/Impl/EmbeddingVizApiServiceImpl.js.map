{"version":3,"file":"EmbeddingVizApiServiceImpl.js","sourceRoot":"","sources":["../../../../../src/EmbeddingApi/Services/Impl/EmbeddingVizApiServiceImpl.ts"],"names":[],"mappings":";;AAAA,gFAI2C;AAC3C,gFAK2C;AAC3C,0DAAuE;AAIvE,MAAa,0BAA2B,SAAQ,+BAAe;IAC7D,IAAW,WAAW;QACpB,6DAAoD;IACtD,CAAC;IAEM,sCAAsC;QAC3C,MAAM,IAAI,GAAG,iCAAM,CAAC,wBAAwB,CAAC;QAC7C,MAAM,UAAU,GAAsB;YACpC,CAAC,sCAAW,CAAC,YAAY,CAAC,EAAE,0BAA0B;SACvD,CAAC;QAEF,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC,IAAI,CAAiC,CAAC,QAAQ,EAAE,EAAE;YACtF,MAAM,QAAQ,GAAG,QAAQ,CAAC,MAAmC,CAAC;YAC9D,IAAI,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;YACtC,IAAI,IAAI,GAAmC;gBACzC,qBAAqB,EAAE,QAAQ,CAAC,sCAAW,CAAC,wBAAwB,CAAC;aACtE,CAAC;YACF,OAAO,IAAI,CAAC;QACd,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,sBAAsB,CAAC,QAAmC;QAChE,IAAI,QAAQ,CAAC,sCAAW,CAAC,qBAAqB,CAAC,EAAE;YAC/C,MAAM,IAAI,4BAAY,CAAC,qCAAU,CAAC,aAAa,EAAE,QAAQ,CAAC,sCAAW,CAAC,qBAAqB,CAAC,CAAC,CAAC;SAC/F;IACH,CAAC;IAEM,sCAAsC,CAAC,qBAAqD;QACjG,MAAM,IAAI,GAAG,iCAAM,CAAC,wBAAwB,CAAC;QAC7C,MAAM,UAAU,GAAsB;YACpC,CAAC,sCAAW,CAAC,YAAY,CAAC,EAAE,0BAA0B;YACtD,CAAC,sCAAW,CAAC,wBAAwB,CAAC,EAAE,qBAAqB,CAAC,qBAAqB;SACpF,CAAC;QAEF,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC,IAAI,CAAO,CAAC,QAAQ,EAAE,EAAE;YAC5D,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC7C,MAAM,QAAQ,GAAG,QAAQ,CAAC,MAAgB,CAAC;gBAC3C,MAAM,IAAI,4BAAY,CAAC,qCAAU,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;aAC5D;YACD,OAAO;QACT,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,8BAA8B;QACnC,MAAM,IAAI,GAAG,iCAAM,CAAC,sCAAsC,CAAC;QAC3D,MAAM,UAAU,GAAsB;YACpC,CAAC,sCAAW,CAAC,YAAY,CAAC,EAAE,2BAA2B;SACxD,CAAC;QAEF,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC,IAAI,CAAiC,CAAC,QAAQ,EAAE,EAAE;YACtF,MAAM,qBAAqB,GAAG,QAAQ,CAAC,MAAwC,CAAC;YAChF,OAAO,qBAAqB,CAAC;QAC/B,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AAtDD,gEAsDC","sourcesContent":["import {\n  EmbeddingVizStateWithDataModel,\n  EmbeddingAbstractQuery as ExternalEmbeddingAbstractQuery,\n  ErrorCodes,\n} from '@tableau/api-external-contract-js';\nimport {\n  ExecuteParameters,\n  ParameterId,\n  VerbId,\n  EmbeddingAbstractQuery as InternalEmbeddingAbstractQuery,\n} from '@tableau/api-internal-contract-js';\nimport { ServiceImplBase, TableauError } from '@tableau/api-shared-js';\nimport { EmbeddingVizApiService } from '../EmbeddingVizApiService';\nimport { EmbeddingServiceNames } from '../EmbeddingServiceNames';\n\nexport class EmbeddingVizApiServiceImpl extends ServiceImplBase implements EmbeddingVizApiService {\n  public get serviceName(): string {\n    return EmbeddingServiceNames.EmbeddingVizApiService;\n  }\n\n  public getEmbeddingVizStateWithDataModelAsync(): Promise<EmbeddingVizStateWithDataModel> {\n    const verb = VerbId.GetVizStateWithDataModel;\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'getVizStateWithDataModel',\n    };\n\n    return this.execute(verb, parameters).then<EmbeddingVizStateWithDataModel>((response) => {\n      const serverPm = response.result as { [key: string]: string };\n      this.checkForErrorParameter(serverPm);\n      let vsdm: EmbeddingVizStateWithDataModel = {\n        vizStateWithDataModel: serverPm[ParameterId.VizAPIStateWithDataModel],\n      };\n      return vsdm;\n    });\n  }\n\n  private checkForErrorParameter(serverPm: { [key: string]: string }) {\n    if (serverPm[ParameterId.VizAPIStateWarningMsg]) {\n      throw new TableauError(ErrorCodes.InternalError, serverPm[ParameterId.VizAPIStateWarningMsg]);\n    }\n  }\n\n  public setEmbeddingVizStateWithDataModelAsync(vizStateWithDataModel: EmbeddingVizStateWithDataModel): Promise<void> {\n    const verb = VerbId.SetVizStateWithDataModel;\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'setVizStateWithDataModel',\n      [ParameterId.VizAPIStateWithDataModel]: vizStateWithDataModel.vizStateWithDataModel,\n    };\n\n    return this.execute(verb, parameters).then<void>((response) => {\n      if (Object.keys(response.result).length !== 0) {\n        const errorMsg = response.result as string;\n        throw new TableauError(ErrorCodes.InternalError, errorMsg);\n      }\n      return;\n    });\n  }\n\n  public getEmbeddingAbstractQueryAsync(): Promise<ExternalEmbeddingAbstractQuery> {\n    const verb = VerbId.GetEmbeddingAbstractQueryWithDataModel;\n    const parameters: ExecuteParameters = {\n      [ParameterId.FunctionName]: 'getEmbeddingAbstractQuery',\n    };\n\n    return this.execute(verb, parameters).then<InternalEmbeddingAbstractQuery>((response) => {\n      const externalAbstractQuery = response.result as ExternalEmbeddingAbstractQuery;\n      return externalAbstractQuery;\n    });\n  }\n}\n"]}