"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const api_external_contract_js_1 = require("@tableau/api-external-contract-js");
const api_internal_contract_js_1 = require("@tableau/api-internal-contract-js");
const api_shared_js_1 = require("@tableau/api-shared-js");
const EmbeddingApi_1 = require("../../../EmbeddingApi");
const PulseFilter_1 = require("../../Models/PulseFilter");
class PulseServiceImpl extends api_shared_js_1.ServiceImplBase {
    get serviceName() {
        return "PulseService" /* PulseService */;
    }
    applyFiltersAsync(filters) {
        const verb = api_internal_contract_js_1.VerbId.ApplyPulseFilters;
        const parameters = {
            [api_internal_contract_js_1.ParameterId.PulseFilters]: filters,
        };
        if (!Array.isArray(filters)) {
            throw new api_shared_js_1.TableauError(EmbeddingApi_1.ErrorCodes.InvalidParameter, 'filters parameter for applyFiltersAsync must be an array');
        }
        for (const filter of filters) {
            if (!Array.isArray(filter.values)) {
                throw new api_shared_js_1.TableauError(EmbeddingApi_1.ErrorCodes.InvalidParameter, 'filter values for applyFiltersAsync must be an array');
            }
            if (!filter.updateType || !Object.values(api_internal_contract_js_1.FilterUpdateType).includes(filter.updateType)) {
                throw new api_shared_js_1.TableauError(EmbeddingApi_1.ErrorCodes.InvalidParameter, 'filter updateType for applyFiltersAsync must be a valid update type');
            }
            if (!filter.options) {
                throw new api_shared_js_1.TableauError(EmbeddingApi_1.ErrorCodes.InvalidParameter, 'filter options object for applyFiltersAsync must be provided');
            }
            if (![true, false].includes(filter.options.isExcludeMode)) {
                throw new api_shared_js_1.TableauError(EmbeddingApi_1.ErrorCodes.InvalidParameter, 'filter options.isExcludeMode for applyFiltersAsync must be a boolean');
            }
        }
        return this.execute(verb, parameters).then((_) => {
            return filters.map((f) => f.fieldName);
        });
    }
    getTimeDimensionAsync() {
        const verb = api_internal_contract_js_1.VerbId.GetPulseTimeDimension;
        const parameters = {};
        return this.execute(verb, parameters).then((response) => {
            const { timeDimension } = response.result;
            if (!timeDimension) {
                throw new api_shared_js_1.TableauError(EmbeddingApi_1.ErrorCodes.InvalidTimeDimension, 'Unable to determine the currently applied time dimension.');
            }
            if (!api_shared_js_1.ErrorHelpers.isValidEnumValue(timeDimension, api_external_contract_js_1.PulseTimeDimension)) {
                const sentences = [
                    `The current time dimension is '${timeDimension}', which is not a known value of the Contract.PulseTimeDimension enum.`,
                    'You may need to update your version of the Tableau Embedding API.',
                    `Valid values are: ${Object.keys(api_external_contract_js_1.PulseTimeDimension).join(', ')}`,
                ];
                console.warn(sentences.join(' '));
            }
            return timeDimension;
        });
    }
    applyTimeDimensionAsync(timeDimension) {
        api_shared_js_1.ErrorHelpers.verifyEnumValue(timeDimension, api_external_contract_js_1.PulseTimeDimension, 'Contract.PulseTimeDimension');
        const verb = api_internal_contract_js_1.VerbId.ApplyPulseTimeDimension;
        const parameters = {
            [api_internal_contract_js_1.ParameterId.PulseTimeDimension]: timeDimension,
        };
        return this.execute(verb, parameters).then((_) => {
            return;
        });
    }
    getCategoricalDomainAsync(fieldName, domainType, searchTerm, pageSize, nextPageToken) {
        api_shared_js_1.ErrorHelpers.verifyStringParameter(fieldName, 'fieldName');
        api_shared_js_1.ErrorHelpers.verifyEnumValue(domainType, api_external_contract_js_1.FilterDomainType, 'Contract.FilterDomainType');
        const verb = api_internal_contract_js_1.VerbId.GetPulseCategoricalDomain;
        const parameters = {
            [api_internal_contract_js_1.ParameterId.PulseFieldName]: fieldName,
            [api_internal_contract_js_1.ParameterId.PulseFilterDomainType]: domainType,
            [api_internal_contract_js_1.ParameterId.PulseFilterDomainSearchTerm]: searchTerm,
        };
        if (pageSize !== undefined) {
            parameters[api_internal_contract_js_1.ParameterId.PulsePageSize] = pageSize;
        }
        if (nextPageToken !== undefined) {
            parameters[api_internal_contract_js_1.ParameterId.PulseNextPageToken] = nextPageToken;
        }
        return this.execute(verb, parameters).then((response) => {
            const domain = response.result;
            return domain;
        });
    }
    getFiltersAsync() {
        const verb = api_internal_contract_js_1.VerbId.GetPulseFilters;
        const parameters = {};
        return this.execute(verb, parameters).then((response) => {
            const filters = response.result;
            return this.convertDomainFilters(filters);
        });
    }
    clearFiltersAsync(fieldNames) {
        const verb = api_internal_contract_js_1.VerbId.ClearPulseFilters;
        const parameters = {
            [api_internal_contract_js_1.ParameterId.PulseFieldNames]: fieldNames,
        };
        if (!Array.isArray(fieldNames)) {
            throw new api_shared_js_1.TableauError(EmbeddingApi_1.ErrorCodes.InvalidParameter, 'fieldNames parameter for clearFiltersAsync must be an array');
        }
        return this.execute(verb, parameters).then((_) => {
            return fieldNames;
        });
    }
    clearAllFiltersAsync() {
        const verb = api_internal_contract_js_1.VerbId.ClearAllPulseFilters;
        const parameters = {};
        return this.execute(verb, parameters).then((_) => {
            return;
        });
    }
    convertDomainFilters(domainFilters) {
        const filters = [];
        domainFilters.forEach((domainFilter) => {
            switch (domainFilter.filterType) {
                case api_external_contract_js_1.FilterType.Categorical: {
                    const filter = domainFilter;
                    if (filter) {
                        filters.push(this.convertCategoricalFilter(filter));
                    }
                    else {
                        throw new Error('Invalid Categorical Filter');
                    }
                    break;
                }
                default: {
                    break;
                }
            }
        });
        return filters;
    }
    convertCategoricalFilter(domainFilter) {
        return new PulseFilter_1.CategoricalPulseFilter(domainFilter.fieldName, domainFilter.metricId, api_external_contract_js_1.FilterType.Categorical, this._registryId, domainFilter.appliedValues, domainFilter.isExcludeMode, domainFilter.isAllSelected);
    }
}
exports.PulseServiceImpl = PulseServiceImpl;
//# sourceMappingURL=PulseServiceImpl.js.map