{"version":3,"file":"PulseServiceImpl.js","sourceRoot":"","sources":["../../../../../src/EmbeddingApi/Services/Impl/PulseServiceImpl.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  FilterDomainType,\n  FilterOptions,\n  FilterType,\n  PulseCategoricalDomain,\n  PulseFilter,\n  PulseTimeDimension,\n} from '@tableau/api-external-contract-js';\nimport { ExecuteParameters, FilterUpdateType, ParameterId, PulseFieldValueArray, VerbId } from '@tableau/api-internal-contract-js';\nimport { ErrorHelpers, ServiceImplBase, TableauError } from '@tableau/api-shared-js';\nimport { ErrorCodes } from '../../../EmbeddingApi';\nimport { CategoricalPulseFilter } from '../../Models/PulseFilter';\nimport { EmbeddingServiceNames } from '../EmbeddingServiceNames';\nimport { PulseService } from '../PulseService';\n\nexport class PulseServiceImpl extends ServiceImplBase implements PulseService {\n  public get serviceName(): string {\n    return EmbeddingServiceNames.PulseService;\n  }\n\n  public applyFiltersAsync(\n    filters: Array<{\n      fieldName: string;\n      values: PulseFieldValueArray;\n      updateType: FilterUpdateType;\n      options: FilterOptions;\n    }>,\n  ): Promise<Array<string>> {\n    const verb = VerbId.ApplyPulseFilters;\n    const parameters: ExecuteParameters = {\n      [ParameterId.PulseFilters]: filters,\n    };\n\n    if (!Array.isArray(filters)) {\n      throw new TableauError(ErrorCodes.InvalidParameter, 'filters parameter for applyFiltersAsync must be an array');\n    }\n\n    for (const filter of filters) {\n      if (!Array.isArray(filter.values)) {\n        throw new TableauError(ErrorCodes.InvalidParameter, 'filter values for applyFiltersAsync must be an array');\n      }\n\n      if (!filter.updateType || !Object.values(FilterUpdateType).includes(filter.updateType)) {\n        throw new TableauError(ErrorCodes.InvalidParameter, 'filter updateType for applyFiltersAsync must be a valid update type');\n      }\n\n      if (!filter.options) {\n        throw new TableauError(ErrorCodes.InvalidParameter, 'filter options object for applyFiltersAsync must be provided');\n      }\n\n      if (![true, false].includes(filter.options.isExcludeMode)) {\n        throw new TableauError(ErrorCodes.InvalidParameter, 'filter options.isExcludeMode for applyFiltersAsync must be a boolean');\n      }\n    }\n\n    return this.execute(verb, parameters).then<Array<string>>((_) => {\n      return filters.map((f) => f.fieldName);\n    });\n  }\n\n  public getTimeDimensionAsync(): Promise<PulseTimeDimension> {\n    const verb = VerbId.GetPulseTimeDimension;\n    const parameters: ExecuteParameters = {};\n\n    return this.execute(verb, parameters).then<PulseTimeDimension>((response) => {\n      const { timeDimension } = response.result as { timeDimension: PulseTimeDimension | undefined };\n      if (!timeDimension) {\n        throw new TableauError(ErrorCodes.InvalidTimeDimension, 'Unable to determine the currently applied time dimension.');\n      }\n\n      if (!ErrorHelpers.isValidEnumValue<PulseTimeDimension>(timeDimension, PulseTimeDimension)) {\n        const sentences = [\n          `The current time dimension is '${timeDimension}', which is not a known value of the Contract.PulseTimeDimension enum.`,\n          'You may need to update your version of the Tableau Embedding API.',\n          `Valid values are: ${Object.keys(PulseTimeDimension).join(', ')}`,\n        ];\n        console.warn(sentences.join(' '));\n      }\n\n      return timeDimension;\n    });\n  }\n\n  public applyTimeDimensionAsync(timeDimension: PulseTimeDimension): Promise<void> {\n    ErrorHelpers.verifyEnumValue<PulseTimeDimension>(timeDimension, PulseTimeDimension, 'Contract.PulseTimeDimension');\n\n    const verb = VerbId.ApplyPulseTimeDimension;\n    const parameters: ExecuteParameters = {\n      [ParameterId.PulseTimeDimension]: timeDimension,\n    };\n\n    return this.execute(verb, parameters).then<void>((_) => {\n      return;\n    });\n  }\n\n  public getCategoricalDomainAsync(\n    fieldName: string,\n    domainType: FilterDomainType,\n    searchTerm: string,\n    pageSize: number | undefined,\n    nextPageToken: string | undefined,\n  ): Promise<PulseCategoricalDomain> {\n    ErrorHelpers.verifyStringParameter(fieldName, 'fieldName');\n    ErrorHelpers.verifyEnumValue<FilterDomainType>(domainType, FilterDomainType, 'Contract.FilterDomainType');\n\n    const verb = VerbId.GetPulseCategoricalDomain;\n    const parameters: ExecuteParameters = {\n      [ParameterId.PulseFieldName]: fieldName,\n      [ParameterId.PulseFilterDomainType]: domainType,\n      [ParameterId.PulseFilterDomainSearchTerm]: searchTerm,\n    };\n\n    if (pageSize !== undefined) {\n      parameters[ParameterId.PulsePageSize] = pageSize;\n    }\n\n    if (nextPageToken !== undefined) {\n      parameters[ParameterId.PulseNextPageToken] = nextPageToken;\n    }\n\n    return this.execute(verb, parameters).then<PulseCategoricalDomain>((response) => {\n      const domain = response.result as PulseCategoricalDomain;\n      return domain;\n    });\n  }\n\n  public getFiltersAsync(): Promise<Array<PulseFilter>> {\n    const verb = VerbId.GetPulseFilters;\n    const parameters: ExecuteParameters = {};\n\n    return this.execute(verb, parameters).then<Array<PulseFilter>>((response) => {\n      const filters = response.result as Array<PulseFilter>;\n      return this.convertDomainFilters(filters);\n    });\n  }\n\n  public clearFiltersAsync(fieldNames: Array<string>): Promise<Array<string>> {\n    const verb = VerbId.ClearPulseFilters;\n    const parameters: ExecuteParameters = {\n      [ParameterId.PulseFieldNames]: fieldNames,\n    };\n\n    if (!Array.isArray(fieldNames)) {\n      throw new TableauError(ErrorCodes.InvalidParameter, 'fieldNames parameter for clearFiltersAsync must be an array');\n    }\n\n    return this.execute(verb, parameters).then<Array<string>>((_) => {\n      return fieldNames;\n    });\n  }\n\n  public clearAllFiltersAsync(): Promise<void> {\n    const verb = VerbId.ClearAllPulseFilters;\n    const parameters: ExecuteParameters = {};\n\n    return this.execute(verb, parameters).then<void>((_) => {\n      return;\n    });\n  }\n\n  private convertDomainFilters(domainFilters: Array<PulseFilter>): Array<PulseFilter> {\n    const filters: Array<PulseFilter> = [];\n    domainFilters.forEach((domainFilter) => {\n      switch (domainFilter.filterType) {\n        case FilterType.Categorical: {\n          const filter = domainFilter as CategoricalPulseFilter;\n          if (filter) {\n            filters.push(this.convertCategoricalFilter(filter));\n          } else {\n            throw new Error('Invalid Categorical Filter');\n          }\n          break;\n        }\n        default: {\n          break;\n        }\n      }\n    });\n    return filters;\n  }\n\n  private convertCategoricalFilter(domainFilter: CategoricalPulseFilter): CategoricalPulseFilter {\n    return new CategoricalPulseFilter(\n      domainFilter.fieldName,\n      domainFilter.metricId,\n      FilterType.Categorical,\n      this._registryId,\n      domainFilter.appliedValues,\n      domainFilter.isExcludeMode,\n      domainFilter.isAllSelected,\n    );\n  }\n}\n"]}