{"version":3,"file":"PulseService.js","sourceRoot":"","sources":["../../../../src/EmbeddingApi/Services/PulseService.ts"],"names":[],"mappings":"","sourcesContent":["import {\n  FilterDomainType,\n  FilterOptions,\n  FilterUpdateType,\n  PulseCategoricalDomain,\n  PulseFieldValueArray,\n  PulseFilter,\n  PulseTimeDimension,\n} from '@tableau/api-external-contract-js';\nimport { ApiService } from '@tableau/api-shared-js/src/ApiShared/Services/ServiceRegistry';\n\n/**\n * Service for using Pulse\n *\n * @interface PulseService\n * @extends {PulseService}\n */\nexport interface PulseService extends ApiService {\n  /**\n   * Applies at least one categorical filter\n   *\n   * @param {Array<{\n   *       fieldName: string;\n   *       values: PulseFieldValueArray;\n   *       updateType: FilterUpdateType;\n   *       options: FilterOptions;\n   *     }>} filters The set of filters to apply\n   * @returns The field names that the filter was applied on\n   */\n  applyFiltersAsync(\n    filters: Array<{\n      fieldName: string;\n      values: PulseFieldValueArray;\n      updateType: FilterUpdateType;\n      options: FilterOptions;\n    }>,\n  ): Promise<Array<string>>;\n\n  /**\n   * Gets the current time dimension applied to the Pulse metric.\n   *\n   * @returns The current time dimension.\n   */\n  getTimeDimensionAsync(): Promise<PulseTimeDimension>;\n\n  /**\n   * Applies the time dimension to the Pulse metric.\n   *\n   * @param {PulseTimeDimension} timeDimension The time dimension to apply\n   * @returns {Promise<void>}\n   */\n  applyTimeDimensionAsync(timeDimension: PulseTimeDimension): Promise<void>;\n\n  /**\n   * Gets the domain of a categorical filter.\n   *\n   * @param {string} fieldName the field name of the filter.\n   * @param {FilterDomainType} domainType the domain type name of the filter.\n   * @param {string} searchTerm The term to search for in the domain.\n   * @param {string} pageSize The maximum number of values to return. Ignored when nextPageToken is not provided.\n   * @param {(string | undefined)} nextPageToken The next page token returned by Pulse when additional values are available.\n   * @returns {Promise<PulseCategoricalDomain>} A promise containing the categorical domain for the filter.\n   */\n  getCategoricalDomainAsync(\n    fieldName: string,\n    domainType: FilterDomainType,\n    searchTerm: string,\n    pageSize: number | undefined,\n    nextPageToken: string | undefined,\n  ): Promise<PulseCategoricalDomain>;\n\n  /**\n   * Gets a list of filters for the provided Pulse metric.\n   *\n   * @returns {Promise<Array<PulseFilter>>} The list of filters.\n   */\n  getFiltersAsync(): Promise<Array<PulseFilter>>;\n\n  /**\n   * Clears the filters for the provided fields\n   *\n   * @param {Array<string>} fieldNames The field names of the filters to clear\n   * @returns The field names for which the filters were cleared\n   */\n  clearFiltersAsync(fieldNames: Array<string>): Promise<Array<string>>;\n\n  /**\n   * Resets all the existing filters on the Pulse metric.\n   */\n  clearAllFiltersAsync(): Promise<void>;\n}\n"]}