import { FilterDomainType, FilterOptions, FilterUpdateType, PulseCategoricalDomain, PulseFieldValueArray, PulseFilter, PulseTimeDimension } from '@tableau/api-external-contract-js';
import { ApiService } from '@tableau/api-shared-js/src/ApiShared/Services/ServiceRegistry';
/**
 * Service for using Pulse
 *
 * @interface PulseService
 * @extends {PulseService}
 */
export interface PulseService extends ApiService {
    /**
     * Applies at least one categorical filter
     *
     * @param {Array<{
     *       fieldName: string;
     *       values: PulseFieldValueArray;
     *       updateType: FilterUpdateType;
     *       options: FilterOptions;
     *     }>} filters The set of filters to apply
     * @returns The field names that the filter was applied on
     */
    applyFiltersAsync(filters: Array<{
        fieldName: string;
        values: PulseFieldValueArray;
        updateType: FilterUpdateType;
        options: FilterOptions;
    }>): Promise<Array<string>>;
    /**
     * Gets the current time dimension applied to the Pulse metric.
     *
     * @returns The current time dimension.
     */
    getTimeDimensionAsync(): Promise<PulseTimeDimension>;
    /**
     * Applies the time dimension to the Pulse metric.
     *
     * @param {PulseTimeDimension} timeDimension The time dimension to apply
     * @returns {Promise<void>}
     */
    applyTimeDimensionAsync(timeDimension: PulseTimeDimension): Promise<void>;
    /**
     * Gets the domain of a categorical filter.
     *
     * @param {string} fieldName the field name of the filter.
     * @param {FilterDomainType} domainType the domain type name of the filter.
     * @param {string} searchTerm The term to search for in the domain.
     * @param {string} pageSize The maximum number of values to return. Ignored when nextPageToken is not provided.
     * @param {(string | undefined)} nextPageToken The next page token returned by Pulse when additional values are available.
     * @returns {Promise<PulseCategoricalDomain>} A promise containing the categorical domain for the filter.
     */
    getCategoricalDomainAsync(fieldName: string, domainType: FilterDomainType, searchTerm: string, pageSize: number | undefined, nextPageToken: string | undefined): Promise<PulseCategoricalDomain>;
    /**
     * Gets a list of filters for the provided Pulse metric.
     *
     * @returns {Promise<Array<PulseFilter>>} The list of filters.
     */
    getFiltersAsync(): Promise<Array<PulseFilter>>;
    /**
     * Clears the filters for the provided fields
     *
     * @param {Array<string>} fieldNames The field names of the filters to clear
     * @returns The field names for which the filters were cleared
     */
    clearFiltersAsync(fieldNames: Array<string>): Promise<Array<string>>;
    /**
     * Resets all the existing filters on the Pulse metric.
     */
    clearAllFiltersAsync(): Promise<void>;
}
//# sourceMappingURL=PulseService.d.ts.map