import * as Contract from '@tableau/api-external-contract-js';
import { TableauDialogType } from '@tableau/api-external-contract-js/lib/src/ExternalContract/Embedding/Enums';
import { TableauVizBase } from '../Components/TableauVizBase';
import { EmbeddingWorkbookImpl } from '../Impl/EmbeddingWorkbookImpl';
export declare class VizImpl {
    private _viz;
    private _iframe;
    private _frameUrl;
    private _embeddingId;
    private _workbookImpl;
    private _vizSize;
    private _automaticUpdatesArePaused;
    private _dispatcher;
    private _messenger;
    private readonly _resizeEventType;
    private _windowResizeHandler?;
    private _customViewsTemp;
    constructor(_viz: TableauVizBase, _iframe: HTMLIFrameElement, _frameUrl: URL, _embeddingId: number);
    get workbookImpl(): EmbeddingWorkbookImpl;
    get iframe(): HTMLIFrameElement;
    get embeddingId(): number;
    private get exportScenariosForPdfAndPowerPoint();
    private get exportableSheetNamesFromDashboard();
    private get exportableSheetNamesFromWorkbook();
    get automaticUpdatesArePaused(): boolean;
    set automaticUpdatesArePaused(isAutoUpdate: boolean);
    private getVisualIdForSheetName;
    private get exportableWorksheetNames();
    initializeViz(): void;
    dispose(): void;
    getCurrentSrcAsync(): Promise<string>;
    revertAllAsync(): Promise<void>;
    redoAsync(): Promise<void>;
    undoAsync(): Promise<void>;
    refreshDataAsync(): Promise<void>;
    pauseAutomaticUpdatesAsync(): Promise<void>;
    resumeAutomaticUpdatesAsync(): Promise<void>;
    toggleAutomaticUpdatesAsync(): Promise<void>;
    exportImageAsync(): Promise<void>;
    exportCrosstabAsync(sheetName: string, format: Contract.CrosstabFileFormat): Promise<void>;
    exportDataAsync(sheetName: string, options?: Contract.ExportDataOptions): Promise<void>;
    exportPowerPointAsync(sheetNames?: Array<string>): Promise<void>;
    exportPDFAsync(sheetNames?: Array<string>, options?: Contract.ExportPDFOptions): Promise<void>;
    displayDialogAsync(dialogType: TableauDialogType): Promise<void>;
    setAuthToken(token: string): void;
    private setAutoUpdateAsync;
    private isVersionCompatible;
    private updateIframeTitle;
    private handleVizInteractiveEvent;
    private handleVizSizeKnownEvent;
    resize(): void;
    private calculateLayoutSize;
    private removeWindowResizeHandler;
    private addWindowResizeHandler;
    private handleToolbarStateEvent;
    private handleTabSwitch;
    private handleCustomViews;
    private handleCustomViewRemoved;
    private handleCustomViewSaved;
    private handleCustomViewSetDefault;
    private sendCustomViewEvents;
}
//# sourceMappingURL=VizImpl.d.ts.map