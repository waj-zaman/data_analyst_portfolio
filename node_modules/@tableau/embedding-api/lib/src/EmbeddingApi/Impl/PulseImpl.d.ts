import * as Contract from '@tableau/api-external-contract-js';
import { TableauPulse } from '../Components/TableauPulse';
export declare class PulseImpl {
    private _pulse;
    private _iframe;
    private _frameUrl;
    private _timeDimension;
    private _filters;
    private _embeddingId;
    private _dispatcher;
    private _messenger;
    private readonly _resizeEventType;
    private _windowResizeHandler?;
    private _shouldDispatchMetricSizeKnownEvent;
    constructor(_pulse: TableauPulse, _iframe: HTMLIFrameElement, _frameUrl: URL, _timeDimension: Contract.PulseTimeDimension | undefined, _filters: Array<Contract.FilterParameters>, _embeddingId: number);
    get iframe(): HTMLIFrameElement;
    get embeddingId(): number;
    initialize(): void;
    dispose(): void;
    private updateIframeTitle;
    private handlePulseMetricSizeKnownEvent;
    resize(): void;
    private calculateLayoutSize;
    private removeWindowResizeHandler;
    private addWindowResizeHandler;
    private handlePulseInteractiveEvent;
    private handlePulseErrorEvent;
    private handlePulseUrlChangedEvent;
    private handlePulseTimeDimensionChangedEvent;
    private handlePulseInsightDiscoveredEvent;
    private handlePulseFiltersChangedEvent;
    applyFiltersAsync(filters: Array<{
        fieldName: string;
        values: Contract.PulseFieldValueArray;
        updateType: Contract.FilterUpdateType;
        options: Contract.FilterOptions;
    }>): Promise<Array<string>>;
    getTimeDimensionAsync(): Promise<Contract.PulseTimeDimension>;
    applyTimeDimensionAsync(timeDimension: Contract.PulseTimeDimension): Promise<void>;
    getFiltersAsync(): Promise<Array<Contract.PulseFilter>>;
    clearFiltersAsync(fieldNames: Array<string>): Promise<Array<string>>;
    clearAllFiltersAsync(): Promise<void>;
}
//# sourceMappingURL=PulseImpl.d.ts.map