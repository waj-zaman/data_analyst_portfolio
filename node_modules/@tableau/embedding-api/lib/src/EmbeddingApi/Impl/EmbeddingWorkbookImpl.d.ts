import { CustomViewInfoModel, EmbeddingBootstrapInfo, NotificationId } from '@tableau/api-internal-contract-js';
import { CustomViewImpl, ParameterImpl, SheetImpl, SheetInfoImpl, WorkbookImpl } from '@tableau/api-shared-js';
export declare class EmbeddingWorkbookImpl extends WorkbookImpl {
    private _registryId;
    private _name;
    private _publishedSheetsInfo;
    private _activeSheetImpl;
    private _canDownloadWorkbook;
    private _pendingTabSwitchPromise;
    private _pendingShowCustomViewPromise;
    private _customViews;
    private _currentCustomView;
    constructor(bootstrapInfo: EmbeddingBootstrapInfo, _registryId: number);
    get activeSheet(): SheetImpl;
    get publishedSheetsInfo(): Array<SheetInfoImpl>;
    get name(): string;
    get canDownloadWorkbook(): boolean;
    get pendingTabSwitchPromise(): {
        resolve: (response: WorkbookImpl) => void;
        reject: (error: any) => void;
    };
    get pendingShowCustomViewPromise(): {
        resolve: (response: CustomViewImpl | undefined) => void;
        reject: (error: any) => void;
    } | undefined;
    clearPendingShowCustomViewPromise(): void;
    get activeCustomView(): CustomViewImpl | undefined;
    activateSheetAsync(sheetNameOrIndex: string | number): Promise<WorkbookImpl>;
    getParametersAsync(): Promise<Array<ParameterImpl>>;
    changeParameterValueAsync(name: string, value: string | number | boolean | Date): Promise<ParameterImpl | undefined>;
    updateExistingActiveSheetReferences(newSheetName: string): void;
    /**
     *
     * This method is responsible for processing custom views from Tableau. It does two things:
     * First, finds out what's the diff between our local cache & the incoming set of custom views depending on the notification
     * Then, updates the local cache
     *
     * @param customViewNotification
     * @param customViewsInfo
     * @returns The updated {@link CustomViewImpl}
     */
    processCustomViews(customViewNotification: NotificationId, customViewsInfo: CustomViewInfoModel): Array<CustomViewImpl>;
    private refreshCustomViewCache;
    revertAllAsync(): Promise<void>;
    getCustomViewsAsync(): Promise<Array<CustomViewImpl>>;
    showCustomViewAsync(customViewName?: string | null): Promise<CustomViewImpl | undefined>;
    removeCustomViewAsync(customViewName: string): Promise<CustomViewImpl>;
    saveCustomViewAsync(customViewName: string): Promise<CustomViewImpl>;
    setActiveCustomViewAsDefaultAsync(): Promise<void>;
    private initializeWorkbook;
    private convertSheetIndexToSheetName;
    private validatePublishedSheet;
    private verifyDashboardSheets;
}
//# sourceMappingURL=EmbeddingWorkbookImpl.d.ts.map