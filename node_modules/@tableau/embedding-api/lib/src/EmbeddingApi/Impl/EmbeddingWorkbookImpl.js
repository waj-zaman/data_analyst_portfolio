"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const Contract = __importStar(require("@tableau/api-external-contract-js"));
const api_internal_contract_js_1 = require("@tableau/api-internal-contract-js");
const api_shared_js_1 = require("@tableau/api-shared-js");
class EmbeddingWorkbookImpl extends api_shared_js_1.WorkbookImpl {
    constructor(bootstrapInfo, _registryId) {
        super();
        this._registryId = _registryId;
        this._publishedSheetsInfo = [];
        this._customViews = new Map();
        this._name = bootstrapInfo.workbookName;
        this._canDownloadWorkbook = bootstrapInfo.canDownloadWorkbook;
        this.initializeWorkbook(bootstrapInfo);
    }
    get activeSheet() {
        return this._activeSheetImpl;
    }
    get publishedSheetsInfo() {
        return this._publishedSheetsInfo;
    }
    get name() {
        return this._name;
    }
    get canDownloadWorkbook() {
        return this._canDownloadWorkbook;
    }
    get pendingTabSwitchPromise() {
        return this._pendingTabSwitchPromise;
    }
    get pendingShowCustomViewPromise() {
        return this._pendingShowCustomViewPromise;
    }
    clearPendingShowCustomViewPromise() {
        this._pendingShowCustomViewPromise = undefined;
    }
    get activeCustomView() {
        return this._currentCustomView;
    }
    activateSheetAsync(sheetNameOrIndex) {
        api_shared_js_1.ErrorHelpers.verifyParameter(sheetNameOrIndex, 'sheetNameOrIndex');
        let sheetName = this.convertSheetIndexToSheetName(sheetNameOrIndex);
        api_shared_js_1.ErrorHelpers.verifyParameterType(sheetName, 'string', 'sheetNameOrIndex');
        if (!this.validatePublishedSheet(sheetName)) {
            this.verifyDashboardSheets(sheetName);
        }
        // Check to see if the sheet is already active.
        if (this._activeSheetImpl && sheetName === this._activeSheetImpl.name) {
            return new Promise((resolve, reject) => {
                resolve(this);
            });
        }
        const service = api_shared_js_1.ApiServiceRegistry.get(this._registryId).getService("viz-service" /* Viz */);
        service.activateSheetAsync(sheetName);
        let promise = new Promise((resolve, reject) => {
            // `this._pendingTabSwitchPromise` will be resolved when `TabSwitchedEvent` is fired.
            this._pendingTabSwitchPromise = { resolve: resolve, reject: reject };
        });
        return promise;
    }
    getParametersAsync() {
        const service = api_shared_js_1.ApiServiceRegistry.get(this._registryId).getService("parameters-service" /* Parameters */);
        return service.getAllParametersAsync();
    }
    changeParameterValueAsync(name, value) {
        return __awaiter(this, void 0, void 0, function* () {
            api_shared_js_1.ErrorHelpers.verifyParameter(name, 'parameterName');
            const service = api_shared_js_1.ApiServiceRegistry.get(this._registryId).getService("parameters-service" /* Parameters */);
            const parameter = yield service.findParameterByNameAsync(name);
            if (parameter) {
                return parameter.changeValueAsync(value).then(() => {
                    return parameter;
                });
            }
            else {
                return undefined;
            }
        });
    }
    updateExistingActiveSheetReferences(newSheetName) {
        if (this._activeSheetImpl) {
            // No need to do anything if we're already on the current sheet.
            if (this._activeSheetImpl.name === newSheetName) {
                return;
            }
            this._activeSheetImpl.active = false;
            this._publishedSheetsInfo.forEach((sheetInfo, index) => {
                if (sheetInfo.name === this._activeSheetImpl.name) {
                    sheetInfo.active = false;
                }
            });
        }
    }
    /**
     *
     * This method is responsible for processing custom views from Tableau. It does two things:
     * First, finds out what's the diff between our local cache & the incoming set of custom views depending on the notification
     * Then, updates the local cache
     *
     * @param customViewNotification
     * @param customViewsInfo
     * @returns The updated {@link CustomViewImpl}
     */
    processCustomViews(customViewNotification, customViewsInfo) {
        var _a;
        const currentCustomViewLuid = (_a = customViewsInfo.currentView) === null || _a === void 0 ? void 0 : _a.luid;
        let updatedCustomViews = [];
        // For CustomViewsLoaded, set the updatedCustomView to the currently active one
        // For CustomViewRemoved, CustomViewSaved & CustomViewSetDefault find the corresponding one from the cache
        // before updating the cache with the incoming set
        switch (customViewNotification) {
            case api_internal_contract_js_1.NotificationId.CustomViewsLoaded:
            case api_internal_contract_js_1.NotificationId.CustomViewSaved: {
                this.refreshCustomViewCache(customViewsInfo);
                if (currentCustomViewLuid) {
                    const customView = this._customViews.get(currentCustomViewLuid);
                    if (customView) {
                        updatedCustomViews.push(customView);
                    }
                }
                break;
            }
            case api_internal_contract_js_1.NotificationId.CustomViewRemoved: {
                let oldCustomViews = new Map(this._customViews);
                this._customViews.clear();
                customViewsInfo.customViewsList.map((customView) => {
                    this._customViews.set(customView.luid, new api_shared_js_1.CustomViewImpl(customView, this._registryId));
                    oldCustomViews.delete(customView.luid);
                });
                for (let removedCustomView of oldCustomViews.values()) {
                    updatedCustomViews.push(removedCustomView);
                }
                break;
            }
            case api_internal_contract_js_1.NotificationId.CustomViewSetDefault: {
                this.refreshCustomViewCache(customViewsInfo);
                const defaultCustomView = customViewsInfo.customViewsList.find((customView) => customView.isDefault);
                if (defaultCustomView) {
                    updatedCustomViews.push(new api_shared_js_1.CustomViewImpl(defaultCustomView, this._registryId));
                }
                break;
            }
        }
        // If there's an active custom view, update currentCustomView else clear it
        this._currentCustomView = currentCustomViewLuid ? this._customViews.get(currentCustomViewLuid) : undefined;
        return updatedCustomViews;
    }
    refreshCustomViewCache(customViewsInfo) {
        this._customViews.clear();
        customViewsInfo.customViewsList.map((customView) => {
            this._customViews.set(customView.luid, new api_shared_js_1.CustomViewImpl(customView, this._registryId));
        });
    }
    revertAllAsync() {
        const service = api_shared_js_1.ApiServiceRegistry.get(this._registryId).getService("ToolbarService" /* ToolbarService */);
        return service.revertAllAsync();
    }
    getCustomViewsAsync() {
        const service = api_shared_js_1.ApiServiceRegistry.get(this._registryId).getService("viz-service" /* Viz */);
        return service.getCustomViewsAsync();
    }
    showCustomViewAsync(customViewName) {
        const service = api_shared_js_1.ApiServiceRegistry.get(this._registryId).getService("viz-service" /* Viz */);
        service.showCustomViewAsync(customViewName);
        let promise = new Promise((resolve, reject) => {
            // `this._pendingShowCustomViewPromise` will be resolved when `CustomViewsLoadedEvent` is fired.
            this._pendingShowCustomViewPromise = { resolve: resolve, reject: reject };
        });
        return promise;
    }
    removeCustomViewAsync(customViewName) {
        const service = api_shared_js_1.ApiServiceRegistry.get(this._registryId).getService("viz-service" /* Viz */);
        return service.removeCustomViewAsync(customViewName);
    }
    saveCustomViewAsync(customViewName) {
        const service = api_shared_js_1.ApiServiceRegistry.get(this._registryId).getService("viz-service" /* Viz */);
        return service.saveCustomViewAsync(customViewName);
    }
    setActiveCustomViewAsDefaultAsync() {
        const service = api_shared_js_1.ApiServiceRegistry.get(this._registryId).getService("viz-service" /* Viz */);
        return service.setActiveCustomViewAsDefaultAsync();
    }
    initializeWorkbook(bootstrapInfo) {
        bootstrapInfo.publishedSheets.forEach((publishedSheet, index) => {
            const sheetSize = api_shared_js_1.SheetUtils.getSheetSizeFromSizeConstraints(publishedSheet.sizeConstraint);
            const isActive = publishedSheet.name === bootstrapInfo.currWorksheetName;
            // Published sheets are not hidden
            const isHidden = false;
            const sheetType = api_shared_js_1.SheetUtils.getSheetTypeEnum(publishedSheet.sheetType);
            const sheetInfoImpl = new api_shared_js_1.SheetInfoImpl(publishedSheet.name, sheetType, sheetSize, index, isActive, isHidden, publishedSheet.url);
            this._publishedSheetsInfo.push(sheetInfoImpl);
            if (isActive) {
                switch (sheetInfoImpl.sheetType) {
                    case Contract.SheetType.Worksheet: {
                        const vizId = {
                            worksheet: sheetInfoImpl.name,
                        };
                        this._activeSheetImpl = new api_shared_js_1.WorksheetImpl(sheetInfoImpl, this._registryId, vizId, null, null);
                        break;
                    }
                    case Contract.SheetType.Dashboard: {
                        const sheetPath = {
                            sheetName: sheetInfoImpl.name,
                            isDashboard: true,
                        };
                        this._activeSheetImpl = new api_shared_js_1.DashboardImpl(sheetInfoImpl, bootstrapInfo.dashboardZones, sheetPath, this._registryId, null);
                        break;
                    }
                    case Contract.SheetType.Story: {
                        if (!bootstrapInfo.story) {
                            throw new api_shared_js_1.TableauError(Contract.SharedErrorCodes.ServerError, 'Unable to receive story information from Tableau');
                        }
                        this._activeSheetImpl = new api_shared_js_1.StoryImpl(sheetInfoImpl, bootstrapInfo.story, bootstrapInfo.publishedSheets, this._registryId);
                        break;
                    }
                    default: {
                        throw new api_shared_js_1.TableauError(Contract.SharedErrorCodes.ServerError, 'Invalid SheetType');
                    }
                }
            }
        });
    }
    convertSheetIndexToSheetName(sheetNameOrIndex) {
        if (typeof sheetNameOrIndex == 'number') {
            const sheetIndex = sheetNameOrIndex;
            if (this.publishedSheetsInfo[sheetIndex]) {
                return this.publishedSheetsInfo[sheetIndex].name;
            }
            else {
                throw new api_shared_js_1.TableauError(Contract.EmbeddingErrorCodes.IndexOutOfRange, `Index ${sheetIndex} is out of range.`);
            }
        }
        return sheetNameOrIndex;
    }
    validatePublishedSheet(sheetName) {
        const found = this.publishedSheetsInfo.find((sheetInfo) => sheetInfo.name === sheetName);
        return found !== undefined;
    }
    verifyDashboardSheets(sheetName) {
        if (this._activeSheetImpl.sheetType === Contract.SheetType.Dashboard) {
            let activeSheet = this._activeSheetImpl;
            let index = activeSheet.worksheetsImpl.findIndex((worksheetImpl) => {
                return worksheetImpl.name === sheetName;
            });
            if (index !== -1) {
                if (activeSheet.worksheetsImpl[index].hidden) {
                    throw new api_shared_js_1.TableauError(Contract.SharedErrorCodes.ServerError, 'Cannot activate hidden sheet');
                }
                return;
            }
        }
        throw new api_shared_js_1.TableauError(Contract.EmbeddingErrorCodes.SheetNotInWorkbook, 'Sheet is not found in Workbook');
    }
}
exports.EmbeddingWorkbookImpl = EmbeddingWorkbookImpl;
//# sourceMappingURL=EmbeddingWorkbookImpl.js.map