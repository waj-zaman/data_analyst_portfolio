{"version":3,"file":"EmbeddingWorkbookImpl.js","sourceRoot":"","sources":["../../../../src/EmbeddingApi/Impl/EmbeddingWorkbookImpl.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Contract from '@tableau/api-external-contract-js';\nimport {\n  CustomViewInfoModel,\n  EmbeddingBootstrapInfo,\n  EmbeddingSheetInfo,\n  NotificationId,\n  SheetPath,\n  VisualId,\n} from '@tableau/api-internal-contract-js';\nimport {\n  ApiServiceRegistry,\n  CustomViewImpl,\n  DashboardImpl,\n  ErrorHelpers,\n  ParameterImpl,\n  ParametersService,\n  ServiceNames,\n  SheetImpl,\n  SheetInfoImpl,\n  SheetUtils,\n  StoryImpl,\n  TableauError,\n  VizService,\n  WorkbookImpl,\n  WorksheetImpl,\n} from '@tableau/api-shared-js';\nimport { EmbeddingServiceNames, ToolbarService } from '../Services';\n\nexport class EmbeddingWorkbookImpl extends WorkbookImpl {\n  private _name: string;\n  private _publishedSheetsInfo: Array<SheetInfoImpl> = [];\n  private _activeSheetImpl: SheetImpl;\n  private _canDownloadWorkbook: boolean;\n  private _pendingTabSwitchPromise: { resolve: (response: WorkbookImpl) => void; reject: (error: any) => void };\n  private _pendingShowCustomViewPromise:\n    | { resolve: (response: CustomViewImpl | undefined) => void; reject: (error: any) => void }\n    | undefined;\n  private _customViews: Map<string, CustomViewImpl> = new Map<string, CustomViewImpl>();\n  private _currentCustomView: CustomViewImpl | undefined;\n  public constructor(bootstrapInfo: EmbeddingBootstrapInfo, private _registryId: number) {\n    super();\n    this._name = bootstrapInfo.workbookName;\n    this._canDownloadWorkbook = bootstrapInfo.canDownloadWorkbook;\n    this.initializeWorkbook(bootstrapInfo);\n  }\n\n  public get activeSheet(): SheetImpl {\n    return this._activeSheetImpl;\n  }\n\n  public get publishedSheetsInfo(): Array<SheetInfoImpl> {\n    return this._publishedSheetsInfo;\n  }\n\n  public get name(): string {\n    return this._name;\n  }\n\n  public get canDownloadWorkbook(): boolean {\n    return this._canDownloadWorkbook;\n  }\n\n  public get pendingTabSwitchPromise() {\n    return this._pendingTabSwitchPromise;\n  }\n\n  public get pendingShowCustomViewPromise() {\n    return this._pendingShowCustomViewPromise;\n  }\n\n  public clearPendingShowCustomViewPromise() {\n    this._pendingShowCustomViewPromise = undefined;\n  }\n\n  public get activeCustomView() {\n    return this._currentCustomView;\n  }\n\n  public activateSheetAsync(sheetNameOrIndex: string | number): Promise<WorkbookImpl> {\n    ErrorHelpers.verifyParameter(sheetNameOrIndex, 'sheetNameOrIndex');\n\n    let sheetName = this.convertSheetIndexToSheetName(sheetNameOrIndex);\n    ErrorHelpers.verifyParameterType(sheetName, 'string', 'sheetNameOrIndex');\n\n    if (!this.validatePublishedSheet(sheetName)) {\n      this.verifyDashboardSheets(sheetName);\n    }\n\n    // Check to see if the sheet is already active.\n    if (this._activeSheetImpl && sheetName === this._activeSheetImpl.name) {\n      return new Promise<WorkbookImpl>((resolve, reject) => {\n        resolve(this);\n      });\n    }\n\n    const service = ApiServiceRegistry.get(this._registryId).getService<VizService>(ServiceNames.Viz);\n    service.activateSheetAsync(sheetName);\n\n    let promise = new Promise<WorkbookImpl>((resolve, reject) => {\n      // `this._pendingTabSwitchPromise` will be resolved when `TabSwitchedEvent` is fired.\n      this._pendingTabSwitchPromise = { resolve: resolve, reject: reject };\n    });\n    return promise;\n  }\n\n  public getParametersAsync(): Promise<Array<ParameterImpl>> {\n    const service = ApiServiceRegistry.get(this._registryId).getService<ParametersService>(ServiceNames.Parameters);\n    return service.getAllParametersAsync();\n  }\n\n  public async changeParameterValueAsync(name: string, value: string | number | boolean | Date): Promise<ParameterImpl | undefined> {\n    ErrorHelpers.verifyParameter(name, 'parameterName');\n\n    const service = ApiServiceRegistry.get(this._registryId).getService<ParametersService>(ServiceNames.Parameters);\n    const parameter = await service.findParameterByNameAsync(name);\n    if (parameter) {\n      return parameter.changeValueAsync(value).then(() => {\n        return parameter;\n      });\n    } else {\n      return undefined;\n    }\n  }\n\n  public updateExistingActiveSheetReferences(newSheetName: string) {\n    if (this._activeSheetImpl) {\n      // No need to do anything if we're already on the current sheet.\n      if (this._activeSheetImpl.name === newSheetName) {\n        return;\n      }\n\n      this._activeSheetImpl.active = false;\n\n      this._publishedSheetsInfo.forEach((sheetInfo: SheetInfoImpl, index: number) => {\n        if (sheetInfo.name === this._activeSheetImpl.name) {\n          sheetInfo.active = false;\n        }\n      });\n    }\n  }\n\n  /**\n   *\n   * This method is responsible for processing custom views from Tableau. It does two things:\n   * First, finds out what's the diff between our local cache & the incoming set of custom views depending on the notification\n   * Then, updates the local cache\n   *\n   * @param customViewNotification\n   * @param customViewsInfo\n   * @returns The updated {@link CustomViewImpl}\n   */\n  public processCustomViews(customViewNotification: NotificationId, customViewsInfo: CustomViewInfoModel): Array<CustomViewImpl> {\n    const currentCustomViewLuid = customViewsInfo.currentView?.luid;\n    let updatedCustomViews: Array<CustomViewImpl> = [];\n\n    // For CustomViewsLoaded, set the updatedCustomView to the currently active one\n    // For CustomViewRemoved, CustomViewSaved & CustomViewSetDefault find the corresponding one from the cache\n    // before updating the cache with the incoming set\n    switch (customViewNotification) {\n      case NotificationId.CustomViewsLoaded:\n      case NotificationId.CustomViewSaved: {\n        this.refreshCustomViewCache(customViewsInfo);\n        if (currentCustomViewLuid) {\n          const customView = this._customViews.get(currentCustomViewLuid);\n          if (customView) {\n            updatedCustomViews.push(customView);\n          }\n        }\n        break;\n      }\n      case NotificationId.CustomViewRemoved: {\n        let oldCustomViews: Map<string, CustomViewImpl> = new Map(this._customViews);\n        this._customViews.clear();\n        customViewsInfo.customViewsList.map((customView) => {\n          this._customViews.set(customView.luid, new CustomViewImpl(customView, this._registryId));\n          oldCustomViews.delete(customView.luid);\n        });\n\n        for (let removedCustomView of oldCustomViews.values()) {\n          updatedCustomViews.push(removedCustomView);\n        }\n        break;\n      }\n      case NotificationId.CustomViewSetDefault: {\n        this.refreshCustomViewCache(customViewsInfo);\n        const defaultCustomView = customViewsInfo.customViewsList.find((customView) => customView.isDefault);\n        if (defaultCustomView) {\n          updatedCustomViews.push(new CustomViewImpl(defaultCustomView, this._registryId));\n        }\n        break;\n      }\n    }\n\n    // If there's an active custom view, update currentCustomView else clear it\n    this._currentCustomView = currentCustomViewLuid ? this._customViews.get(currentCustomViewLuid) : undefined;\n\n    return updatedCustomViews;\n  }\n\n  private refreshCustomViewCache(customViewsInfo: CustomViewInfoModel) {\n    this._customViews.clear();\n    customViewsInfo.customViewsList.map((customView) => {\n      this._customViews.set(customView.luid, new CustomViewImpl(customView, this._registryId));\n    });\n  }\n\n  public revertAllAsync(): Promise<void> {\n    const service = ApiServiceRegistry.get(this._registryId).getService<ToolbarService>(EmbeddingServiceNames.ToolbarService);\n    return service.revertAllAsync();\n  }\n\n  public getCustomViewsAsync(): Promise<Array<CustomViewImpl>> {\n    const service = ApiServiceRegistry.get(this._registryId).getService<VizService>(ServiceNames.Viz);\n    return service.getCustomViewsAsync();\n  }\n\n  public showCustomViewAsync(customViewName?: string | null): Promise<CustomViewImpl | undefined> {\n    const service = ApiServiceRegistry.get(this._registryId).getService<VizService>(ServiceNames.Viz);\n\n    service.showCustomViewAsync(customViewName);\n\n    let promise = new Promise<CustomViewImpl | undefined>((resolve, reject) => {\n      // `this._pendingShowCustomViewPromise` will be resolved when `CustomViewsLoadedEvent` is fired.\n      this._pendingShowCustomViewPromise = { resolve: resolve, reject: reject };\n    });\n\n    return promise;\n  }\n\n  public removeCustomViewAsync(customViewName: string): Promise<CustomViewImpl> {\n    const service = ApiServiceRegistry.get(this._registryId).getService<VizService>(ServiceNames.Viz);\n    return service.removeCustomViewAsync(customViewName);\n  }\n\n  public saveCustomViewAsync(customViewName: string): Promise<CustomViewImpl> {\n    const service = ApiServiceRegistry.get(this._registryId).getService<VizService>(ServiceNames.Viz);\n    return service.saveCustomViewAsync(customViewName);\n  }\n\n  public setActiveCustomViewAsDefaultAsync(): Promise<void> {\n    const service = ApiServiceRegistry.get(this._registryId).getService<VizService>(ServiceNames.Viz);\n    return service.setActiveCustomViewAsDefaultAsync();\n  }\n\n  private initializeWorkbook(bootstrapInfo: EmbeddingBootstrapInfo): void {\n    bootstrapInfo.publishedSheets.forEach((publishedSheet: EmbeddingSheetInfo, index: number) => {\n      const sheetSize: Contract.SheetSize = SheetUtils.getSheetSizeFromSizeConstraints(publishedSheet.sizeConstraint);\n\n      const isActive = publishedSheet.name === bootstrapInfo.currWorksheetName;\n\n      // Published sheets are not hidden\n      const isHidden = false;\n      const sheetType = SheetUtils.getSheetTypeEnum(publishedSheet.sheetType);\n\n      const sheetInfoImpl: SheetInfoImpl = new SheetInfoImpl(\n        publishedSheet.name,\n        sheetType,\n        sheetSize,\n        index,\n        isActive,\n        isHidden,\n        publishedSheet.url,\n      );\n\n      this._publishedSheetsInfo.push(sheetInfoImpl);\n      if (isActive) {\n        switch (sheetInfoImpl.sheetType) {\n          case Contract.SheetType.Worksheet: {\n            const vizId: VisualId = {\n              worksheet: sheetInfoImpl.name,\n            };\n\n            this._activeSheetImpl = new WorksheetImpl(sheetInfoImpl, this._registryId, vizId, null, null);\n            break;\n          }\n          case Contract.SheetType.Dashboard: {\n            const sheetPath: SheetPath = {\n              sheetName: sheetInfoImpl.name,\n              isDashboard: true,\n            };\n\n            this._activeSheetImpl = new DashboardImpl(sheetInfoImpl, bootstrapInfo.dashboardZones, sheetPath, this._registryId, null);\n            break;\n          }\n          case Contract.SheetType.Story: {\n            if (!bootstrapInfo.story) {\n              throw new TableauError(Contract.SharedErrorCodes.ServerError, 'Unable to receive story information from Tableau');\n            }\n\n            this._activeSheetImpl = new StoryImpl(sheetInfoImpl, bootstrapInfo.story, bootstrapInfo.publishedSheets, this._registryId);\n            break;\n          }\n          default: {\n            throw new TableauError(Contract.SharedErrorCodes.ServerError, 'Invalid SheetType');\n          }\n        }\n      }\n    });\n  }\n\n  private convertSheetIndexToSheetName(sheetNameOrIndex: string | number): string {\n    if (typeof sheetNameOrIndex == 'number') {\n      const sheetIndex = sheetNameOrIndex;\n      if (this.publishedSheetsInfo[sheetIndex]) {\n        return this.publishedSheetsInfo[sheetIndex].name;\n      } else {\n        throw new TableauError(Contract.EmbeddingErrorCodes.IndexOutOfRange, `Index ${sheetIndex} is out of range.`);\n      }\n    }\n    return sheetNameOrIndex;\n  }\n\n  private validatePublishedSheet(sheetName: string): boolean {\n    const found = this.publishedSheetsInfo.find((sheetInfo) => sheetInfo.name === sheetName);\n    return found !== undefined;\n  }\n\n  private verifyDashboardSheets(sheetName: string): void {\n    if (this._activeSheetImpl.sheetType === Contract.SheetType.Dashboard) {\n      let activeSheet = this._activeSheetImpl as DashboardImpl;\n      let index = activeSheet.worksheetsImpl.findIndex((worksheetImpl) => {\n        return worksheetImpl.name === sheetName;\n      });\n      if (index !== -1) {\n        if (activeSheet.worksheetsImpl[index].hidden) {\n          throw new TableauError(Contract.SharedErrorCodes.ServerError, 'Cannot activate hidden sheet');\n        }\n        return;\n      }\n    }\n    throw new TableauError(Contract.EmbeddingErrorCodes.SheetNotInWorkbook, 'Sheet is not found in Workbook');\n  }\n}\n"]}