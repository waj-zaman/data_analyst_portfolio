"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const Contract = __importStar(require("@tableau/api-external-contract-js"));
const api_internal_contract_js_1 = require("@tableau/api-internal-contract-js");
const api_shared_js_1 = require("@tableau/api-shared-js");
const FirstPulseMetricSizeKnownEvent_1 = require("../Events/FirstPulseMetricSizeKnownEvent");
const PulseErrorEvent_1 = require("../Events/PulseErrorEvent");
const PulseFiltersChangedEvent_1 = require("../Events/PulseFiltersChangedEvent");
const PulseInsightDiscoveredEvent_1 = require("../Events/PulseInsightDiscoveredEvent");
const PulseTimeDimensionChangedEvent_1 = require("../Events/PulseTimeDimensionChangedEvent");
const PulseUrlChangedEvent_1 = require("../Events/PulseUrlChangedEvent");
const Services_1 = require("../Services");
const PulseServiceImpl_1 = require("../Services/Impl/PulseServiceImpl");
const HtmlElementHelpers_1 = require("../Utils/HtmlElementHelpers");
class PulseImpl {
    constructor(_pulse, _iframe, _frameUrl, _timeDimension, _filters, _embeddingId) {
        this._pulse = _pulse;
        this._iframe = _iframe;
        this._frameUrl = _frameUrl;
        this._timeDimension = _timeDimension;
        this._filters = _filters;
        this._embeddingId = _embeddingId;
        this._resizeEventType = 'resize';
        if (!this._iframe) {
            throw new api_shared_js_1.TableauError(Contract.EmbeddingErrorCodes.InternalError, 'Iframe has not been created yet');
        }
        // When an initial time dimension or filters are provided, we delay the dispatching of the FirstPulseMetricSizeKnownEvent
        // until after they've been applied and the PulseFirstInteractive event of the ultimate metric fires.
        // If no time dimension or filters are provided, we dispatch the event normally.
        this._shouldDispatchMetricSizeKnownEvent = !_timeDimension && !_filters.length;
    }
    get iframe() {
        return this._iframe;
    }
    get embeddingId() {
        return this._embeddingId;
    }
    initialize() {
        const iframeWindow = this._iframe.contentWindow;
        if (!iframeWindow) {
            throw new api_shared_js_1.TableauError(Contract.EmbeddingErrorCodes.InternalError, 'Iframe has not been created yet');
        }
        try {
            this._messenger = new api_internal_contract_js_1.CrossFrameMessenger(window, iframeWindow, this._frameUrl.origin);
            this._dispatcher = new api_shared_js_1.CrossFrameDispatcher(this._messenger);
            Services_1.registerInitializationEmbeddingServices(this._dispatcher, this.embeddingId);
            const initializationService = api_shared_js_1.ApiServiceRegistry.get(this.embeddingId).getService("initialization-service" /* Initialization */);
            const pulseMetricSizeKnownUnregister = initializationService.registerHandler(api_internal_contract_js_1.NotificationId.FirstPulseMetricSizeKnown, () => this._shouldDispatchMetricSizeKnownEvent, (model) => {
                this.handlePulseMetricSizeKnownEvent(model);
                pulseMetricSizeKnownUnregister();
            });
            initializationService.registerHandler(api_internal_contract_js_1.NotificationId.PulseInteractive, () => true, (model) => {
                this.handlePulseInteractiveEvent(model);
            });
            initializationService.registerHandler(api_internal_contract_js_1.NotificationId.PulseError, () => true, (model) => {
                this.handlePulseErrorEvent(model);
            });
            initializationService.registerHandler(api_internal_contract_js_1.NotificationId.PulseUrlChanged, () => true, (model) => {
                this.handlePulseUrlChangedEvent(model);
            });
            initializationService.registerHandler(api_internal_contract_js_1.NotificationId.PulseTimeDimensionChanged, () => true, (model) => {
                this.handlePulseTimeDimensionChangedEvent(model);
            });
            initializationService.registerHandler(api_internal_contract_js_1.NotificationId.PulseInsightDiscovered, () => true, (model) => {
                this.handlePulseInsightDiscoveredEvent(model);
            });
            initializationService.registerHandler(api_internal_contract_js_1.NotificationId.PulseFiltersChanged, () => true, (model) => {
                this.handlePulseFiltersChangedEvent(model);
            });
            this._messenger.startListening();
        }
        catch (e) {
            throw new api_shared_js_1.TableauError(Contract.EmbeddingErrorCodes.InternalError, 'Unexpected error during initialization.');
        }
    }
    dispose() {
        if (this._messenger) {
            this._messenger.stopListening();
        }
        this.removeWindowResizeHandler();
    }
    updateIframeTitle(bootstrapInfo) {
        this._iframe.setAttribute('title', bootstrapInfo.iframeTitle);
    }
    handlePulseMetricSizeKnownEvent(model) {
        const sizeEvent = new FirstPulseMetricSizeKnownEvent_1.FirstPulseMetricSizeKnownEvent(model.width, model.height);
        this._pulse.dispatchEvent(new CustomEvent(Contract.EmbeddingTableauEventType.FirstPulseMetricSizeKnown, { detail: sizeEvent }));
        if (this._pulse.fixedSize) {
            return;
        }
        this.resize();
        this.addWindowResizeHandler();
    }
    resize() {
        const { height, width } = this.calculateLayoutSize();
        this._iframe.style.height = height + 'px';
        this._iframe.style.width = width + 'px';
    }
    calculateLayoutSize() {
        const availableSize = this._pulse.parentElement
            ? HtmlElementHelpers_1.HtmlElementHelpers.getContentSize(this._pulse.parentElement)
            : { height: 0, width: 0 };
        return availableSize;
    }
    removeWindowResizeHandler() {
        if (!this._windowResizeHandler) {
            return;
        }
        window.removeEventListener(this._resizeEventType, this._windowResizeHandler);
    }
    addWindowResizeHandler() {
        if (this._windowResizeHandler) {
            return;
        }
        this._windowResizeHandler = this.resize.bind(this);
        window.addEventListener(this._resizeEventType, this._windowResizeHandler);
    }
    handlePulseInteractiveEvent(bootstrapInfo) {
        api_shared_js_1.ApiServiceRegistry.get(this.embeddingId).registerService(new PulseServiceImpl_1.PulseServiceImpl(this._dispatcher, this.embeddingId));
        api_shared_js_1.ApiServiceRegistry.get(this.embeddingId).registerService(new api_shared_js_1.NotificationServiceImpl(this._dispatcher));
        if (this._timeDimension) {
            this.applyTimeDimensionAsync(this._timeDimension);
            // Applying the time dimension will trigger a new interactive event, so we need to bail here.
            // Time dimension is cleared so it doesn't try to apply again during the next interactive event.
            this._timeDimension = undefined;
            return;
        }
        if (this._filters.length) {
            this.applyFiltersAsync(this._filters.map((f) => ({
                fieldName: f.field,
                values: f.value.split(','),
                updateType: Contract.FilterUpdateType.Replace,
                options: { isExcludeMode: false },
            })));
            // Applying the filters will trigger a new interactive event, so we need to bail here.
            // Filter list is cleared so they don't try to apply again during the next interactive event.
            this._filters = [];
            return;
        }
        this._iframe.style.visibility = 'visible';
        this.updateIframeTitle(bootstrapInfo);
        this._shouldDispatchMetricSizeKnownEvent = true;
        this._pulse.dispatchEvent(new CustomEvent(Contract.EmbeddingTableauEventType.FirstInteractive));
    }
    handlePulseErrorEvent(model) {
        const event = new PulseErrorEvent_1.PulseErrorEvent(model.message, model.httpStatus, model.messageVisibility);
        this._pulse.dispatchEvent(new CustomEvent(Contract.EmbeddingTableauEventType.PulseError, { detail: event }));
    }
    handlePulseUrlChangedEvent(model) {
        const event = new PulseUrlChangedEvent_1.PulseUrlChangedEvent(model.oldUrl, model.newUrl, model.context);
        this._pulse.dispatchEvent(new CustomEvent(Contract.EmbeddingTableauEventType.PulseUrlChanged, { detail: event }));
    }
    handlePulseTimeDimensionChangedEvent(model) {
        const event = new PulseTimeDimensionChangedEvent_1.PulseTimeDimensionChangedEvent(model.timeDimension);
        this._pulse.dispatchEvent(new CustomEvent(Contract.EmbeddingTableauEventType.PulseTimeDimensionChanged, { detail: event }));
    }
    handlePulseInsightDiscoveredEvent(model) {
        const event = new PulseInsightDiscoveredEvent_1.PulseInsightDiscoveredEvent(model.id, model.characterization, model.markup, model.question, model.score, model.type, model.version);
        this._pulse.dispatchEvent(new CustomEvent(Contract.EmbeddingTableauEventType.PulseInsightDiscovered, { detail: event }));
    }
    handlePulseFiltersChangedEvent(model) {
        const event = new PulseFiltersChangedEvent_1.PulseFiltersChangedEvent(model.fieldNames, this.embeddingId);
        this._pulse.dispatchEvent(new CustomEvent(Contract.EmbeddingTableauEventType.PulseFiltersChanged, { detail: event }));
    }
    applyFiltersAsync(filters) {
        const service = api_shared_js_1.ApiServiceRegistry.get(this.embeddingId).getService("PulseService" /* PulseService */);
        return service.applyFiltersAsync(filters);
    }
    getTimeDimensionAsync() {
        const service = api_shared_js_1.ApiServiceRegistry.get(this.embeddingId).getService("PulseService" /* PulseService */);
        return service.getTimeDimensionAsync();
    }
    applyTimeDimensionAsync(timeDimension) {
        const service = api_shared_js_1.ApiServiceRegistry.get(this.embeddingId).getService("PulseService" /* PulseService */);
        return service.applyTimeDimensionAsync(timeDimension);
    }
    getFiltersAsync() {
        const service = api_shared_js_1.ApiServiceRegistry.get(this.embeddingId).getService("PulseService" /* PulseService */);
        return service.getFiltersAsync();
    }
    clearFiltersAsync(fieldNames) {
        const service = api_shared_js_1.ApiServiceRegistry.get(this.embeddingId).getService("PulseService" /* PulseService */);
        return service.clearFiltersAsync(fieldNames);
    }
    clearAllFiltersAsync() {
        const service = api_shared_js_1.ApiServiceRegistry.get(this.embeddingId).getService("PulseService" /* PulseService */);
        return service.clearAllFiltersAsync();
    }
}
exports.PulseImpl = PulseImpl;
//# sourceMappingURL=PulseImpl.js.map