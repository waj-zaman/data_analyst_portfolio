import * as Api from '@tableau/embedding-api';
import { CustomMarkContextMenuEvent } from '@tableau/embedding-api';
import { CustomViewEvent } from '@tableau/embedding-api';
import { DependencyList } from 'react';
import { DeviceType } from '@tableau/embedding-api';
import { FilterChangedEvent } from '@tableau/embedding-api';
import { FirstPulseMetricSizeKnownEvent } from '@tableau/embedding-api';
import { FirstVizSizeKnownEvent } from '@tableau/embedding-api';
import { ForwardRefExoticComponent } from 'react';
import { MarksSelectedEvent } from '@tableau/embedding-api';
import { MemoExoticComponent } from 'react';
import { MutableRefObject } from 'react';
import { ParameterChangedEvent } from '@tableau/embedding-api';
import { PulseAttributes } from '@tableau/embedding-api';
import { PulseErrorEvent } from '@tableau/embedding-api';
import { PulseFiltersChangedEvent } from '@tableau/embedding-api';
import { PulseInsightDiscoveredEvent } from '@tableau/embedding-api';
import { PulseLayout } from '@tableau/embedding-api';
import { PulseTimeDimension } from '@tableau/embedding-api';
import { PulseTimeDimensionChangedEvent } from '@tableau/embedding-api';
import { PulseUrlChangedEvent } from '@tableau/embedding-api';
import { RefAttributes } from 'react';
import { RefObject } from 'react';
import { StoryPointSwitchedEvent } from '@tableau/embedding-api';
import { SummaryDataChangedEvent } from '@tableau/embedding-api';
import { TableauAuthoringViz as TableauAuthoringViz_2 } from '@tableau/embedding-api';
import { TableauPulse as TableauPulse_2 } from '@tableau/embedding-api';
import { TableauViz as TableauViz_2 } from '@tableau/embedding-api';
import { TabSwitchedEvent } from '@tableau/embedding-api';
import { Toolbar } from '@tableau/embedding-api';
import { ToolbarStateChangedEvent } from '@tableau/embedding-api';
import { UrlActionEvent } from '@tableau/embedding-api';
import { VizAttributes } from '@tableau/embedding-api';
import { VizAuthoringAttributes } from '@tableau/embedding-api';
import { VizLoadErrorEvent } from '@tableau/embedding-api';
import { VizSharedAttributes } from '@tableau/embedding-api';
import { WebComponentAttributes } from '@tableau/embedding-api';
import { WorkbookPublishedAsEvent } from '@tableau/embedding-api';

export { Api }

export declare type CustomParameter = {
    name: string;
    value: string;
};

declare type CustomParameter_2 = {
    name: string;
    value: string;
};

declare const embeddedIframePropToAttrMap: {
    readonly "iframe-attr-class": "iframeAttributeClass";
    readonly "iframe-attr-loading": "iframeAttributeLoading";
    readonly "iframe-attr-style": "iframeAttributeStyle";
};

declare type EventHandler<TEvent extends TableauEvent<TableauEventTarget>> = (event: TEvent) => void;

declare type Filter = {
    field: string;
    value: string;
};

declare type IframeLoadingAttribute = 'eager' | 'lazy';

declare type PulseAttribute = `${PulseAttributes}`;

declare type PulseEvent = StringStartsWith<PulseAttribute, 'on'>;

export declare type PulseFilter = Filter;

declare const pulsePropToAttrMap: {
    readonly "disable-explore-filter": "disableExploreFilter";
    readonly layout: "layout";
    readonly "time-dimension": "timeDimension";
    readonly "token-optional": "isTokenOptional";
};

declare type StringStartsWith<T extends string, S extends string> = T extends `${S}${string}` ? T : never;

export declare const TableauAuthoringViz: MemoExoticComponent<ForwardRefExoticComponent<Partial<{
src: string;
width: string;
height: string;
token: string;
debug: boolean;
iframeAuth: boolean;
forceTokenSync: boolean;
} & {
onvizloaderror: EventHandler<TableauDetailedEvent<TableauAuthoringViz_2, VizLoadErrorEvent>>;
} & {
disableVersionCheck: boolean;
hideEditInDesktopButton: boolean;
suppressDefaultEditBehavior: boolean;
touchOptimize: boolean;
} & {
onEditInDesktopButtonClicked: EventHandler<TableauEvent<TableauAuthoringViz_2>>;
onFirstVizSizeKnown: EventHandler<TableauDetailedEvent<TableauAuthoringViz_2, FirstVizSizeKnownEvent>>;
onFirstInteractive: EventHandler<TableauEvent<TableauAuthoringViz_2>>;
} & TableauEmbeddedIframeProps & {
hideCloseButton: boolean;
} & {
iframeStyle: string;
} & {
onWorkbookPublished: TableauAuthoringVizWorkbookPublishedEventHandler;
onWorkbookPublishedAs: TableauAuthoringVizWorkbookPublishedAsEventHandler;
onWorkbookReadyToClose: TableauAuthoringVizWorkbookReadyToCloseEventHandler;
}> & RefAttributes<TableauAuthoringViz_2 | undefined>>>;

export declare type TableauAuthoringVizEditButtonClickedEvent = TableauAuthoringVizEvent;

export declare type TableauAuthoringVizEditButtonClickedEventHandler = EventHandler<TableauAuthoringVizEditButtonClickedEvent>;

export declare type TableauAuthoringVizEditInDesktopButtonClickedEvent = TableauAuthoringVizEvent;

export declare type TableauAuthoringVizEditInDesktopButtonClickedEventHandler = EventHandler<TableauAuthoringVizEditInDesktopButtonClickedEvent>;

declare type TableauAuthoringVizEvent = TableauEvent<TableauAuthoringViz_2>;

export declare type TableauAuthoringVizFirstInteractiveEvent = TableauAuthoringVizEvent;

export declare type TableauAuthoringVizFirstInteractiveEventHandler = EventHandler<TableauAuthoringVizFirstInteractiveEvent>;

export declare type TableauAuthoringVizFirstVizSizeKnownEvent = TableauDetailedEvent<TableauAuthoringViz_2, FirstVizSizeKnownEvent>;

export declare type TableauAuthoringVizFirstVizSizeKnownEventHandler = EventHandler<TableauAuthoringVizFirstVizSizeKnownEvent>;

export declare type TableauAuthoringVizProps = Partial<TableauComponentProps<TableauAuthoringViz_2> & TableauVizSharedProps<TableauAuthoringViz_2> & TableauEmbeddedIframeProps & {
    [key in ValueOf<typeof vizAuthoringPropToAttrMap>]: {
        hideCloseButton: boolean;
    }[key];
} & {
    iframeStyle: string;
} & {
    [key in VizAuthoringEvent]: {
        onWorkbookPublished: TableauAuthoringVizWorkbookPublishedEventHandler;
        onWorkbookPublishedAs: TableauAuthoringVizWorkbookPublishedAsEventHandler;
        onWorkbookReadyToClose: TableauAuthoringVizWorkbookReadyToCloseEventHandler;
    }[key];
}>;

export declare type TableauAuthoringVizReadyToReceiveAuthTokenEvent = TableauAuthoringVizEvent;

export declare type TableauAuthoringVizReadyToReceiveAuthTokenEventHandler = EventHandler<TableauAuthoringVizReadyToReceiveAuthTokenEvent>;

export declare type TableauAuthoringVizWorkbookPublishedAsEvent = TableauDetailedEvent<TableauAuthoringViz_2, WorkbookPublishedAsEvent>;

export declare type TableauAuthoringVizWorkbookPublishedAsEventHandler = EventHandler<TableauAuthoringVizWorkbookPublishedAsEvent>;

export declare type TableauAuthoringVizWorkbookPublishedEvent = TableauAuthoringVizEvent;

export declare type TableauAuthoringVizWorkbookPublishedEventHandler = EventHandler<TableauAuthoringVizWorkbookPublishedEvent>;

export declare type TableauAuthoringVizWorkbookReadyToCloseEvent = TableauAuthoringVizEvent;

export declare type TableauAuthoringVizWorkbookReadyToCloseEventHandler = EventHandler<TableauAuthoringVizWorkbookReadyToCloseEvent>;

declare type TableauComponentProps<T extends TableauEventTarget> = {
    [key in ValueOf<typeof tableauComponentPropToAttrMap>]: {
        src: string;
        width: string;
        height: string;
        token: string;
        debug: boolean;
        iframeAuth: boolean;
        forceTokenSync: boolean;
    }[key];
} & {
    [key in TableauWebComponentEvent]: {
        onvizloaderror: EventHandler<TableauDetailedEvent<T, VizLoadErrorEvent>>;
    }[key];
};

declare const tableauComponentPropToAttrMap: {
    readonly src: "src";
    readonly width: "width";
    readonly height: "height";
    readonly token: "token";
    readonly debug: "debug";
    readonly "iframe-auth": "iframeAuth";
    readonly "force-token-sync": "forceTokenSync";
};

declare type TableauDetailedEvent<TTarget extends TableauEventTarget, TDetail> = TableauEvent<TTarget> & {
    detail: TDetail;
};

declare type TableauEmbeddedIframeProps = {
    [key in ValueOf<typeof embeddedIframePropToAttrMap>]: {
        iframeAttributeClass: string;
        iframeAttributeLoading: IframeLoadingAttribute | Omit<string, IframeLoadingAttribute>;
        iframeAttributeStyle: string;
    }[key];
};

declare type TableauEvent<TTarget extends TableauEventTarget> = {
    target: TTarget;
};

declare type TableauEventTarget = TableauViz_2 | TableauAuthoringViz_2 | TableauPulse_2;

export declare const TableauPulse: MemoExoticComponent<ForwardRefExoticComponent<Partial<{
src: string;
width: string;
height: string;
token: string;
debug: boolean;
iframeAuth: boolean;
forceTokenSync: boolean;
} & {
onvizloaderror: EventHandler<TableauDetailedEvent<TableauPulse_2, VizLoadErrorEvent>>;
} & TableauEmbeddedIframeProps & {
disableExploreFilter: boolean;
layout: PulseLayout | "default" | "card" | "ban";
timeDimension: PulseTimeDimension | "Today" | "Yesterday" | "WeekToDate" | "LastWeek" | "MonthToDate" | "LastMonth" | "QuarterToDate" | "LastQuarter" | "YearToDate" | "LastYear";
isTokenOptional: boolean;
} & {
pulseFilters: PulseFilter[];
themeParameters: ThemeParameter[];
iframeStyle: string;
} & {
onFirstInteractive: TableauPulseFirstInteractiveEventHandler;
onFirstPulseMetricSizeKnown: TableauPulseFirstMetricSizeKnownEventHandler;
onPulseError: TableauPulseErrorEventHandler;
onPulseFiltersChanged: TableauPulseFiltersChangedEventHandler;
onPulseInsightDiscovered: TableauPulseInsightDiscoveredEventHandler;
onPulseTimeDimensionChanged: TableauPulseTimeDimensionChangedEventHandler;
onPulseUrlChanged: TableauPulseUrlChangedEventHandler;
}> & RefAttributes<TableauPulse_2 | undefined>>>;

declare type TableauPulseErrorEvent = TableauDetailedEvent<TableauPulse_2, PulseErrorEvent>;

declare type TableauPulseErrorEventHandler = EventHandler<TableauPulseErrorEvent>;

declare type TableauPulseEvent = TableauEvent<TableauPulse_2>;

declare type TableauPulseFiltersChangedEvent = TableauDetailedEvent<TableauPulse_2, PulseFiltersChangedEvent>;

declare type TableauPulseFiltersChangedEventHandler = EventHandler<TableauPulseFiltersChangedEvent>;

declare type TableauPulseFirstInteractiveEvent = TableauPulseEvent;

declare type TableauPulseFirstInteractiveEventHandler = EventHandler<TableauPulseFirstInteractiveEvent>;

declare type TableauPulseFirstMetricSizeKnownEvent = TableauDetailedEvent<TableauPulse_2, FirstPulseMetricSizeKnownEvent>;

declare type TableauPulseFirstMetricSizeKnownEventHandler = EventHandler<TableauPulseFirstMetricSizeKnownEvent>;

declare type TableauPulseInsightDiscoveredEvent = TableauDetailedEvent<TableauPulse_2, PulseInsightDiscoveredEvent>;

declare type TableauPulseInsightDiscoveredEventHandler = EventHandler<TableauPulseInsightDiscoveredEvent>;

export declare type TableauPulseProps = Partial<TableauComponentProps<TableauPulse_2> & TableauEmbeddedIframeProps & {
    [key in ValueOf<typeof pulsePropToAttrMap>]: {
        disableExploreFilter: boolean;
        layout: PulseLayout | `${PulseLayout}`;
        timeDimension: PulseTimeDimension | `${PulseTimeDimension}`;
        isTokenOptional: boolean;
    }[key];
} & {
    pulseFilters: PulseFilter[];
    themeParameters: ThemeParameter[];
    iframeStyle: string;
} & {
    [key in PulseEvent]: {
        onFirstInteractive: TableauPulseFirstInteractiveEventHandler;
        onFirstPulseMetricSizeKnown: TableauPulseFirstMetricSizeKnownEventHandler;
        onPulseError: TableauPulseErrorEventHandler;
        onPulseFiltersChanged: TableauPulseFiltersChangedEventHandler;
        onPulseInsightDiscovered: TableauPulseInsightDiscoveredEventHandler;
        onPulseTimeDimensionChanged: TableauPulseTimeDimensionChangedEventHandler;
        onPulseUrlChanged: TableauPulseUrlChangedEventHandler;
    }[key];
}>;

declare type TableauPulseTimeDimensionChangedEvent = TableauDetailedEvent<TableauPulse_2, PulseTimeDimensionChangedEvent>;

declare type TableauPulseTimeDimensionChangedEventHandler = EventHandler<TableauPulseTimeDimensionChangedEvent>;

declare type TableauPulseUrlChangedEvent = TableauDetailedEvent<TableauPulse_2, PulseUrlChangedEvent>;

declare type TableauPulseUrlChangedEventHandler = EventHandler<TableauPulseUrlChangedEvent>;

export declare type TableauSummaryDataChangedEvent = TableauDetailedEvent<TableauViz_2, SummaryDataChangedEvent>;

export declare type TableauSummaryDataChangedEventHandler = EventHandler<TableauSummaryDataChangedEvent>;

export declare const TableauViz: MemoExoticComponent<ForwardRefExoticComponent<Partial<{
src: string;
width: string;
height: string;
token: string;
debug: boolean;
iframeAuth: boolean;
forceTokenSync: boolean;
} & {
onvizloaderror: EventHandler<TableauDetailedEvent<TableauViz_2, VizLoadErrorEvent>>;
} & {
disableVersionCheck: boolean;
hideEditInDesktopButton: boolean;
suppressDefaultEditBehavior: boolean;
touchOptimize: boolean;
} & {
onEditInDesktopButtonClicked: EventHandler<TableauEvent<TableauViz_2>>;
onFirstVizSizeKnown: EventHandler<TableauDetailedEvent<TableauViz_2, FirstVizSizeKnownEvent>>;
onFirstInteractive: EventHandler<TableauEvent<TableauViz_2>>;
} & TableauEmbeddedIframeProps & {
disableUrlActionsPopups: boolean;
hideTabs: boolean;
toolbar: "hidden" | Toolbar | "top" | "bottom";
instanceIdToClone: string;
device: "default" | DeviceType | "desktop" | "tablet" | "phone";
hideEditButton: boolean;
} & {
vizParameters: VizParameter_2[];
vizFilters: VizFilter[];
customParameters: CustomParameter_2[];
iframeStyle: string;
} & {
onEditButtonClicked: TableauVizEditButtonClickedEventHandler;
onFilterChanged: TableauVizFilterChangedEventHandler;
onCustomMarkContextMenuEvent: TableauVizCustomMarkContextMenuEventHandler;
onMarkSelectionChanged: TableauVizMarksSelectedEventHandler;
onParameterChanged: TableauVizParameterChangedEventHandler;
onToolbarStateChanged: TableauVizToolbarStateChangedEventHandler;
onUrlAction: TableauVizUrlActionEventHandler;
onTabSwitched: TableauVizTabSwitchedEventHandler;
onCustomViewLoaded: TableauVizCustomViewEventHandler;
onCustomViewRemoved: TableauVizCustomViewEventHandler;
onCustomViewSaved: TableauVizCustomViewEventHandler;
onCustomViewSetDefault: TableauVizCustomViewEventHandler;
onStoryPointSwitched: TableauVizStoryPointSwitchedEventHandler;
onSummaryDataChanged: TableauSummaryDataChangedEventHandler;
onReadyToReceiveAuthToken: TableauVizReadyToReceiveAuthTokenEventHandler;
}> & RefAttributes<TableauViz_2 | undefined>>>;

export declare type TableauVizCustomMarkContextMenuEvent = TableauDetailedEvent<TableauViz_2, CustomMarkContextMenuEvent>;

export declare type TableauVizCustomMarkContextMenuEventHandler = EventHandler<TableauVizCustomMarkContextMenuEvent>;

export declare type TableauVizCustomViewEvent = TableauDetailedEvent<TableauViz_2, CustomViewEvent>;

export declare type TableauVizCustomViewEventHandler = EventHandler<TableauVizCustomViewEvent>;

export declare type TableauVizEditButtonClickedEvent = TableauVizEvent;

export declare type TableauVizEditButtonClickedEventHandler = EventHandler<TableauVizEditButtonClickedEvent>;

export declare type TableauVizEditInDesktopButtonClickedEvent = TableauVizEvent;

export declare type TableauVizEditInDesktopButtonClickedEventHandler = EventHandler<TableauVizEditInDesktopButtonClickedEvent>;

declare type TableauVizEvent = TableauEvent<TableauViz_2>;

export declare type TableauVizFilterChangedEvent = TableauDetailedEvent<TableauViz_2, FilterChangedEvent>;

export declare type TableauVizFilterChangedEventHandler = EventHandler<TableauVizFilterChangedEvent>;

export declare type TableauVizFirstInteractiveEvent = TableauVizEvent;

export declare type TableauVizFirstInteractiveEventHandler = EventHandler<TableauVizFirstInteractiveEvent>;

export declare type TableauVizFirstVizSizeKnownEvent = TableauDetailedEvent<TableauViz_2, FirstVizSizeKnownEvent>;

export declare type TableauVizFirstVizSizeKnownEventHandler = EventHandler<TableauVizFirstVizSizeKnownEvent>;

export declare type TableauVizMarksSelectedEvent = TableauDetailedEvent<TableauViz_2, MarksSelectedEvent>;

export declare type TableauVizMarksSelectedEventHandler = EventHandler<TableauVizMarksSelectedEvent>;

export declare type TableauVizParameterChangedEvent = TableauDetailedEvent<TableauViz_2, ParameterChangedEvent>;

export declare type TableauVizParameterChangedEventHandler = EventHandler<TableauVizParameterChangedEvent>;

export declare type TableauVizProps = Partial<TableauComponentProps<TableauViz_2> & TableauVizSharedProps<TableauViz_2> & TableauEmbeddedIframeProps & {
    [key in ValueOf<typeof vizPropToAttrMap>]: {
        device: DeviceType | `${DeviceType}`;
        disableUrlActionsPopups: boolean;
        hideEditButton: boolean;
        hideTabs: boolean;
        toolbar: Toolbar | `${Toolbar}`;
        instanceIdToClone: string;
    }[key];
} & {
    vizParameters: VizParameter_2[];
    vizFilters: VizFilter[];
    customParameters: CustomParameter_2[];
    iframeStyle: string;
} & {
    [key in VizEvent]: {
        onCustomMarkContextMenuEvent: TableauVizCustomMarkContextMenuEventHandler;
        onCustomViewLoaded: TableauVizCustomViewEventHandler;
        onCustomViewRemoved: TableauVizCustomViewEventHandler;
        onCustomViewSaved: TableauVizCustomViewEventHandler;
        onCustomViewSetDefault: TableauVizCustomViewEventHandler;
        onFilterChanged: TableauVizFilterChangedEventHandler;
        onEditButtonClicked: TableauVizEditButtonClickedEventHandler;
        onMarkSelectionChanged: TableauVizMarksSelectedEventHandler;
        onParameterChanged: TableauVizParameterChangedEventHandler;
        onReadyToReceiveAuthToken: TableauVizReadyToReceiveAuthTokenEventHandler;
        onStoryPointSwitched: TableauVizStoryPointSwitchedEventHandler;
        onSummaryDataChanged: TableauSummaryDataChangedEventHandler;
        onTabSwitched: TableauVizTabSwitchedEventHandler;
        onToolbarStateChanged: TableauVizToolbarStateChangedEventHandler;
        onUrlAction: TableauVizUrlActionEventHandler;
    }[key];
}>;

export declare type TableauVizReadyToReceiveAuthTokenEvent = TableauVizEvent;

export declare type TableauVizReadyToReceiveAuthTokenEventHandler = EventHandler<TableauVizReadyToReceiveAuthTokenEvent>;

declare type TableauVizSharedProps<T extends TableauViz_2 | TableauAuthoringViz_2> = {
    [key in ValueOf<typeof vizSharedPropToAttrMap>]: {
        disableVersionCheck: boolean;
        hideEditInDesktopButton: boolean;
        suppressDefaultEditBehavior: boolean;
        touchOptimize: boolean;
    }[key];
} & {
    [key in VizSharedEvent]: {
        onEditInDesktopButtonClicked: EventHandler<TableauEvent<T>>;
        onFirstInteractive: EventHandler<TableauEvent<T>>;
        onFirstVizSizeKnown: EventHandler<TableauDetailedEvent<T, FirstVizSizeKnownEvent>>;
    }[key];
};

export declare type TableauVizStoryPointSwitchedEvent = TableauDetailedEvent<TableauViz_2, StoryPointSwitchedEvent>;

export declare type TableauVizStoryPointSwitchedEventHandler = EventHandler<TableauVizStoryPointSwitchedEvent>;

export declare type TableauVizTabSwitchedEvent = TableauDetailedEvent<TableauViz_2, TabSwitchedEvent>;

export declare type TableauVizTabSwitchedEventHandler = EventHandler<TableauVizTabSwitchedEvent>;

export declare type TableauVizToolbarStateChangedEvent = TableauDetailedEvent<TableauViz_2, ToolbarStateChangedEvent>;

export declare type TableauVizToolbarStateChangedEventHandler = EventHandler<TableauVizToolbarStateChangedEvent>;

export declare type TableauVizUrlActionEvent = TableauDetailedEvent<TableauViz_2, UrlActionEvent>;

export declare type TableauVizUrlActionEventHandler = EventHandler<TableauVizUrlActionEvent>;

declare type TableauWebComponentAttribute = `${WebComponentAttributes}`;

declare type TableauWebComponentEvent = StringStartsWith<TableauWebComponentAttribute, 'on'>;

export declare type ThemeParameter = {
    name: string;
    value: string;
    type?: string;
};

export declare const useTableauAuthoringVizEditButtonClickedCallback: (callback: TableauAuthoringVizEditButtonClickedEventHandler, deps: DependencyList) => TableauAuthoringVizEditButtonClickedEventHandler;

export declare const useTableauAuthoringVizEditInDesktopButtonClickedCallback: (callback: TableauAuthoringVizEditInDesktopButtonClickedEventHandler, deps: DependencyList) => TableauAuthoringVizEditInDesktopButtonClickedEventHandler;

export declare const useTableauAuthoringVizFirstInteractiveCallback: (callback: TableauAuthoringVizFirstInteractiveEventHandler, deps: DependencyList) => TableauAuthoringVizFirstInteractiveEventHandler;

export declare const useTableauAuthoringVizFirstVizSizeKnownCallback: (callback: TableauAuthoringVizFirstVizSizeKnownEventHandler, deps: DependencyList) => TableauAuthoringVizFirstVizSizeKnownEventHandler;

export declare const useTableauAuthoringVizReadyToReceiveAuthTokenCallback: (callback: TableauAuthoringVizReadyToReceiveAuthTokenEventHandler, deps: DependencyList) => TableauAuthoringVizReadyToReceiveAuthTokenEventHandler;

export declare const useTableauAuthoringVizRef: {
    (initialValue: TableauAuthoringViz_2): MutableRefObject<TableauAuthoringViz_2>;
    (initialValue: TableauAuthoringViz_2 | null): RefObject<TableauAuthoringViz_2>;
    (initialValue?: undefined): MutableRefObject<TableauAuthoringViz_2 | undefined>;
};

export declare const useTableauAuthoringVizWorkbookPublishedAsCallback: (callback: TableauAuthoringVizWorkbookPublishedAsEventHandler, deps: DependencyList) => TableauAuthoringVizWorkbookPublishedAsEventHandler;

export declare const useTableauAuthoringVizWorkbookPublishedCallback: (callback: TableauAuthoringVizWorkbookPublishedEventHandler, deps: DependencyList) => TableauAuthoringVizWorkbookPublishedEventHandler;

export declare const useTableauAuthoringVizWorkbookReadyToCloseCallback: (callback: TableauAuthoringVizWorkbookReadyToCloseEventHandler, deps: DependencyList) => TableauAuthoringVizWorkbookReadyToCloseEventHandler;

export declare const useTableauPulseErrorCallback: (callback: TableauPulseErrorEventHandler, deps: DependencyList) => TableauPulseErrorEventHandler;

export declare const useTableauPulseFiltersChangedCallback: (callback: TableauPulseFiltersChangedEventHandler, deps: DependencyList) => TableauPulseFiltersChangedEventHandler;

export declare const useTableauPulseFirstInteractiveCallback: (callback: TableauPulseFirstInteractiveEventHandler, deps: DependencyList) => TableauPulseFirstInteractiveEventHandler;

export declare const useTableauPulseFirstMetricSizeKnownCallback: (callback: TableauPulseFirstMetricSizeKnownEventHandler, deps: DependencyList) => TableauPulseFirstMetricSizeKnownEventHandler;

export declare const useTableauPulseInsightDiscoveredCallback: (callback: TableauPulseInsightDiscoveredEventHandler, deps: DependencyList) => TableauPulseInsightDiscoveredEventHandler;

export declare const useTableauPulseRef: {
    (initialValue: TableauPulse_2): MutableRefObject<TableauPulse_2>;
    (initialValue: TableauPulse_2 | null): RefObject<TableauPulse_2>;
    (initialValue?: undefined): MutableRefObject<TableauPulse_2 | undefined>;
};

export declare const useTableauPulseTimeDimensionChangedCallback: (callback: TableauPulseTimeDimensionChangedEventHandler, deps: DependencyList) => TableauPulseTimeDimensionChangedEventHandler;

export declare const useTableauPulseUrlChangedCallback: (callback: TableauPulseUrlChangedEventHandler, deps: DependencyList) => TableauPulseUrlChangedEventHandler;

export declare const useTableauSummaryDataChangedCallback: (callback: TableauSummaryDataChangedEventHandler, deps: DependencyList) => TableauSummaryDataChangedEventHandler;

export declare const useTableauVizCustomMarkContextMenuCallback: (callback: TableauVizCustomMarkContextMenuEventHandler, deps: DependencyList) => TableauVizCustomMarkContextMenuEventHandler;

export declare const useTableauVizCustomViewCallback: (callback: TableauVizCustomViewEventHandler, deps: DependencyList) => TableauVizCustomViewEventHandler;

export declare const useTableauVizEditButtonClickedCallback: (callback: TableauVizEditButtonClickedEventHandler, deps: DependencyList) => TableauVizEditButtonClickedEventHandler;

export declare const useTableauVizEditInDesktopButtonClickedCallback: (callback: TableauVizEditInDesktopButtonClickedEventHandler, deps: DependencyList) => TableauVizEditInDesktopButtonClickedEventHandler;

export declare const useTableauVizFilterChangedCallback: (callback: TableauVizFilterChangedEventHandler, deps: DependencyList) => TableauVizFilterChangedEventHandler;

export declare const useTableauVizFirstInteractiveCallback: (callback: TableauVizFirstInteractiveEventHandler, deps: DependencyList) => TableauVizFirstInteractiveEventHandler;

export declare const useTableauVizFirstVizSizeKnownCallback: (callback: TableauVizFirstVizSizeKnownEventHandler, deps: DependencyList) => TableauVizFirstVizSizeKnownEventHandler;

export declare const useTableauVizMarksSelectedCallback: (callback: TableauVizMarksSelectedEventHandler, deps: DependencyList) => TableauVizMarksSelectedEventHandler;

export declare const useTableauVizParameterChangedCallback: (callback: TableauVizParameterChangedEventHandler, deps: DependencyList) => TableauVizParameterChangedEventHandler;

export declare const useTableauVizReadyToReceiveAuthTokenCallback: (callback: TableauVizReadyToReceiveAuthTokenEventHandler, deps: DependencyList) => TableauVizReadyToReceiveAuthTokenEventHandler;

export declare const useTableauVizRef: {
    (initialValue: TableauViz_2): MutableRefObject<TableauViz_2>;
    (initialValue: TableauViz_2 | null): RefObject<TableauViz_2>;
    (initialValue?: undefined): MutableRefObject<TableauViz_2 | undefined>;
};

export declare const useTableauVizStoryPointSwitchedCallback: (callback: TableauVizStoryPointSwitchedEventHandler, deps: DependencyList) => TableauVizStoryPointSwitchedEventHandler;

export declare const useTableauVizTabSwitchedCallback: (callback: TableauVizTabSwitchedEventHandler, deps: DependencyList) => TableauVizTabSwitchedEventHandler;

export declare const useTableauVizToolbarStateChangedCallback: (callback: TableauVizToolbarStateChangedEventHandler, deps: DependencyList) => TableauVizToolbarStateChangedEventHandler;

export declare const useTableauVizUrlActionCallback: (callback: TableauVizUrlActionEventHandler, deps: DependencyList) => TableauVizUrlActionEventHandler;

declare type ValueOf<T> = T[keyof T];

declare type VizAttribute = `${VizAttributes}`;

declare type VizAuthoringAttribute = `${VizAuthoringAttributes}`;

declare type VizAuthoringEvent = StringStartsWith<VizAuthoringAttribute, 'on'>;

declare const vizAuthoringPropToAttrMap: {
    readonly "hide-close-button": "hideCloseButton";
};

declare type VizEvent = StringStartsWith<VizAttribute, 'on'>;

export declare type VizFilter = Filter;

export declare type VizParameter = {
    name: string;
    value: string;
};

declare type VizParameter_2 = {
    name: string;
    value: string;
};

declare const vizPropToAttrMap: {
    readonly device: "device";
    readonly "disable-url-actions": "disableUrlActionsPopups";
    readonly "hide-edit-button": "hideEditButton";
    readonly "hide-tabs": "hideTabs";
    readonly toolbar: "toolbar";
    readonly "instance-id-to-clone": "instanceIdToClone";
};

declare type VizSharedAttribute = `${VizSharedAttributes}`;

declare type VizSharedEvent = StringStartsWith<VizSharedAttribute, 'on'>;

declare const vizSharedPropToAttrMap: {
    readonly "disable-version-check": "disableVersionCheck";
    readonly "hide-edit-in-desktop-button": "hideEditInDesktopButton";
    readonly "suppress-default-edit-behavior": "suppressDefaultEditBehavior";
    readonly "touch-optimize": "touchOptimize";
};

export { }
